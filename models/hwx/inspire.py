from typing import TypeVar
class hwString:
	pass
class hwTSignal:
	pass
class hwfdmSynthesis:
	pass
class hwStringList:
	pass
class hwVariant:
	pass
class hwfdmImplicitEditIface:
	pass
class hwfdmImplicitGeomObject:
	pass
class hwfdmImplicitGeomObjectCollection:
	pass
class hwfdmFeatureAreaCollection:
	pass
class hwfdmOccurrence:
	pass
class hwBox3d:
	pass
class hwTriple:
	pass
class DirectImplicitTransformInputBase:
	pass
class hwfdmAssemblyOccurrence:
	pass
class hwTripleList:
	pass
class hwSystem:
	pass
class hwfdmCreateSolidCylinderOptions:
	pass
class IPI_CF:
	pass
class hwfdmConstructionFeature:
	pass


class ACos:
	def __init__(self,**kwds):
		"""
Implicit Trigonometry ACos operation.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class ACosh:
	def __init__(self,**kwds):
		"""
Implicit Trigonometry ACosh operation.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class ASin:
	def __init__(self,**kwds):
		"""
Implicit Trigonometry ASin operation.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class ASinh:
	def __init__(self,**kwds):
		"""
Implicit Trigonometry ASinh operation.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class ATan:
	def __init__(self,**kwds):
		"""
Implicit Trigonometry ATan operation.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class ATan2:
	def __init__(self,**kwds):
		"""
Implicit Trigonometry ATan2 operation.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class ATanh:
	def __init__(self,**kwds):
		"""
Implicit Trigonometry ATanh operation.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class AbortException:
	def __init__(self):
		"""
Exception used to exit code during an operation.
  
  Can be safely ignored/suppressed when caught since the problem message was
  already shown to the user in raiseProblem.
  
"""
		pass

class Abs:
	def __init__(self,**kwds):
		"""
Implicit absolute operation.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class Add:
	def __init__(self,**kwds):
		"""
Implicit Add operation.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class AddVector:
	def __init__(self,**kwds):
		"""
Implicit Vector Add operation.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class AlignedHole:
	def __init__(self,aligned):
		"""
List of aligned holes
"""
		pass

	def addAdjacentFeature(self,feature):
		"""
		Add the supplied feature to the HoleData
    
		"""
		pass

	def append(self,item):
		"""
		Overloaded list method to cast the item to a HoleData
    
		"""
		pass

	@property
	def axis(self):
		pass
	@axis.setter
	def axis(self):
		pass

	def copy(self):
		"""
		 Return the copied hole
		"""
		pass

	@property
	def fasteners(self):
		pass
	@fasteners.setter
	def fasteners(self):
		pass

	@property
	def features(self):
		pass
	@features.setter
	def features(self):
		pass

	def isOpen(self):
		pass

	def isaRegularCylinder(self):
		"""
		Return true, if cylindrical hole has perpendicular faces
    
		"""
		pass

	@property
	def isslot(self):
		pass
	@isslot.setter
	def isslot(self):
		pass

	@property
	def isvalid(self):
		pass
	@isvalid.setter
	def isvalid(self):
		pass

	@property
	def location(self):
		pass
	@location.setter
	def location(self):
		pass

	@property
	def origBoltParts(self):
		pass
	@origBoltParts.setter
	def origBoltParts(self):
		pass

	@property
	def parts(self):
		pass
	@parts.setter
	def parts(self):
		pass

	@property
	def radius(self):
		pass
	@radius.setter
	def radius(self):
		pass

	def removeFeature(self,feature):
		"""
		Remove a feature from this hole
    
		"""
		pass

	@property
	def shape(self):
		pass
	@shape.setter
	def shape(self):
		pass

	@property
	def size(self):
		pass
	@size.setter
	def size(self):
		pass

	@property
	def type(self):
		pass
	@type.setter
	def type(self):
		pass

class AnalysisResults:
	def __init__(self):
		"""
All Analysis results stored in the model
"""
		pass

	@property
	def collectionType(self):
		pass
	@collectionType.setter
	def collectionType(self):
		pass

	def getResultTypeId(self,name):
		pass

	def getResultTypeName(self,id):
		pass

	@property
	def items(self):
		pass
	@items.setter
	def items(self):
		pass

	def release(self,forceUnloadPostdata=False):
		pass

	def reset(self):
		pass

	@property
	def runs(self):
		pass
	@runs.setter
	def runs(self):
		pass

class AnalyticalShape:
	"""

This module implements the method:
  identifyShape - attempts to identify a part geometry as a known shape
                  and returns shape data class instance. 
These are the shapes that are supported:
  - Box
  - Sphere
  - Cylinder
  - Ellipsoid 
  - Frustum
  - Gear
  - GearRack

"""
	pass

class AngleMeasure:
	def __init__(self,location1, location2, location3, **kwds):
		"""
Measures the angle between three points.

    Angle measure creates a INCANG request/measure.
  
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	@property
	def angle(self):
		pass
	@angle.setter
	def angle(self):
		pass

	def destroy(self):
		"""
		Delete the object removing it from the model.
    
    The object may come back due to an undo/redo.
    
		"""
		pass

	@property
	def entity1(self):
		pass
	@entity1.setter
	def entity1(self):
		pass

	@property
	def entity2(self):
		pass
	@entity2.setter
	def entity2(self):
		pass

	@property
	def entity3(self):
		pass
	@entity3.setter
	def entity3(self):
		pass

	def getAllChildren(self,type=None, **kwds):
		"""
		Returns a list of all children that matches the specified type.

    Args:
      type (list[Named]): Filter to use to get the children based on object type.
      **kwds : Additional keyword arguments to match other attributes of the object.

    Returns:
      list[Union[Part, Motor, BoundaryCondition, ...]]: The list of children that satisfy the supplied filters.
    
		"""
		pass

	def getAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value.

    Args:
      name (str): Attribute name to find its class.
    
		"""
		pass

	def getAttributes(self,type=None, **kwds):
		"""
		Return an dict of the attributes.
    Pass type and kwds to filter by type and Attribute properties

    Args:
      type (type): Filters the attribute based on type
      **kwds : Additional kwds argument to filter attribute by its properties

    Returns:
      dict: Return an OrderedDict of the attributes
    
		"""
		pass

	def getChild(self,name=None, recursive=False, **kwds):
		"""
		Returns the child of the object which matches the specified unique name.

    Args:
      name (str): The name of the child object.
      recursive (bool):  Search all descendents.
      **kwds : Additional keyword arguments to match attributes of the object.

    Returns:
      Named: The child object which satisfies the specified filters.
    
		"""
		pass

	def getChildren(self,type=None, recursive=False, sorted=False, **kwds):
		"""
		Returns a list of children that is of the specified type.

    Args:
      type (Type[Named]): Filter objects by class.
      recursive (bool): True to get all descendent Parts and Assemblies.
      sorted (bool): Sort the children base on id.

    Returns:
      list[Named]
    
		"""
		pass

	def getClass(self,className):
		"""
		Returns the class of the object.
    
    It can be simple or qualified (with namespace). If the name is simple, we 
    prepend the cls.namespace.

    Args:
      className (Union[Part, Occurrence, Named..]) : The class name. 
     
    Returns:
      Union[Part, Occurrence, Named..] : The class for the specified className. 

    
		"""
		pass

	def getClassAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value

    Args:
      name (str): Name of the attribute
    
		"""
		pass

	def getDependents(self,recursive=False, **kwds):
		"""
		Get objects that reference this object through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getGuiAttributeNames(self):
		"""
		Return list of the attribute names that are in the gui

    Returns:
      list: Returns list of active gui attribute
    
		"""
		pass

	def getGuiValue(self,attr, **kwds):
		"""
		Get value formatted to be shown in the gui

    Args:
      attr (str): Attribute name to gets its gui value.

    Returns:
      str: Returns a string of the value with its gui units, like "5 mm/s".
    
		"""
		pass

	def getReferences(self,recursive=False, **kwds):
		"""
		Get objects this object references through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getSerializedAttributeValues(self):
		pass

	def getValue(self,attr):
		"""
		Return the attribute value for passed attribute name.
    
    Args:
      attr (String): Attribute name to gets its value.

    Returns:
      str: Returns the attribute value
    
		"""
		pass

	def isa(self,type=None, filter=None, name=None, wildcard=None, **kwds):
		"""
		Determines if the object matches the specified settings or not.
    
    Args:
      type (Union[Part, Assembly, Contact..]): The type of the object.
      filter (method): Return value of specified callback method.
      name (str): Name that matches exactly with object name.
      wildcard (str): A pattern to match exactly with the object name.
      **kwds : Additional keyword arguments to match other attributes.

    Returns:
      bool : True, if a match is found, otherwise False.
    
		"""
		pass

	@property
	def location(self):
		pass
	@location.setter
	def location(self):
		pass

	@property
	def location1(self):
		pass
	@location1.setter
	def location1(self):
		pass

	@property
	def location2(self):
		pass
	@location2.setter
	def location2(self):
		pass

	@property
	def location3(self):
		pass
	@location3.setter
	def location3(self):
		pass

	@property
	def locations(self):
		pass
	@locations.setter
	def locations(self):
		pass

	def modelPositions(self):
		"""
		Forces all objects to return the original model positions instead of the
    current analysis positions.

    Useful when defining draw methods on GeneralObjects where behaviour is 
    different while animating.
    
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	@property
	def parent(self):
		pass
	@parent.setter
	def parent(self):
		pass

	@property
	def parts(self):
		pass
	@parts.setter
	def parts(self):
		pass

	def setValue(self,attr, value):
		"""
		Alias for setattr (attr, value)
    Args:
      attr (str): Attribute name to sets its value.
      value (str): Attribute value to set .
    
		"""
		pass

	def setValues(self,**kwds):
		"""
		Sets passed name/value pairs.
    
    Values are set in a standard order (the order the attribute is defined
    on the class) which is required in certain cases when an attribute's
    setter expects another attribute to have already been set.
    For example, setting a reference before a location that is wrt it.
    
    Args:
      **kwds: Set attributes in one go.
    
		"""
		pass

	@property
	def textColor(self):
		pass
	@textColor.setter
	def textColor(self):
		pass

	@property
	def textHeader(self):
		pass
	@textHeader.setter
	def textHeader(self):
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

	def wasValueSet(self,attr):
		"""
		Check if attribute was set

    Args:
      attr (str): Attribute name to check it value set or not

    Returns:
      bool: True, if value was set else false.
    
		"""
		pass

class Any:
	def __init__(self,default=None, castForGet=None, **kwds):
		"""
Attribute to store arbitrary data structure including Named objects.

  Named objects become None when they are destroyed/zombified.

  Use castForGet to cleanup invalid/destroyed objects from return value.
  
  Use Any.ReferenceListener to refresh the gui when the value returned from
   castForGet may have changed due to a reference delete/resurrect/modify.
  
"""
		pass

	def apply(self,**kwds):
		"""
		Context manager to specify Attribute constructor kwds
    Useful to avoid repeating kwds while defining a related group
    
		"""
		pass

	def castForGet(self,obj, value):
		pass

	def castForSet(self,obj, value):
		pass

	def classifyObject(self,obj):
		pass

	def create(self,obj):
		pass

	def createList(self,listAttr, obj):
		pass

	def createListList(self,listAttr, obj):
		pass

	def disable(self,obj):
		"""
		Called by GeneralObject when destroyed (or undo of a create)
		"""
		pass

	def enable(self,obj):
		"""
		Called by GeneralObject when created (or undo of a destroy)
		"""
		pass

	def getCreateArgs(self):
		"""
		Helper used in create methods
		"""
		pass

	def getDisplayName(self,obj):
		pass

	def getGuiValue(self,obj):
		"""
		Returns the formatted value, as shown in the Property Editor.
		"""
		pass

	def getInCoreValue(self,obj):
		pass

	def getReadonly(self,obj):
		pass

	def getUnits(self,obj):
		pass

	def getValue(self,obj):
		pass

	def getValueList(self,obj):
		pass

	def getValueListList(self,obj):
		pass

	def initialize(self,objCls, name):
		"""
		Initializes the attribute.

    Args:
      objCls (class): Object class this attribute belongs to.
      name (str): Name of the attribute.
    
		"""
		pass

	def loadValue(self,obj, value):
		pass

	def populateGuiValue(self,obj, prop):
		"""
		Override to customize, prop.value, displayValue, allowedValues.
    
    The prop.value type determines which editor widget used:
    - bool -> checkbox
    - str  -> line edit
    - hwtypes.Color -> color picker
    
    Setting prop.allowedValues yields a ComboBox.
    
    prop.displayValue is a str shown when the editor loses focus.
    
		"""
		pass

	def populatePropertyEditor(self,obj, prop, **kwds):
		"""
		Customize how attribute appears in Property Editor and ObjectTables.
    
    Args:
      obj (GeneralObject)
      prop (hwt::Property): Property Editor interface.
      component (int): 0, 1, 2
        Only passed when showing Triples 1 value at a time.
    
		"""
		pass

	def setInCoreValue(self,obj, value):
		pass

	def setValue(self,obj, value):
		pass

	def setValueList(self,obj, value):
		pass

	def setValueListList(self,obj, value):
		pass

	def usingUnits(self,units):
		pass

class Assembly:
	def __init__(self,parent=None, **kwds):
		"""
An assembly is a list of parts.

  Assemblies can contain subassemblies, allowing you to organize your model
  hierarchically. Parts and subassemblies within an assembly are positioned in
  space relative to the parent assembly. If you translate or rotate a parent
  assembly, its parts and subassemblies move with it.

  Assemblies do not have their own properties. Changing properties
  for an assembly actually applies the change to the individual parts within the
  assembly down to the lowest level in the hierarchy.
  Only properties common to all parts in the assembly are shown.
  
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	@property
	def animationPosition(self):
		pass
	@animationPosition.setter
	def animationPosition(self):
		pass

	@property
	def assemblies(self):
		pass
	@assemblies.setter
	def assemblies(self):
		pass

	@property
	def autoCalculateCG(self):
		pass
	@autoCalculateCG.setter
	def autoCalculateCG(self):
		pass

	@property
	def autoCalculateMass(self):
		pass
	@autoCalculateMass.setter
	def autoCalculateMass(self):
		pass

	@property
	def autoCalculateMoment(self):
		pass
	@autoCalculateMoment.setter
	def autoCalculateMoment(self):
		pass

	def autoColorParts(self):
		"""
		Automatically assigns different colors to all the parts in the assembly.
		"""
		pass

	@property
	def axisAlignedBoundingBox(self):
		pass
	@axisAlignedBoundingBox.setter
	def axisAlignedBoundingBox(self):
		pass

	@property
	def beadPatterns(self):
		pass
	@beadPatterns.setter
	def beadPatterns(self):
		pass

	@property
	def cg(self):
		pass
	@cg.setter
	def cg(self):
		pass

	@property
	def cogConstraints(self):
		pass
	@cogConstraints.setter
	def cogConstraints(self):
		pass

	@property
	def color(self):
		pass
	@color.setter
	def color(self):
		pass

	@property
	def concentratedMasses(self):
		pass
	@concentratedMasses.setter
	def concentratedMasses(self):
		pass

	def createCurves(self,points, **kwds):
		"""
		Creates a list of SplineCurve parts that connect the points.

      If the points don't have intersections, creates one SplineCurve part.
      Otherwise, creates one SplineCurve part for each section.

    Args:
      points (list[math.Point]): List of points used to create the SplineCurve part.
      **kwds: Part attributes like name, position, color...

    Returns:
      list [Part] : List of created parts.

    
		"""
		pass

	def createEmptyPart(self,**kwds):
		"""
		Creates an empty part.

    Args:
      **kwds: Part attributes like name, position, color...

    Returns:
      Part
    
		"""
		pass

	def createPointPart(self,**kwds):
		"""
		Creates a point part.

    Args:
      **kwds: Part attributes like name, location, color...

    Returns:
      Part
    
		"""
		pass

	def createPolylines(self,points, **kwds):
		"""
		Creates a list of Polyline parts that connect the points.

      If the points don't have intersections, creates one Polyline part.
      Otherwise, creates one Polyline part for each section.

    Args:
      points (list[math.Point]): List of points to create the Polyline part.
      **kwds: Part attributes like name, position, color...

    Returns:
      list[Part]: List of created parts.
    
		"""
		pass

	def createSheetCircle(self,radius=1, **kwds):
		"""
		Creates a circle centered at the origin in the XY plane.

    Args:
      radius (float)
      **kwds: Part attributes like name, position, color...

    Returns:
      Part
    
		"""
		pass

	def createSheetPolygon(self,radius=1, nsides=3, **kwds):
		"""
		Creates a regular polygon centered at the origin in the XY-plane.

    Args:
      radius (float): The distance from the center to a vertex.
      nsides (int): The number of sides. Must be > 2.
      **kwds: Part attributes like name, position, color...

    Returns:
      Part
    
		"""
		pass

	def createSheetRectangle(self,x=1, y=1, **kwds):
		"""
		Creates a rectangle centered at the origin.

    Args:
      x (float): The length. 
      y (float): The width.
      **kwds: Part attributes like name, position, color...

    Returns:
      Part
    
		"""
		pass

	def createSolidBlock(self,x=1, y=1, z=1, **kwds):
		"""
		Creates a solid block with the center of the base at the origin.

    Args:
      x (float): The length.
      y (float): The width.
      z (float): The height.
      **kwds: Part attributes like name, position, color...

    Returns:
      Part
    
		"""
		pass

	def createSolidCone(self,radius=1, height=1, semiangle="0", **kwds):
		"""
		Creates a a solid cone with the base centered at the origin in the XY 
    plane and the height extending along the z-axis.

    Args:
      radius (float): The radius in the XY-plane.
      height (float): The height along z-axis.
      semiangle (float): The angle the cone makes with the z-axis. Must be > 0 < pi/2.
      **kwds: Part attributes like name, position, color...

    Returns:
      Part
    
		"""
		pass

	def createSolidCylinder(self,radius=1, height=1, **kwds):
		"""
		Creates a solid cylinder with the base centered at the origin in the XY 
    plane and the height extending along the z-axis.

    Args:
      radius (float): The radius in the XY-plane.
      height (float): The height along z-axis.
      **kwds: Part attributes like name, position, color...

    Returns:
      Part
    
		"""
		pass

	def createSolidEllipsoid(self,xRadius=1, yRadius=0.5, zRadius=0.25, **kwds):
		"""
		Creates a solid ellipsoid centered at the origin.

    Args:
      xRadius (float): The radius in x-axis.
      yRadius (float): The radius in y-axis.
      zRadius (float): The radius in z-axis.
      **kwds: Part attributes like name, position, color...

    Returns:
      Part
    
		"""
		pass

	def createSolidPrism(self,radius=1, height=1, nsides=20, blendradius="0", **kwds):
		"""
		Creates a solid prism with the base centered at the origin in the XY 
    plane and the height extending along the z-axis.

    Args:
      radius (float): The radius in the XY-plane.
      height (float): The height along z-axis.
      nsides (int): The number of facets. Must be > 2.
      blendradius (float): The radius used to round the corners.
      **kwds: Part attributes like name, position, color...

    Returns:
      Part
    
		"""
		pass

	def createSolidSphere(self,radius=1, **kwds):
		"""
		Creates a solid sphere with centre at origin.

    Args:
      radius (float)
      **kwds: Part attributes like name, location, color...

    Returns:
      Part
    
		"""
		pass

	def createSolidTorus(self,majorRadius=1, minorRadius=0.5, **kwds):
		"""
		Creates a solid torus centered at the origin, located in the XY-plane 
    with the z-axis sticking through the hole.

    Args:
      majorRadius (float): The radius from the hole's center to the rim's midline.
      minorRadius (float): The radius of the cross section of the rim. 
        Must be less than majorRadius.
      **kwds: Part attributes like name, position, color...

    Returns:
      Part
    
		"""
		pass

	def destroy(self):
		"""
		Destroys assemblies from the model.
    
		"""
		pass

	@property
	def detectCollisions(self):
		pass
	@detectCollisions.setter
	def detectCollisions(self):
		pass

	@property
	def displacementConstraints(self):
		pass
	@displacementConstraints.setter
	def displacementConstraints(self):
		pass

	@property
	def drawDirections(self):
		pass
	@drawDirections.setter
	def drawDirections(self):
		pass

	@property
	def enforcedDisplacements(self):
		pass
	@enforcedDisplacements.setter
	def enforcedDisplacements(self):
		pass

	@property
	def features(self):
		pass
	@features.setter
	def features(self):
		pass

	def getAllChildren(self,type=None, **kwds):
		"""
		Returns a list of all children that matches the specified type.

    Args:
      type (list[Named]): Filter to use to get the children based on object type.
      **kwds : Additional keyword arguments to match other attributes of the object.

    Returns:
      list[Union[Part, Motor, BoundaryCondition, ...]]: The list of children that satisfy the supplied filters.
    
		"""
		pass

	def getAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value.

    Args:
      name (str): Attribute name to find its class.
    
		"""
		pass

	def getAttributes(self,type=None, **kwds):
		"""
		Return an dict of the attributes.
    Pass type and kwds to filter by type and Attribute properties

    Args:
      type (type): Filters the attribute based on type
      **kwds : Additional kwds argument to filter attribute by its properties

    Returns:
      dict: Return an OrderedDict of the attributes
    
		"""
		pass

	def getCenterOfGravity(self,includeGround=True):
		"""
		Returns the centre of gravity of the assembly.

    Args:
      includeGround (bool): Include ground parts?

    Returns:
      Point
    
		"""
		pass

	def getChild(self,name=None, recursive=False, **kwds):
		"""
		Returns the child of the object which matches the specified unique name.

    Args:
      name (str): The name of the child object.
      recursive (bool):  Search all descendents.
      **kwds : Additional keyword arguments to match attributes of the object.

    Returns:
      Named: The child object which satisfies the specified filters.
    
		"""
		pass

	def getChildren(self,type=None, recursive=False, sorted=False, **kwds):
		"""
		Returns a list of children that is of the specified type.

    Args:
      type (Type[Named]): Filter objects by class.
      recursive (bool): True to get all descendent Parts and Assemblies.
      sorted (bool): Sort the children base on id.

    Returns:
      list[Named]
    
		"""
		pass

	def getClass(self,className):
		"""
		Returns the class of the object.
    
    It can be simple or qualified (with namespace). If the name is simple, we 
    prepend the cls.namespace.

    Args:
      className (Union[Part, Occurrence, Named..]) : The class name. 
     
    Returns:
      Union[Part, Occurrence, Named..] : The class for the specified className. 

    
		"""
		pass

	def getClassAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value

    Args:
      name (str): Name of the attribute
    
		"""
		pass

	def getDependents(self,recursive=False, **kwds):
		"""
		Get objects that reference this object through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getFeature(self,name=None):
		"""
		Find feature by its __str__/__repr__.
    
    Args:
      name (str)
    
    Returns:
      Feature
    
		"""
		pass

	def getFeatures(self,type=None, **kwds):
		"""
		Returns features that matches the specified filters.

    Args:
      type (Type[Feature]): The type of feature to return.
      **kwds: Additional keyword arguments to match other attributes.

    Returns:
      list [Feature]: A list of features that satisfies all the filter criteria.
    
		"""
		pass

	def getGuiAttributeNames(self):
		"""
		Return list of the attribute names that are in the gui

    Returns:
      list: Returns list of active gui attribute
    
		"""
		pass

	def getGuiValue(self,attr, **kwds):
		"""
		Get value formatted to be shown in the gui

    Args:
      attr (str): Attribute name to gets its gui value.

    Returns:
      str: Returns a string of the value with its gui units, like "5 mm/s".
    
		"""
		pass

	def getMass(self,includeGround=True):
		"""
		Returns the mass of the assembly.

    Args:
      includeGround (bool) : Include ground parts.

    Returns:
      float
    
		"""
		pass

	def getReferences(self,recursive=False, **kwds):
		"""
		Get objects this object references through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getSerializedAttributeValues(self):
		pass

	def getValue(self,attr):
		"""
		Return the attribute value for passed attribute name.
    
    Args:
      attr (String): Attribute name to gets its value.

    Returns:
      str: Returns the attribute value
    
		"""
		pass

	@property
	def ground(self):
		pass
	@ground.setter
	def ground(self):
		pass

	@property
	def grounded(self):
		pass
	@grounded.setter
	def grounded(self):
		pass

	@property
	def ip(self):
		pass
	@ip.setter
	def ip(self):
		pass

	def isa(self,type=None, filter=None, name=None, wildcard=None, **kwds):
		"""
		Determines if the object matches the specified settings or not.
    
    Args:
      type (Union[Part, Assembly, Contact..]): The type of the object.
      filter (method): Return value of specified callback method.
      name (str): Name that matches exactly with object name.
      wildcard (str): A pattern to match exactly with the object name.
      **kwds : Additional keyword arguments to match other attributes.

    Returns:
      bool : True, if a match is found, otherwise False.
    
		"""
		pass

	@property
	def location(self):
		pass
	@location.setter
	def location(self):
		pass

	@property
	def mass(self):
		pass
	@mass.setter
	def mass(self):
		pass

	@property
	def material(self):
		pass
	@material.setter
	def material(self):
		pass

	def meshInfo(self):
		pass

	@property
	def minBoundingBox(self):
		pass
	@minBoundingBox.setter
	def minBoundingBox(self):
		pass

	def modelPositions(self):
		"""
		Forces all objects to return the original model positions instead of the
    current analysis positions.

    Useful when defining draw methods on GeneralObjects where behaviour is 
    different while animating.
    
		"""
		pass

	@property
	def modifiable(self):
		pass
	@modifiable.setter
	def modifiable(self):
		pass

	@property
	def morphable(self):
		pass
	@morphable.setter
	def morphable(self):
		pass

	@property
	def movable(self):
		pass
	@movable.setter
	def movable(self):
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	@property
	def parent(self):
		pass
	@parent.setter
	def parent(self):
		pass

	@property
	def parts(self):
		pass
	@parts.setter
	def parts(self):
		pass

	@property
	def position(self):
		pass
	@position.setter
	def position(self):
		pass

	@property
	def rotations(self):
		pass
	@rotations.setter
	def rotations(self):
		pass

	def save(self,file):
		"""
		Save the Assembly in the specified file.

    Args:
      file (str) : File name and path, where the file needs to be saved.
        Valid file extensions are:
          '.x_b', '.x_t', '.xmt_bin', '.xmt_txt', '.sat', '.sab', '.iges', '.igs', 
          '.stl', '.step', '.stp', '.obj', '.vrml', '.vrl'.
    
		"""
		pass

	def setValue(self,attr, value):
		"""
		Alias for setattr (attr, value)
    Args:
      attr (str): Attribute name to sets its value.
      value (str): Attribute value to set .
    
		"""
		pass

	def setValues(self,**kwds):
		"""
		Sets passed name/value pairs.
    
    Values are set in a standard order (the order the attribute is defined
    on the class) which is required in certain cases when an attribute's
    setter expects another attribute to have already been set.
    For example, setting a reference before a location that is wrt it.
    
    Args:
      **kwds: Set attributes in one go.
    
		"""
		pass

	def simplifyHoles(self,entity, minSize="0", maxSize=None):
		"""
		Finds and removes holes and pockets, and find raised areas such as lettering.

  Args:
    entity (Part | Assembly | Feature): Part/Assembly from which you want to 
      remove the holes from or FeatureCircular which needs to be removed.
    minSize (float): Minimum size of hole.
    maxSize (float): Maximum size of hole.
  
		"""
		pass

	def simplifyImprints(self,entity):
		"""
		Finds and removes imprints from a part.

  An imprint is an edge or a point that appears on a surface that can be removed
  without changing the underlying integrity of the surface, such as scratches or
  trimmed points.

  Args:
    entity (Part | Assembly | FeatureLinear): Part/Assembly from which you want to
      remove the imprints from or FeatureLinear imprint to be removed.
  
		"""
		pass

	def simplifyPlugs(self,entity, minSize="0", maxSize=None):
		"""
		Finds holes and pockets, and plug them by filling the area with a new part

  Args:
    entity (Part | Assembly | Feature): Part/Assembly from which you want to plug 
      the holes or a Circular feature that needs to be plugged.
    minSize (float): Minimum size of plug.
    maxSize (float): Maximum size of plug.
  
		"""
		pass

	def simplifyRounds(self,entity, roundType="ALL", minSize="0", maxSize=None):
		"""
		Finds and removes both round (convex) and fillet (concave) surfaces.

  Args:
    entity (Part | Assembly | Feature): Part/Assembly from which you want to 
      remove the fillets, chamfers from or a Feature to be removed.
    roundType (str): Valid values are: ROUNDS, FILLETS, CHAMFERS and ALL.
    minSize (float): Minimum size of round.
    maxSize (float): Maximum size of round.
  
		"""
		pass

	@property
	def sketches(self):
		pass
	@sketches.setter
	def sketches(self):
		pass

	@property
	def spiders(self):
		pass
	@spiders.setter
	def spiders(self):
		pass

	@property
	def symmetryConstraints(self):
		pass
	@symmetryConstraints.setter
	def symmetryConstraints(self):
		pass

	@property
	def temperatures(self):
		pass
	@temperatures.setter
	def temperatures(self):
		pass

	@property
	def transparency(self):
		pass
	@transparency.setter
	def transparency(self):
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

	@property
	def volume(self):
		pass
	@volume.setter
	def volume(self):
		pass

	def wasValueSet(self,attr):
		"""
		Check if attribute was set

    Args:
      attr (str): Attribute name to check it value set or not

    Returns:
      bool: True, if value was set else false.
    
		"""
		pass

class Attribute:
	def __init__(self,fget=None, fset=None, doc=None, default=None, **kwds):
		"""
Python descriptor to set or get serializable values of Inspire objects.

  Base class for all the attributes.
  
"""
		pass

	def apply(self,**kwds):
		"""
		Context manager to specify Attribute constructor kwds
    Useful to avoid repeating kwds while defining a related group
    
		"""
		pass

	def castForGet(self,obj, value):
		"""
		Converts and returns the attribute value to its external type.

    Args:
      obj (GeneralObject): Object this attribute belongs to.
      value (Any): Value of the attribute to be converted.

    Returns:
      value (Any): Converted value.
    
		"""
		pass

	def castForSet(self,obj, value):
		"""
		Converts and validates the value of the attribute before setting.

      Converts the value it to its internal type (and base units if applicable).

    Args:
      obj (GeneralObject): Object this attribute belongs to.
      value (Any): Value of the attribute to set.

    Returns:
      value (Any): Validated and converted value.
    
		"""
		pass

	def classifyObject(self,obj):
		pass

	def createList(self,listAttr, obj):
		pass

	def createListList(self,listAttr, obj):
		pass

	def disable(self,obj):
		"""
		Called by GeneralObject when destroyed (or undo of a create)
		"""
		pass

	def enable(self,obj):
		"""
		Called by GeneralObject when created (or undo of a destroy)
		"""
		pass

	def getCreateArgs(self):
		"""
		Helper used in create methods
		"""
		pass

	def getDisplayName(self,obj):
		pass

	def getGuiValue(self,obj):
		"""
		Returns the formatted value, as shown in the Property Editor.
		"""
		pass

	def getInCoreValue(self,obj):
		pass

	def getReadonly(self,obj):
		pass

	def getUnits(self,obj):
		pass

	def getValue(self,obj):
		pass

	def getValueList(self,obj):
		pass

	def getValueListList(self,obj):
		pass

	def initialize(self,objCls, name):
		"""
		Initializes the attribute.

    Args:
      objCls (class): Object class this attribute belongs to.
      name (str): Name of the attribute.
    
		"""
		pass

	def loadValue(self,obj, value):
		"""
		Called by GeneralObject.loadAttributeValues during stmod deserialization
		"""
		pass

	def populateGuiValue(self,obj, prop):
		"""
		Override to customize, prop.value, displayValue, allowedValues.
    
    The prop.value type determines which editor widget used:
    - bool -> checkbox
    - str  -> line edit
    - hwtypes.Color -> color picker
    
    Setting prop.allowedValues yields a ComboBox.
    
    prop.displayValue is a str shown when the editor loses focus.
    
		"""
		pass

	def populatePropertyEditor(self,obj, prop, **kwds):
		"""
		Customize how attribute appears in Property Editor and ObjectTables.
    
    Args:
      obj (GeneralObject)
      prop (hwt::Property): Property Editor interface.
      component (int): 0, 1, 2
        Only passed when showing Triples 1 value at a time.
    
		"""
		pass

	def setInCoreValue(self,obj, value):
		pass

	def setValue(self,obj, value):
		pass

	def setValueList(self,obj, value):
		pass

	def setValueListList(self,obj, value):
		pass

	def usingUnits(self,units):
		pass

class AttributeException:
	def __init__(self):
		"""
Make exceptions this module throws distinguisable from standard exceptions
"""
		pass

class AttributeNameError:
	def __init__(self,name):
		"""
Attribute name doesn't exist
"""
		pass

class AttributeObjectError:
	def __init__(self):
		"""
General Attribute error, corresponding to builtin AttributeError
"""
		pass

class AttributeValueError:
	def __init__(self,name, value,extraMsg: str=""):
		"""
Attribute cannot be set to this particular value
"""
		pass

class Attributes:
	"""

Attributes are Python descriptors for the Inspire data model.

Attributes allow us to (beyond the standard descriptor functionality): 
  - cast the value before it is set
  - return an extended value 
  - simplify backwards compatibility

Contents:
  Attributes               - Inspire data value descriptors
  HasAttributesBase        - Base class for inspire data model classes
  exceptions               - Attribute specific exceptions
  memoizeUntilModelChanged - cache get values
  memoizeUntilObjectChanged
  memoizeUntilTypeChanged

"""
	pass

class Axis:
	def __init__(self,**kwds):
		"""
Create a axis implicit body.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class BODY_TYPES:
	"""
Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.
"""
	pass

class BaseSystem:
	def __init__(self):
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	def destroy(self):
		"""
		Delete the object removing it from the model.
    
    The object may come back due to an undo/redo.
    
		"""
		pass

	def getAllChildren(self,type=None, **kwds):
		"""
		Returns a list of all children that matches the specified type.

    Args:
      type (list[Named]): Filter to use to get the children based on object type.
      **kwds : Additional keyword arguments to match other attributes of the object.

    Returns:
      list[Union[Part, Motor, BoundaryCondition, ...]]: The list of children that satisfy the supplied filters.
    
		"""
		pass

	def getAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value.

    Args:
      name (str): Attribute name to find its class.
    
		"""
		pass

	def getAttributes(self,type=None, **kwds):
		"""
		Return an dict of the attributes.
    Pass type and kwds to filter by type and Attribute properties

    Args:
      type (type): Filters the attribute based on type
      **kwds : Additional kwds argument to filter attribute by its properties

    Returns:
      dict: Return an OrderedDict of the attributes
    
		"""
		pass

	def getChild(self,name=None, recursive=False, **kwds):
		"""
		Returns the child of the object which matches the specified unique name.

    Args:
      name (str): The name of the child object.
      recursive (bool):  Search all descendents.
      **kwds : Additional keyword arguments to match attributes of the object.

    Returns:
      Named: The child object which satisfies the specified filters.
    
		"""
		pass

	def getChildren(self,type=None, recursive=False, sorted=False, **kwds):
		"""
		Returns a list of children that is of the specified type.

    Args:
      type (Type[Named]): Filter objects by class.
      recursive (bool): True to get all descendent Parts and Assemblies.
      sorted (bool): Sort the children base on id.

    Returns:
      list[Named]
    
		"""
		pass

	def getClass(self,className):
		"""
		Returns the class of the object.
    
    It can be simple or qualified (with namespace). If the name is simple, we 
    prepend the cls.namespace.

    Args:
      className (Union[Part, Occurrence, Named..]) : The class name. 
     
    Returns:
      Union[Part, Occurrence, Named..] : The class for the specified className. 

    
		"""
		pass

	def getClassAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value

    Args:
      name (str): Name of the attribute
    
		"""
		pass

	def getDependents(self,recursive=False, **kwds):
		"""
		Get objects that reference this object through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getGuiAttributeNames(self):
		"""
		Return list of the attribute names that are in the gui

    Returns:
      list: Returns list of active gui attribute
    
		"""
		pass

	def getGuiValue(self,attr, **kwds):
		"""
		Get value formatted to be shown in the gui

    Args:
      attr (str): Attribute name to gets its gui value.

    Returns:
      str: Returns a string of the value with its gui units, like "5 mm/s".
    
		"""
		pass

	def getReferences(self,recursive=False, **kwds):
		"""
		Get objects this object references through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getSerializedAttributeValues(self):
		pass

	def getValue(self,attr):
		"""
		Return the attribute value for passed attribute name.
    
    Args:
      attr (String): Attribute name to gets its value.

    Returns:
      str: Returns the attribute value
    
		"""
		pass

	def isa(self,type=None, filter=None, name=None, wildcard=None, **kwds):
		"""
		Determines if the object matches the specified settings or not.
    
    Args:
      type (Union[Part, Assembly, Contact..]): The type of the object.
      filter (method): Return value of specified callback method.
      name (str): Name that matches exactly with object name.
      wildcard (str): A pattern to match exactly with the object name.
      **kwds : Additional keyword arguments to match other attributes.

    Returns:
      bool : True, if a match is found, otherwise False.
    
		"""
		pass

	@property
	def location(self):
		pass
	@location.setter
	def location(self):
		pass

	def modelPositions(self):
		"""
		Forces all objects to return the original model positions instead of the
    current analysis positions.

    Useful when defining draw methods on GeneralObjects where behaviour is 
    different while animating.
    
		"""
		pass

	@property
	def moveWithPart(self):
		pass
	@moveWithPart.setter
	def moveWithPart(self):
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	@property
	def origin(self):
		pass
	@origin.setter
	def origin(self):
		pass

	@property
	def parent(self):
		pass
	@parent.setter
	def parent(self):
		pass

	@property
	def part(self):
		pass
	@part.setter
	def part(self):
		pass

	@property
	def position(self):
		pass
	@position.setter
	def position(self):
		pass

	def setValue(self,attr, value):
		"""
		Alias for setattr (attr, value)
    Args:
      attr (str): Attribute name to sets its value.
      value (str): Attribute value to set .
    
		"""
		pass

	def setValues(self,**kwds):
		"""
		Sets passed name/value pairs.
    
    Values are set in a standard order (the order the attribute is defined
    on the class) which is required in certain cases when an attribute's
    setter expects another attribute to have already been set.
    For example, setting a reference before a location that is wrt it.
    
    Args:
      **kwds: Set attributes in one go.
    
		"""
		pass

	@property
	def type(self):
		pass
	@type.setter
	def type(self):
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

	def wasValueSet(self,attr):
		"""
		Check if attribute was set

    Args:
      attr (str): Attribute name to check it value set or not

    Returns:
      bool: True, if value was set else false.
    
		"""
		pass

class BeadPattern:
	def __init__(self,part, location, direction=(0, 0, 1), type=1, **kwds):
		"""
Bead Pattern on supplied parts.
  
  Bead patterns can be used to control the shapes of the beads.
  Beads are used to help meet specific design requirements such as stiffness 
  when running a topography optimization on a surface. Use the Bead Patterns to 
  create Linear, Circular, or Radial bead pattern tools. 
  
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	@property
	def color(self):
		pass
	@color.setter
	def color(self):
		pass

	@property
	def connectionRadius(self):
		pass
	@connectionRadius.setter
	def connectionRadius(self):
		pass

	@property
	def connectionType(self):
		pass
	@connectionType.setter
	def connectionType(self):
		pass

	def destroy(self):
		"""
		Delete the object removing it from the model.
    
    The object may come back due to an undo/redo.
    
		"""
		pass

	@property
	def direction(self):
		pass
	@direction.setter
	def direction(self):
		pass

	@property
	def distributed(self):
		pass
	@distributed.setter
	def distributed(self):
		pass

	@property
	def feature(self):
		pass
	@feature.setter
	def feature(self):
		pass

	@property
	def features(self):
		pass
	@features.setter
	def features(self):
		pass

	def getAllChildren(self,type=None, **kwds):
		"""
		Returns a list of all children that matches the specified type.

    Args:
      type (list[Named]): Filter to use to get the children based on object type.
      **kwds : Additional keyword arguments to match other attributes of the object.

    Returns:
      list[Union[Part, Motor, BoundaryCondition, ...]]: The list of children that satisfy the supplied filters.
    
		"""
		pass

	def getAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value.

    Args:
      name (str): Attribute name to find its class.
    
		"""
		pass

	def getAttributes(self,type=None, **kwds):
		"""
		Return an dict of the attributes.
    Pass type and kwds to filter by type and Attribute properties

    Args:
      type (type): Filters the attribute based on type
      **kwds : Additional kwds argument to filter attribute by its properties

    Returns:
      dict: Return an OrderedDict of the attributes
    
		"""
		pass

	def getChild(self,name=None, recursive=False, **kwds):
		"""
		Returns the child of the object which matches the specified unique name.

    Args:
      name (str): The name of the child object.
      recursive (bool):  Search all descendents.
      **kwds : Additional keyword arguments to match attributes of the object.

    Returns:
      Named: The child object which satisfies the specified filters.
    
		"""
		pass

	def getChildren(self,type=None, recursive=False, sorted=False, **kwds):
		"""
		Returns a list of children that is of the specified type.

    Args:
      type (Type[Named]): Filter objects by class.
      recursive (bool): True to get all descendent Parts and Assemblies.
      sorted (bool): Sort the children base on id.

    Returns:
      list[Named]
    
		"""
		pass

	def getClass(self,className):
		"""
		Returns the class of the object.
    
    It can be simple or qualified (with namespace). If the name is simple, we 
    prepend the cls.namespace.

    Args:
      className (Union[Part, Occurrence, Named..]) : The class name. 
     
    Returns:
      Union[Part, Occurrence, Named..] : The class for the specified className. 

    
		"""
		pass

	def getClassAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value

    Args:
      name (str): Name of the attribute
    
		"""
		pass

	def getDependents(self,recursive=False, **kwds):
		"""
		Get objects that reference this object through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getGuiAttributeNames(self):
		"""
		Return list of the attribute names that are in the gui

    Returns:
      list: Returns list of active gui attribute
    
		"""
		pass

	def getGuiValue(self,attr, **kwds):
		"""
		Get value formatted to be shown in the gui

    Args:
      attr (str): Attribute name to gets its gui value.

    Returns:
      str: Returns a string of the value with its gui units, like "5 mm/s".
    
		"""
		pass

	def getReferences(self,recursive=False, **kwds):
		"""
		Get objects this object references through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getSerializedAttributeValues(self):
		pass

	def getValue(self,attr):
		"""
		Return the attribute value for passed attribute name.
    
    Args:
      attr (String): Attribute name to gets its value.

    Returns:
      str: Returns the attribute value
    
		"""
		pass

	def importLoads(self,csvFile):
		"""
		Imports boundary conditions to the active model from a csv file.

    Args:
      csvFile(str) : Csv file name containing all the BC information.

    Returns:
      list: List of error msgs that happened during import of all the boundary conditions.
    
		"""
		pass

	@property
	def inahole(self):
		pass
	@inahole.setter
	def inahole(self):
		pass

	def isa(self,type=None, filter=None, name=None, wildcard=None, **kwds):
		"""
		Determines if the object matches the specified settings or not.
    
    Args:
      type (Union[Part, Assembly, Contact..]): The type of the object.
      filter (method): Return value of specified callback method.
      name (str): Name that matches exactly with object name.
      wildcard (str): A pattern to match exactly with the object name.
      **kwds : Additional keyword arguments to match other attributes.

    Returns:
      bool : True, if a match is found, otherwise False.
    
		"""
		pass

	@property
	def loadCase(self):
		pass
	@loadCase.setter
	def loadCase(self):
		pass

	@property
	def localToPart(self):
		pass
	@localToPart.setter
	def localToPart(self):
		pass

	@property
	def location(self):
		pass
	@location.setter
	def location(self):
		pass

	@property
	def mode(self):
		pass
	@mode.setter
	def mode(self):
		pass

	def modelPositions(self):
		"""
		Forces all objects to return the original model positions instead of the
    current analysis positions.

    Useful when defining draw methods on GeneralObjects where behaviour is 
    different while animating.
    
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	@property
	def parent(self):
		pass
	@parent.setter
	def parent(self):
		pass

	@property
	def part(self):
		pass
	@part.setter
	def part(self):
		pass

	@property
	def parts(self):
		pass
	@parts.setter
	def parts(self):
		pass

	def setSystem(self,system):
		"""
		Associate system to a boundary condition.

    Args:
      system (System): System tp associate with boundary condition.
    
		"""
		pass

	def setValue(self,attr, value):
		"""
		Alias for setattr (attr, value)
    Args:
      attr (str): Attribute name to sets its value.
      value (str): Attribute value to set .
    
		"""
		pass

	def setValues(self,**kwds):
		"""
		Sets passed name/value pairs.
    
    Values are set in a standard order (the order the attribute is defined
    on the class) which is required in certain cases when an attribute's
    setter expects another attribute to have already been set.
    For example, setting a reference before a location that is wrt it.
    
    Args:
      **kwds: Set attributes in one go.
    
		"""
		pass

	@property
	def type(self):
		pass
	@type.setter
	def type(self):
		pass

	def updatePosition(self,m44):
		"""
		Sets the design space positions of all the inspire parts to their 
    position in the current analysis frame.    
    
		"""
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

	def wasValueSet(self,attr):
		"""
		Check if attribute was set

    Args:
      attr (str): Attribute name to check it value set or not

    Returns:
      bool: True, if value was set else false.
    
		"""
		pass

class Body:
	def __init__(self,**kwds):
		"""
Base class for all implicit bodies.
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class BodyImplicit:
	def __init__(self,cppName: str="",doc: str="", bodyType=None):
		"""
ImplicitBody
"""
		pass

class Bool:
	def __init__(self,default=False, **kwds):
		"""
Store True or False
"""
		pass

	def apply(self,**kwds):
		"""
		Context manager to specify Attribute constructor kwds
    Useful to avoid repeating kwds while defining a related group
    
		"""
		pass

	def castForGet(self,obj, value):
		pass

	def castForSet(self,obj, value):
		pass

	def classifyObject(self,obj):
		pass

	def create(self,obj):
		pass

	def createList(self,listAttr, obj):
		pass

	def createListList(self,listAttr, obj):
		pass

	def disable(self,obj):
		"""
		Called by GeneralObject when destroyed (or undo of a create)
		"""
		pass

	def enable(self,obj):
		"""
		Called by GeneralObject when created (or undo of a destroy)
		"""
		pass

	def getCreateArgs(self):
		"""
		Helper used in create methods
		"""
		pass

	def getDisplayName(self,obj):
		pass

	def getGuiValue(self,obj):
		"""
		Returns the formatted value, as shown in the Property Editor.
		"""
		pass

	def getInCoreValue(self,obj):
		pass

	def getReadonly(self,obj):
		pass

	def getUnits(self,obj):
		pass

	def getValue(self,obj):
		pass

	def getValueList(self,obj):
		pass

	def getValueListList(self,obj):
		pass

	def initialize(self,objCls, name):
		"""
		Initializes the attribute.

    Args:
      objCls (class): Object class this attribute belongs to.
      name (str): Name of the attribute.
    
		"""
		pass

	def loadValue(self,obj, value):
		"""
		Called by GeneralObject.loadAttributeValues during stmod deserialization
		"""
		pass

	def populateGuiValue(self,obj, prop):
		"""
		Override to customize, prop.value, displayValue, allowedValues.
    
    The prop.value type determines which editor widget used:
    - bool -> checkbox
    - str  -> line edit
    - hwtypes.Color -> color picker
    
    Setting prop.allowedValues yields a ComboBox.
    
    prop.displayValue is a str shown when the editor loses focus.
    
		"""
		pass

	def populatePropertyEditor(self,obj, prop, **kwds):
		"""
		Customize how attribute appears in Property Editor and ObjectTables.
    
    Args:
      obj (GeneralObject)
      prop (hwt::Property): Property Editor interface.
      component (int): 0, 1, 2
        Only passed when showing Triples 1 value at a time.
    
		"""
		pass

	def setInCoreValue(self,obj, value):
		pass

	def setValue(self,obj, value):
		pass

	def setValueList(self,obj, value):
		pass

	def setValueListList(self,obj, value):
		pass

	def usingUnits(self,units):
		pass

class BoolImplicit:
	def __init__(self,cppName: str="",doc: str=""):
		"""
bool
"""
		pass

class BoundaryCondition:
	def __init__(self):
		"""
Boundary conditions are constraints necessary for the solution of a boundary value problem.
  
  The main types of boundary condition available are force, torque, support, temperature and etc. 
  These can be applied to points, surfaces, edges or remotely offset from a feature. 
  The way that the model is constrained can significantly affect the results and requires special consideration.
  
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	@property
	def color(self):
		pass
	@color.setter
	def color(self):
		pass

	@property
	def connectionRadius(self):
		pass
	@connectionRadius.setter
	def connectionRadius(self):
		pass

	@property
	def connectionType(self):
		pass
	@connectionType.setter
	def connectionType(self):
		pass

	def destroy(self):
		"""
		Delete the object removing it from the model.
    
    The object may come back due to an undo/redo.
    
		"""
		pass

	@property
	def direction(self):
		pass
	@direction.setter
	def direction(self):
		pass

	@property
	def distributed(self):
		pass
	@distributed.setter
	def distributed(self):
		pass

	@property
	def feature(self):
		pass
	@feature.setter
	def feature(self):
		pass

	@property
	def features(self):
		pass
	@features.setter
	def features(self):
		pass

	def getAllChildren(self,type=None, **kwds):
		"""
		Returns a list of all children that matches the specified type.

    Args:
      type (list[Named]): Filter to use to get the children based on object type.
      **kwds : Additional keyword arguments to match other attributes of the object.

    Returns:
      list[Union[Part, Motor, BoundaryCondition, ...]]: The list of children that satisfy the supplied filters.
    
		"""
		pass

	def getAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value.

    Args:
      name (str): Attribute name to find its class.
    
		"""
		pass

	def getAttributes(self,type=None, **kwds):
		"""
		Return an dict of the attributes.
    Pass type and kwds to filter by type and Attribute properties

    Args:
      type (type): Filters the attribute based on type
      **kwds : Additional kwds argument to filter attribute by its properties

    Returns:
      dict: Return an OrderedDict of the attributes
    
		"""
		pass

	def getChild(self,name=None, recursive=False, **kwds):
		"""
		Returns the child of the object which matches the specified unique name.

    Args:
      name (str): The name of the child object.
      recursive (bool):  Search all descendents.
      **kwds : Additional keyword arguments to match attributes of the object.

    Returns:
      Named: The child object which satisfies the specified filters.
    
		"""
		pass

	def getChildren(self,type=None, recursive=False, sorted=False, **kwds):
		"""
		Returns a list of children that is of the specified type.

    Args:
      type (Type[Named]): Filter objects by class.
      recursive (bool): True to get all descendent Parts and Assemblies.
      sorted (bool): Sort the children base on id.

    Returns:
      list[Named]
    
		"""
		pass

	def getClass(self,className):
		"""
		Returns the class of the object.
    
    It can be simple or qualified (with namespace). If the name is simple, we 
    prepend the cls.namespace.

    Args:
      className (Union[Part, Occurrence, Named..]) : The class name. 
     
    Returns:
      Union[Part, Occurrence, Named..] : The class for the specified className. 

    
		"""
		pass

	def getClassAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value

    Args:
      name (str): Name of the attribute
    
		"""
		pass

	def getDependents(self,recursive=False, **kwds):
		"""
		Get objects that reference this object through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getGuiAttributeNames(self):
		"""
		Return list of the attribute names that are in the gui

    Returns:
      list: Returns list of active gui attribute
    
		"""
		pass

	def getGuiValue(self,attr, **kwds):
		"""
		Get value formatted to be shown in the gui

    Args:
      attr (str): Attribute name to gets its gui value.

    Returns:
      str: Returns a string of the value with its gui units, like "5 mm/s".
    
		"""
		pass

	def getReferences(self,recursive=False, **kwds):
		"""
		Get objects this object references through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getSerializedAttributeValues(self):
		pass

	def getValue(self,attr):
		"""
		Return the attribute value for passed attribute name.
    
    Args:
      attr (String): Attribute name to gets its value.

    Returns:
      str: Returns the attribute value
    
		"""
		pass

	def importLoads(self,csvFile):
		"""
		Imports boundary conditions to the active model from a csv file.

    Args:
      csvFile(str) : Csv file name containing all the BC information.

    Returns:
      list: List of error msgs that happened during import of all the boundary conditions.
    
		"""
		pass

	@property
	def inahole(self):
		pass
	@inahole.setter
	def inahole(self):
		pass

	def isa(self,type=None, filter=None, name=None, wildcard=None, **kwds):
		"""
		Determines if the object matches the specified settings or not.
    
    Args:
      type (Union[Part, Assembly, Contact..]): The type of the object.
      filter (method): Return value of specified callback method.
      name (str): Name that matches exactly with object name.
      wildcard (str): A pattern to match exactly with the object name.
      **kwds : Additional keyword arguments to match other attributes.

    Returns:
      bool : True, if a match is found, otherwise False.
    
		"""
		pass

	@property
	def loadCase(self):
		pass
	@loadCase.setter
	def loadCase(self):
		pass

	@property
	def localToPart(self):
		pass
	@localToPart.setter
	def localToPart(self):
		pass

	@property
	def location(self):
		pass
	@location.setter
	def location(self):
		pass

	@property
	def mode(self):
		pass
	@mode.setter
	def mode(self):
		pass

	def modelPositions(self):
		"""
		Forces all objects to return the original model positions instead of the
    current analysis positions.

    Useful when defining draw methods on GeneralObjects where behaviour is 
    different while animating.
    
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	@property
	def parent(self):
		pass
	@parent.setter
	def parent(self):
		pass

	@property
	def part(self):
		pass
	@part.setter
	def part(self):
		pass

	@property
	def parts(self):
		pass
	@parts.setter
	def parts(self):
		pass

	def setSystem(self,system):
		"""
		Associate system to a boundary condition.

    Args:
      system (System): System tp associate with boundary condition.
    
		"""
		pass

	def setValue(self,attr, value):
		"""
		Alias for setattr (attr, value)
    Args:
      attr (str): Attribute name to sets its value.
      value (str): Attribute value to set .
    
		"""
		pass

	def setValues(self,**kwds):
		"""
		Sets passed name/value pairs.
    
    Values are set in a standard order (the order the attribute is defined
    on the class) which is required in certain cases when an attribute's
    setter expects another attribute to have already been set.
    For example, setting a reference before a location that is wrt it.
    
    Args:
      **kwds: Set attributes in one go.
    
		"""
		pass

	def updatePosition(self,m44):
		"""
		Sets the design space positions of all the inspire parts to their 
    position in the current analysis frame.    
    
		"""
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

	def wasValueSet(self,attr):
		"""
		Check if attribute was set

    Args:
      attr (str): Attribute name to check it value set or not

    Returns:
      bool: True, if value was set else false.
    
		"""
		pass

class Bushing:
	def __init__(self,primaryFeatures, secondaryFeatures=[], location=None, **kwds):
		"""
Create connections with multidirectional stiffness and mass properties
     between 2 set of surfaces between 2 parts. This helps capture the physics
     and more accurately correlate results within an assembly.
  
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	@property
	def angularDamping(self):
		pass
	@angularDamping.setter
	def angularDamping(self):
		pass

	@property
	def angularStiffness(self):
		pass
	@angularStiffness.setter
	def angularStiffness(self):
		pass

	@property
	def autoCalcConnectionRadius(self):
		pass
	@autoCalcConnectionRadius.setter
	def autoCalcConnectionRadius(self):
		pass

	@property
	def connectionRadius(self):
		pass
	@connectionRadius.setter
	def connectionRadius(self):
		pass

	@property
	def damping(self):
		pass
	@damping.setter
	def damping(self):
		pass

	@property
	def dampingOrthotropic(self):
		pass
	@dampingOrthotropic.setter
	def dampingOrthotropic(self):
		pass

	def destroy(self):
		"""
		Delete the object removing it from the model.
    
    The object may come back due to an undo/redo.
    
		"""
		pass

	@property
	def features(self):
		pass
	@features.setter
	def features(self):
		pass

	@property
	def forcePreload(self):
		pass
	@forcePreload.setter
	def forcePreload(self):
		pass

	def getAllChildren(self,type=None, **kwds):
		"""
		Returns a list of all children that matches the specified type.

    Args:
      type (list[Named]): Filter to use to get the children based on object type.
      **kwds : Additional keyword arguments to match other attributes of the object.

    Returns:
      list[Union[Part, Motor, BoundaryCondition, ...]]: The list of children that satisfy the supplied filters.
    
		"""
		pass

	def getAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value.

    Args:
      name (str): Attribute name to find its class.
    
		"""
		pass

	def getAttributes(self,type=None, **kwds):
		"""
		Return an dict of the attributes.
    Pass type and kwds to filter by type and Attribute properties

    Args:
      type (type): Filters the attribute based on type
      **kwds : Additional kwds argument to filter attribute by its properties

    Returns:
      dict: Return an OrderedDict of the attributes
    
		"""
		pass

	def getChild(self,name=None, recursive=False, **kwds):
		"""
		Returns the child of the object which matches the specified unique name.

    Args:
      name (str): The name of the child object.
      recursive (bool):  Search all descendents.
      **kwds : Additional keyword arguments to match attributes of the object.

    Returns:
      Named: The child object which satisfies the specified filters.
    
		"""
		pass

	def getChildren(self,type=None, recursive=False, sorted=False, **kwds):
		"""
		Returns a list of children that is of the specified type.

    Args:
      type (Type[Named]): Filter objects by class.
      recursive (bool): True to get all descendent Parts and Assemblies.
      sorted (bool): Sort the children base on id.

    Returns:
      list[Named]
    
		"""
		pass

	def getClass(self,className):
		"""
		Returns the class of the object.
    
    It can be simple or qualified (with namespace). If the name is simple, we 
    prepend the cls.namespace.

    Args:
      className (Union[Part, Occurrence, Named..]) : The class name. 
     
    Returns:
      Union[Part, Occurrence, Named..] : The class for the specified className. 

    
		"""
		pass

	def getClassAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value

    Args:
      name (str): Name of the attribute
    
		"""
		pass

	def getDependents(self,recursive=False, **kwds):
		"""
		Get objects that reference this object through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getGuiAttributeNames(self):
		"""
		Return list of the attribute names that are in the gui

    Returns:
      list: Returns list of active gui attribute
    
		"""
		pass

	def getGuiValue(self,attr, **kwds):
		"""
		Get value formatted to be shown in the gui

    Args:
      attr (str): Attribute name to gets its gui value.

    Returns:
      str: Returns a string of the value with its gui units, like "5 mm/s".
    
		"""
		pass

	def getReferences(self,recursive=False, **kwds):
		"""
		Get objects this object references through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getSerializedAttributeValues(self):
		pass

	def getValue(self,attr):
		"""
		Return the attribute value for passed attribute name.
    
    Args:
      attr (String): Attribute name to gets its value.

    Returns:
      str: Returns the attribute value
    
		"""
		pass

	@property
	def grounded(self):
		pass
	@grounded.setter
	def grounded(self):
		pass

	def isa(self,type=None, filter=None, name=None, wildcard=None, **kwds):
		"""
		Determines if the object matches the specified settings or not.
    
    Args:
      type (Union[Part, Assembly, Contact..]): The type of the object.
      filter (method): Return value of specified callback method.
      name (str): Name that matches exactly with object name.
      wildcard (str): A pattern to match exactly with the object name.
      **kwds : Additional keyword arguments to match other attributes.

    Returns:
      bool : True, if a match is found, otherwise False.
    
		"""
		pass

	@property
	def location(self):
		pass
	@location.setter
	def location(self):
		pass

	@property
	def mass(self):
		pass
	@mass.setter
	def mass(self):
		pass

	def modelPositions(self):
		"""
		Forces all objects to return the original model positions instead of the
    current analysis positions.

    Useful when defining draw methods on GeneralObjects where behaviour is 
    different while animating.
    
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	@property
	def parent(self):
		pass
	@parent.setter
	def parent(self):
		pass

	@property
	def parts(self):
		pass
	@parts.setter
	def parts(self):
		pass

	@property
	def position(self):
		pass
	@position.setter
	def position(self):
		pass

	@property
	def preloadOrthotropic(self):
		pass
	@preloadOrthotropic.setter
	def preloadOrthotropic(self):
		pass

	@property
	def primaryFeatures(self):
		pass
	@primaryFeatures.setter
	def primaryFeatures(self):
		pass

	@property
	def secondaryFeatures(self):
		pass
	@secondaryFeatures.setter
	def secondaryFeatures(self):
		pass

	def setValue(self,attr, value):
		"""
		Alias for setattr (attr, value)
    Args:
      attr (str): Attribute name to sets its value.
      value (str): Attribute value to set .
    
		"""
		pass

	def setValues(self,**kwds):
		"""
		Sets passed name/value pairs.
    
    Values are set in a standard order (the order the attribute is defined
    on the class) which is required in certain cases when an attribute's
    setter expects another attribute to have already been set.
    For example, setting a reference before a location that is wrt it.
    
    Args:
      **kwds: Set attributes in one go.
    
		"""
		pass

	@property
	def stiffness(self):
		pass
	@stiffness.setter
	def stiffness(self):
		pass

	@property
	def stiffnessOrthotropic(self):
		pass
	@stiffnessOrthotropic.setter
	def stiffnessOrthotropic(self):
		pass

	@property
	def torquePreload(self):
		pass
	@torquePreload.setter
	def torquePreload(self):
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

	def wasValueSet(self,attr):
		"""
		Check if attribute was set

    Args:
      attr (str): Attribute name to check it value set or not

    Returns:
      bool: True, if value was set else false.
    
		"""
		pass

class COGConstraint:
	def __init__(self,ents, **kwds):
		"""
Create the Center of Gravity Constraint (COG) of supplied parts.

  Use the Center of Gravity Constraint (COG) to apply, reposition, and set
  upper and lower bounds for a center of gravity constraint.
  COG constraints are used to limit the position of the center of gravity while
  running a topology optimization.
  
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	@property
	def bounds(self):
		pass
	@bounds.setter
	def bounds(self):
		pass

	@property
	def color(self):
		pass
	@color.setter
	def color(self):
		pass

	@property
	def connectionRadius(self):
		pass
	@connectionRadius.setter
	def connectionRadius(self):
		pass

	@property
	def connectionType(self):
		pass
	@connectionType.setter
	def connectionType(self):
		pass

	def destroy(self):
		"""
		Delete the object removing it from the model.
    
    The object may come back due to an undo/redo.
    
		"""
		pass

	@property
	def direction(self):
		pass
	@direction.setter
	def direction(self):
		pass

	@property
	def distributed(self):
		pass
	@distributed.setter
	def distributed(self):
		pass

	@property
	def feature(self):
		pass
	@feature.setter
	def feature(self):
		pass

	@property
	def features(self):
		pass
	@features.setter
	def features(self):
		pass

	def getAllChildren(self,type=None, **kwds):
		"""
		Returns a list of all children that matches the specified type.

    Args:
      type (list[Named]): Filter to use to get the children based on object type.
      **kwds : Additional keyword arguments to match other attributes of the object.

    Returns:
      list[Union[Part, Motor, BoundaryCondition, ...]]: The list of children that satisfy the supplied filters.
    
		"""
		pass

	def getAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value.

    Args:
      name (str): Attribute name to find its class.
    
		"""
		pass

	def getAttributes(self,type=None, **kwds):
		"""
		Return an dict of the attributes.
    Pass type and kwds to filter by type and Attribute properties

    Args:
      type (type): Filters the attribute based on type
      **kwds : Additional kwds argument to filter attribute by its properties

    Returns:
      dict: Return an OrderedDict of the attributes
    
		"""
		pass

	def getChild(self,name=None, recursive=False, **kwds):
		"""
		Returns the child of the object which matches the specified unique name.

    Args:
      name (str): The name of the child object.
      recursive (bool):  Search all descendents.
      **kwds : Additional keyword arguments to match attributes of the object.

    Returns:
      Named: The child object which satisfies the specified filters.
    
		"""
		pass

	def getChildren(self,type=None, recursive=False, sorted=False, **kwds):
		"""
		Returns a list of children that is of the specified type.

    Args:
      type (Type[Named]): Filter objects by class.
      recursive (bool): True to get all descendent Parts and Assemblies.
      sorted (bool): Sort the children base on id.

    Returns:
      list[Named]
    
		"""
		pass

	def getClass(self,className):
		"""
		Returns the class of the object.
    
    It can be simple or qualified (with namespace). If the name is simple, we 
    prepend the cls.namespace.

    Args:
      className (Union[Part, Occurrence, Named..]) : The class name. 
     
    Returns:
      Union[Part, Occurrence, Named..] : The class for the specified className. 

    
		"""
		pass

	def getClassAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value

    Args:
      name (str): Name of the attribute
    
		"""
		pass

	def getDependents(self,recursive=False, **kwds):
		"""
		Get objects that reference this object through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getGuiAttributeNames(self):
		"""
		Return list of the attribute names that are in the gui

    Returns:
      list: Returns list of active gui attribute
    
		"""
		pass

	def getGuiValue(self,attr, **kwds):
		"""
		Get value formatted to be shown in the gui

    Args:
      attr (str): Attribute name to gets its gui value.

    Returns:
      str: Returns a string of the value with its gui units, like "5 mm/s".
    
		"""
		pass

	def getReferences(self,recursive=False, **kwds):
		"""
		Get objects this object references through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getSerializedAttributeValues(self):
		pass

	def getValue(self,attr):
		"""
		Return the attribute value for passed attribute name.
    
    Args:
      attr (String): Attribute name to gets its value.

    Returns:
      str: Returns the attribute value
    
		"""
		pass

	def importLoads(self,csvFile):
		"""
		Imports boundary conditions to the active model from a csv file.

    Args:
      csvFile(str) : Csv file name containing all the BC information.

    Returns:
      list: List of error msgs that happened during import of all the boundary conditions.
    
		"""
		pass

	@property
	def inahole(self):
		pass
	@inahole.setter
	def inahole(self):
		pass

	def isa(self,type=None, filter=None, name=None, wildcard=None, **kwds):
		"""
		Determines if the object matches the specified settings or not.
    
    Args:
      type (Union[Part, Assembly, Contact..]): The type of the object.
      filter (method): Return value of specified callback method.
      name (str): Name that matches exactly with object name.
      wildcard (str): A pattern to match exactly with the object name.
      **kwds : Additional keyword arguments to match other attributes.

    Returns:
      bool : True, if a match is found, otherwise False.
    
		"""
		pass

	@property
	def loadCase(self):
		pass
	@loadCase.setter
	def loadCase(self):
		pass

	@property
	def localToPart(self):
		pass
	@localToPart.setter
	def localToPart(self):
		pass

	@property
	def location(self):
		pass
	@location.setter
	def location(self):
		pass

	@property
	def mode(self):
		pass
	@mode.setter
	def mode(self):
		pass

	def modelPositions(self):
		"""
		Forces all objects to return the original model positions instead of the
    current analysis positions.

    Useful when defining draw methods on GeneralObjects where behaviour is 
    different while animating.
    
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	@property
	def parent(self):
		pass
	@parent.setter
	def parent(self):
		pass

	@property
	def part(self):
		pass
	@part.setter
	def part(self):
		pass

	@property
	def parts(self):
		pass
	@parts.setter
	def parts(self):
		pass

	@property
	def position(self):
		pass
	@position.setter
	def position(self):
		pass

	def setSystem(self,system):
		"""
		Associate system to a boundary condition.

    Args:
      system (System): System tp associate with boundary condition.
    
		"""
		pass

	def setValue(self,attr, value):
		"""
		Alias for setattr (attr, value)
    Args:
      attr (str): Attribute name to sets its value.
      value (str): Attribute value to set .
    
		"""
		pass

	def setValues(self,**kwds):
		"""
		Sets passed name/value pairs.
    
    Values are set in a standard order (the order the attribute is defined
    on the class) which is required in certain cases when an attribute's
    setter expects another attribute to have already been set.
    For example, setting a reference before a location that is wrt it.
    
    Args:
      **kwds: Set attributes in one go.
    
		"""
		pass

	def updatePosition(self,m44):
		"""
		Sets the design space positions of all the inspire parts to their 
    position in the current analysis frame.    
    
		"""
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

	def wasValueSet(self,attr):
		"""
		Check if attribute was set

    Args:
      attr (str): Attribute name to check it value set or not

    Returns:
      bool: True, if value was set else false.
    
		"""
		pass

class Caching:
	pass

class Callout:
	def __init__(self,location, resultTypes,solverType: str="OPTISTRUCT_SOLVER", name=None):
		"""
Display analysis results at a point on a part or section plane.
   
  Only visible in contexts like Structure -> Analysis Explorer when the
  user clicks a button to display them.
  
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	def destroy(self):
		"""
		Delete the object removing it from the model.
    
    The object may come back due to an undo/redo.
    
		"""
		pass

	def getAllChildren(self,type=None, **kwds):
		"""
		Returns a list of all children that matches the specified type.

    Args:
      type (list[Named]): Filter to use to get the children based on object type.
      **kwds : Additional keyword arguments to match other attributes of the object.

    Returns:
      list[Union[Part, Motor, BoundaryCondition, ...]]: The list of children that satisfy the supplied filters.
    
		"""
		pass

	def getAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value.

    Args:
      name (str): Attribute name to find its class.
    
		"""
		pass

	def getAttributes(self,type=None, **kwds):
		"""
		Return an dict of the attributes.
    Pass type and kwds to filter by type and Attribute properties

    Args:
      type (type): Filters the attribute based on type
      **kwds : Additional kwds argument to filter attribute by its properties

    Returns:
      dict: Return an OrderedDict of the attributes
    
		"""
		pass

	def getChild(self,name=None, recursive=False, **kwds):
		"""
		Returns the child of the object which matches the specified unique name.

    Args:
      name (str): The name of the child object.
      recursive (bool):  Search all descendents.
      **kwds : Additional keyword arguments to match attributes of the object.

    Returns:
      Named: The child object which satisfies the specified filters.
    
		"""
		pass

	def getChildren(self,type=None, recursive=False, sorted=False, **kwds):
		"""
		Returns a list of children that is of the specified type.

    Args:
      type (Type[Named]): Filter objects by class.
      recursive (bool): True to get all descendent Parts and Assemblies.
      sorted (bool): Sort the children base on id.

    Returns:
      list[Named]
    
		"""
		pass

	def getClass(self,className):
		"""
		Returns the class of the object.
    
    It can be simple or qualified (with namespace). If the name is simple, we 
    prepend the cls.namespace.

    Args:
      className (Union[Part, Occurrence, Named..]) : The class name. 
     
    Returns:
      Union[Part, Occurrence, Named..] : The class for the specified className. 

    
		"""
		pass

	def getClassAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value

    Args:
      name (str): Name of the attribute
    
		"""
		pass

	def getDependents(self,recursive=False, **kwds):
		"""
		Get objects that reference this object through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getGuiAttributeNames(self):
		"""
		Return list of the attribute names that are in the gui

    Returns:
      list: Returns list of active gui attribute
    
		"""
		pass

	def getGuiValue(self,attr, **kwds):
		"""
		Get value formatted to be shown in the gui

    Args:
      attr (str): Attribute name to gets its gui value.

    Returns:
      str: Returns a string of the value with its gui units, like "5 mm/s".
    
		"""
		pass

	def getReferences(self,recursive=False, **kwds):
		"""
		Get objects this object references through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getSerializedAttributeValues(self):
		pass

	def getValidResultTypes(self):
		"""
		 Get All the Valid Result type names.
    
		"""
		pass

	def getValue(self,attr):
		"""
		Return the attribute value for passed attribute name.
    
    Args:
      attr (String): Attribute name to gets its value.

    Returns:
      str: Returns the attribute value
    
		"""
		pass

	def isa(self,type=None, filter=None, name=None, wildcard=None, **kwds):
		"""
		Determines if the object matches the specified settings or not.
    
    Args:
      type (Union[Part, Assembly, Contact..]): The type of the object.
      filter (method): Return value of specified callback method.
      name (str): Name that matches exactly with object name.
      wildcard (str): A pattern to match exactly with the object name.
      **kwds : Additional keyword arguments to match other attributes.

    Returns:
      bool : True, if a match is found, otherwise False.
    
		"""
		pass

	@property
	def location(self):
		pass
	@location.setter
	def location(self):
		pass

	def modelPositions(self):
		"""
		Forces all objects to return the original model positions instead of the
    current analysis positions.

    Useful when defining draw methods on GeneralObjects where behaviour is 
    different while animating.
    
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	@property
	def parent(self):
		pass
	@parent.setter
	def parent(self):
		pass

	@property
	def resultTypes(self):
		pass
	@resultTypes.setter
	def resultTypes(self):
		pass

	def setValue(self,attr, value):
		"""
		Alias for setattr (attr, value)
    Args:
      attr (str): Attribute name to sets its value.
      value (str): Attribute value to set .
    
		"""
		pass

	def setValues(self,**kwds):
		"""
		Sets passed name/value pairs.
    
    Values are set in a standard order (the order the attribute is defined
    on the class) which is required in certain cases when an attribute's
    setter expects another attribute to have already been set.
    For example, setting a reference before a location that is wrt it.
    
    Args:
      **kwds: Set attributes in one go.
    
		"""
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

	def wasValueSet(self,attr):
		"""
		Check if attribute was set

    Args:
      attr (str): Attribute name to check it value set or not

    Returns:
      bool: True, if value was set else false.
    
		"""
		pass

class Capsule:
	def __init__(self,**kwds):
		"""
Create a Capsule implicit body.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class Cavities:
	def __init__(self,populate=True, **kwds):
		"""
A list of hollows in the model

  Useful for plugging cavities. Unlike Holes that are used for regular shaped 
  (cylindrical, slotted) which are used in defining Part connections, like Motors 
  and Actuators, Cavities can be irregular shaped.
  
"""
		pass

	def cavities(self):
		"""
		Returns a list of hollows in the model
		"""
		pass

	def getHoleFromFeature(self,feature, holeList=True):
		"""
		Returns the holes found from the specified feature.

    Args:
      feature (Feature): Part feature on which holes need to be found.
      holeList (bool): If True, returns the holes as a list.

    Returns:
      Holes: Holes found from the feature.
    
		"""
		pass

	def getUnfilteredHoleFromFeature(self,feature):
		"""
		Returns aligned hole from specified feature.
    
    Args:
      feature (Feature): Part feature on which aligned hole need to be found.

    Returns:
      AlignedHole: Aligned Hole found from the feature.
    
		"""
		pass

	def getUnfilteredSingleHoleFromFeature(self,feature):
		"""
		Returns the single hole found from specified feature.

    Args:
      feature (Feature): Part feature on which single hole need to be found.

    Returns:
      Hole: Single Hole found from the feature.
    
		"""
		pass

	def makeDirty(self):
		"""
		Repopulates the holes.
    
		"""
		pass

	def plugAll(self):
		"""
		Create and return parts that fills the cavities
		"""
		pass

	def populate(self,minsize=None, maxsize=None, parts=None):
		"""
		Get the cavities for the specified parts or the entire model
    of parts were not specified

    Args:
      minsize (float): Get the holes with a size larger than minsize
      maxsize (float): Get the holes with a size smaller than maxsize
      parts (Part, list[Parts]): Get the holes for these parts
    
		"""
		pass

class Cavity:
	def __init__(self,features):
		pass

	def addAdjacentFeature(self,feature):
		"""
		Add the supplied feature to the HoleData
    
		"""
		pass

	def append(self,item):
		"""
		Overloaded list method to cast the item to a HoleData
    
		"""
		pass

	@property
	def axis(self):
		pass
	@axis.setter
	def axis(self):
		pass

	def copy(self):
		"""
		 Return the copied hole
		"""
		pass

	@property
	def fasteners(self):
		pass
	@fasteners.setter
	def fasteners(self):
		pass

	@property
	def features(self):
		pass
	@features.setter
	def features(self):
		pass

	def isOpen(self):
		pass

	def isaRegularCylinder(self):
		"""
		Return true, if cylindrical hole has perpendicular faces
    
		"""
		pass

	@property
	def isslot(self):
		pass
	@isslot.setter
	def isslot(self):
		pass

	@property
	def isvalid(self):
		pass
	@isvalid.setter
	def isvalid(self):
		pass

	@property
	def location(self):
		pass
	@location.setter
	def location(self):
		pass

	@property
	def origBoltParts(self):
		pass
	@origBoltParts.setter
	def origBoltParts(self):
		pass

	@property
	def parts(self):
		pass
	@parts.setter
	def parts(self):
		pass

	def plug(self):
		"""
		Create and return a part that plugs (fill) the cavity.
    Return None if the cavity is not pluggable.
    
		"""
		pass

	def plugFromFeatures(self,features):
		"""
		Intneral method used to Cavity and Cavities to plug
		"""
		pass

	@property
	def radius(self):
		pass
	@radius.setter
	def radius(self):
		pass

	def removeFeature(self,feature):
		"""
		Remove a feature from this hole
    
		"""
		pass

	@property
	def shape(self):
		pass
	@shape.setter
	def shape(self):
		pass

	@property
	def size(self):
		pass
	@size.setter
	def size(self):
		pass

	@property
	def type(self):
		pass
	@type.setter
	def type(self):
		pass

class Ceil:
	def __init__(self,**kwds):
		"""
Implicit ceil operation.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class Clamp:
	def __init__(self,**kwds):
		"""
Implicit clamp operation.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class Color:
	def __init__(self,default=(0, 0, 0), **kwds):
		"""
Stores a color value as 3 RGB float values between 0 to 1
  
  The color can also be set by name like:
    obj.color = "blue"
  
"""
		pass

	def apply(self,**kwds):
		"""
		Context manager to specify Attribute constructor kwds
    Useful to avoid repeating kwds while defining a related group
    
		"""
		pass

	def castForGet(self,obj, value):
		"""
		Converts and returns the attribute value to its external type.

    Args:
      obj (GeneralObject): Object this attribute belongs to.
      value (Any): Value of the attribute to be converted.

    Returns:
      value (Any): Converted value.
    
		"""
		pass

	def castForSet(self,obj, value):
		"""
		Converts and validates the value of the attribute before setting.

      Converts the value it to its internal type (and base units if applicable).

    Args:
      obj (GeneralObject): Object this attribute belongs to.
      value (Any): Value of the attribute to set.

    Returns:
      value (Any): Validated and converted value.
    
		"""
		pass

	def classifyObject(self,obj):
		pass

	def create(self,obj):
		pass

	def createList(self,listAttr, obj):
		pass

	def createListList(self,listAttr, obj):
		pass

	def disable(self,obj):
		"""
		Called by GeneralObject when destroyed (or undo of a create)
		"""
		pass

	def enable(self,obj):
		"""
		Called by GeneralObject when created (or undo of a destroy)
		"""
		pass

	def getCreateArgs(self):
		"""
		Helper used in create methods
		"""
		pass

	def getDisplayName(self,obj):
		pass

	def getGuiValue(self,obj):
		pass

	def getInCoreValue(self,obj):
		pass

	def getReadonly(self,obj):
		pass

	def getUnits(self,obj):
		pass

	def getValue(self,obj):
		pass

	def getValueList(self,obj):
		pass

	def getValueListList(self,obj):
		pass

	def initialize(self,objCls, name):
		"""
		Initializes the attribute.

    Args:
      objCls (class): Object class this attribute belongs to.
      name (str): Name of the attribute.
    
		"""
		pass

	def loadValue(self,obj, value):
		"""
		Called by GeneralObject.loadAttributeValues during stmod deserialization
		"""
		pass

	def populateGuiValue(self,obj, prop):
		"""
		Override to customize, prop.value, displayValue, allowedValues.
    
    The prop.value type determines which editor widget used:
    - bool -> checkbox
    - str  -> line edit
    - hwtypes.Color -> color picker
    
    Setting prop.allowedValues yields a ComboBox.
    
    prop.displayValue is a str shown when the editor loses focus.
    
		"""
		pass

	def populatePropertyEditor(self,obj, prop, **kwds):
		"""
		Customize how attribute appears in Property Editor and ObjectTables.
    
    Args:
      obj (GeneralObject)
      prop (hwt::Property): Property Editor interface.
      component (int): 0, 1, 2
        Only passed when showing Triples 1 value at a time.
    
		"""
		pass

	def setInCoreValue(self,obj, value):
		pass

	def setValue(self,obj, value):
		pass

	def setValueList(self,obj, value):
		pass

	def setValueListList(self,obj, value):
		pass

	def usingUnits(self,units):
		pass

class Combine:
	def __init__(self,**kwds):
		"""
The Combine tool is a Boolean Union operation between implicit bodies.
  This tool creates a new body that envelopes any volume that falls within at
  least one of bodies being combined. It is equivalent to a logical
  OR / disjunction.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class CompositeAttribute:
	def __init__(self,attrs, **kwds):
		pass

	def apply(self,**kwds):
		"""
		Context manager to specify Attribute constructor kwds
    Useful to avoid repeating kwds while defining a related group
    
		"""
		pass

	def castForGet(self,obj, value):
		"""
		Converts and returns the attribute value to its external type.

    Args:
      obj (GeneralObject): Object this attribute belongs to.
      value (Any): Value of the attribute to be converted.

    Returns:
      value (Any): Converted value.
    
		"""
		pass

	def castForSet(self,obj, value):
		pass

	def classifyObject(self,obj):
		pass

	def createList(self,listAttr, obj):
		pass

	def createListList(self,listAttr, obj):
		pass

	def disable(self,obj):
		"""
		Called by GeneralObject when destroyed (or undo of a create)
		"""
		pass

	def enable(self,obj):
		"""
		Called by GeneralObject when created (or undo of a destroy)
		"""
		pass

	def get(self,key, default=None):
		"""
		D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.
		"""
		pass

	def getActiveAttribute(self,obj):
		"""
		Returns the active attribute.
		"""
		pass

	def getActiveKey(self,obj):
		"""
		Returns the active attribute.
		"""
		pass

	def getCreateArgs(self):
		"""
		Helper used in create methods
		"""
		pass

	def getDisplayName(self,obj):
		"""
		Returns the display name of the active attribute.
		"""
		pass

	def getGuiValue(self,obj):
		"""
		Returns the formatted value, as shown in the Property Editor.
		"""
		pass

	def getInCoreValue(self,obj):
		pass

	def getReadonly(self,obj):
		pass

	def getUnits(self,obj):
		"""
		Returns the units for the active attribute.
		"""
		pass

	def getValue(self,obj):
		pass

	def getValueList(self,obj):
		pass

	def getValueListList(self,obj):
		pass

	def initialize(self,objCls, name):
		pass

	def items(self):
		"""
		D.items() -> a set-like object providing a view on D's items
		"""
		pass

	def keys(self):
		"""
		D.keys() -> a set-like object providing a view on D's keys
		"""
		pass

	def loadValue(self,obj, value):
		"""
		Called by GeneralObject.loadAttributeValues during stmod deserialization
		"""
		pass

	def populateGuiValue(self,obj, prop):
		"""
		Override to customize, prop.value, displayValue, allowedValues.
    
    The prop.value type determines which editor widget used:
    - bool -> checkbox
    - str  -> line edit
    - hwtypes.Color -> color picker
    
    Setting prop.allowedValues yields a ComboBox.
    
    prop.displayValue is a str shown when the editor loses focus.
    
		"""
		pass

	def populatePropertyEditor(self,obj, prop, **kwds):
		"""
		Customize how attribute appears in Property Editor and ObjectTables.
    
    Args:
      obj (GeneralObject)
      prop (hwt::Property): Property Editor interface.
      component (int): 0, 1, 2
        Only passed when showing Triples 1 value at a time.
    
		"""
		pass

	def setInCoreValue(self,obj, value):
		pass

	def setValue(self,obj, value):
		pass

	def setValueList(self,obj, value):
		pass

	def setValueListList(self,obj, value):
		pass

	def usingUnits(self,units):
		pass

	def values(self):
		"""
		D.values() -> an object providing a view on D's values
		"""
		pass

class ConcentratedMass:
	def __init__(self,parent=None, associatedFeatures=None, **kwds):
		"""
ConcentratedMass creates a mass only object either on a part or at a point in space.

  Concentrated Masses are useful when you need to account for the mass of a part
  but you do not want the complexity of the geometry to slow down the run.
  An example would be when running an optimization using frequency constraints
  or when analyzing for normal modes.
  When gravity is applied during optimization or analysis, the mass will impart
  a load on the structure.
  
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	def addAssociatedFeatures(self,features):
		"""
		Add the association with provided features.

    Args:
      features (list[Feature]) : Part features to associate with
        concentrated mass.
    
		"""
		pass

	@property
	def animationPosition(self):
		pass
	@animationPosition.setter
	def animationPosition(self):
		pass

	@property
	def associatedFeatures(self):
		pass
	@associatedFeatures.setter
	def associatedFeatures(self):
		pass

	@property
	def autoCalcMotionContactResolution(self):
		pass
	@autoCalcMotionContactResolution.setter
	def autoCalcMotionContactResolution(self):
		pass

	@property
	def autoCalculateCG(self):
		pass
	@autoCalculateCG.setter
	def autoCalculateCG(self):
		pass

	@property
	def autoCalculateMass(self):
		pass
	@autoCalculateMass.setter
	def autoCalculateMass(self):
		pass

	@property
	def autoCalculateMeshSize(self):
		pass
	@autoCalculateMeshSize.setter
	def autoCalculateMeshSize(self):
		pass

	@property
	def autoCalculateMoment(self):
		pass
	@autoCalculateMoment.setter
	def autoCalculateMoment(self):
		pass

	@property
	def autoCalculateThickness(self):
		pass
	@autoCalculateThickness.setter
	def autoCalculateThickness(self):
		pass

	@property
	def axisAlignedBoundingBox(self):
		pass
	@axisAlignedBoundingBox.setter
	def axisAlignedBoundingBox(self):
		pass

	@property
	def beadPatterns(self):
		pass
	@beadPatterns.setter
	def beadPatterns(self):
		pass

	def booleanCombine(self,target, tools=None):
		"""
		Combines the specified parts.

  Args:
    target (Part): Part to be combined with tools.
    tools (list[Part]): Parts to be combined with target. Destroyed after combine.

  Returns:
    Part: The combined part.
  
		"""
		pass

	def booleanIntersect(self,targets, tools, keepTargets=False, keepTools=False):
		"""
		Retains only the intersecting portions of two sets of solid objects.

  Args:
    targets (list[Part]): The first set of parts.
    tools (list[Part]): A list of parts for boolean intersect operation.
    keepTargets (bool): If True, preserves the target parts after the operation.
    keepTools (bool): If True, preserves the tools parts after the operation.

  Returns:
    Part: The intersected part.
  
		"""
		pass

	def booleanSubtract(self,targets, tools, keepTools=False):
		"""
		Carves out one set of solid objects from another set of solid objects.

  Args:
    targets (list[Part]): The parts being carved.
    tools (list[Part]): The parts doing the carving.
    keepTools (bool): If True, preserves the tools after the operation.

  Returns:
    Part: The remaining part.
  
		"""
		pass

	def breakInstance(self,parts):
		"""
		Break the instances of a part.

  Args:
    parts (list[Part]): Parts for breaking instances.
  
		"""
		pass

	@property
	def cg(self):
		pass
	@cg.setter
	def cg(self):
		pass

	def circularPattern(self,input, axis, angle=60, count=3, equalSpacing=False, instances=False, symmetry=False, axisReverse=False, result="NEW_PART", mergeWithAllParts=True, mergeParts=None, copiesToSkip=None):
		"""
		Circular Pattern parts or faces around an axis.

  Args:
    input (list[Part] | list[FeatureArea]): Parts or Features to create circular
      pattern.
    axis (math.Vector | FeatureCurve | Axis): Axis is a reference line, edge,
      or axis to which the pattern will be parallel.
    angle (float): Angle within which the copies are equally spaced.
    count (int): Number of copies.
    equalSpacing (bool): If True, equally space the copies within a specified
      Angle.
    instances (bool): If True, any changes to part or face will apply to all
      instances.
    symmetry (bool): Symmetry in Direction 1.
    axisReverse (bool): Reverse the axis in Direction 1.
    result (str): Result type of circular pattern.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeParts.
    mergeParts (list[Part]): Parts to be merged with circular pattern.
    copiesToSkip (dict{Part: list[indicesToSkip]}): Set copies to skip. It's
      basically a dictionary which contains Part as a key and list of indices to
      skip as values.

  Returns:
  list[Part]: List of parts created.
  
		"""
		pass

	@property
	def cogConstraints(self):
		pass
	@cogConstraints.setter
	def cogConstraints(self):
		pass

	@property
	def color(self):
		pass
	@color.setter
	def color(self):
		pass

	@property
	def concentratedMasses(self):
		pass
	@concentratedMasses.setter
	def concentratedMasses(self):
		pass

	@property
	def connectionRadius(self):
		pass
	@connectionRadius.setter
	def connectionRadius(self):
		pass

	def convertBodiesToParts(self,parts):
		"""
		Convert disconnected bodies to parts.

  Args:
    parts (list[Part]): The parts to be converted.

  Returns:
    list[Part]: Newly created parts.
  
		"""
		pass

	def convertToMass(self,parts, parent=None):
		"""
		Replace Parts to concentrated mass.

  Args:
    parts (list[Part]): Parts to be replaced with concentrated mass.
    parent (Part): Parent for the mass created.
  
		"""
		pass

	def convertToTriangleMesh(self,parts):
		"""
		Convert Parts to triangle mesh.

  Args:
    parts (list[Part]): Parts to be converted in triangle mesh.
  
		"""
		pass

	@property
	def currentRepresentation(self):
		pass
	@currentRepresentation.setter
	def currentRepresentation(self):
		pass

	@property
	def designSpace(self):
		pass
	@designSpace.setter
	def designSpace(self):
		pass

	def destroy(self):
		"""
		Destroys occurrences from the model.
    
		"""
		pass

	@property
	def detectCollisions(self):
		pass
	@detectCollisions.setter
	def detectCollisions(self):
		pass

	@property
	def dimensions(self):
		pass
	@dimensions.setter
	def dimensions(self):
		pass

	@property
	def displacementConstraints(self):
		pass
	@displacementConstraints.setter
	def displacementConstraints(self):
		pass

	@property
	def drawDirections(self):
		pass
	@drawDirections.setter
	def drawDirections(self):
		pass

	@property
	def enforcedDisplacements(self):
		pass
	@enforcedDisplacements.setter
	def enforcedDisplacements(self):
		pass

	@property
	def features(self):
		pass
	@features.setter
	def features(self):
		pass

	def findMinimumSeparation(self,other):
		"""
		Find closest points between two parts
    
    Args:
      other (Part): The 2nd part.
      
    Returns:
      namedtuple("ClosestPoints", "point1 point2 distance feature1 feature2")
    
		"""
		pass

	@property
	def flexible(self):
		pass
	@flexible.setter
	def flexible(self):
		pass

	def getAllChildren(self,type=None, **kwds):
		"""
		Returns a list of all children that matches the specified type.

    Args:
      type (list[Named]): Filter to use to get the children based on object type.
      **kwds : Additional keyword arguments to match other attributes of the object.

    Returns:
      list[Union[Part, Motor, BoundaryCondition, ...]]: The list of children that satisfy the supplied filters.
    
		"""
		pass

	def getAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value.

    Args:
      name (str): Attribute name to find its class.
    
		"""
		pass

	def getAttributes(self,type=None, **kwds):
		"""
		Return an dict of the attributes.
    Pass type and kwds to filter by type and Attribute properties

    Args:
      type (type): Filters the attribute based on type
      **kwds : Additional kwds argument to filter attribute by its properties

    Returns:
      dict: Return an OrderedDict of the attributes
    
		"""
		pass

	def getChild(self,name=None, recursive=False, **kwds):
		"""
		Returns the child of the object which matches the specified unique name.

    Args:
      name (str): The name of the child object.
      recursive (bool):  Search all descendents.
      **kwds : Additional keyword arguments to match attributes of the object.

    Returns:
      Named: The child object which satisfies the specified filters.
    
		"""
		pass

	def getChildren(self,type=None, recursive=False, sorted=False, **kwds):
		"""
		Returns a list of children that is of the specified type.

    Args:
      type (Type[Named]): Filter objects by class.
      recursive (bool): True to get all descendent Parts and Assemblies.
      sorted (bool): Sort the children base on id.

    Returns:
      list[Named]
    
		"""
		pass

	def getClass(self,className):
		"""
		Returns the class of the object.
    
    It can be simple or qualified (with namespace). If the name is simple, we 
    prepend the cls.namespace.

    Args:
      className (Union[Part, Occurrence, Named..]) : The class name. 
     
    Returns:
      Union[Part, Occurrence, Named..] : The class for the specified className. 

    
		"""
		pass

	def getClassAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value

    Args:
      name (str): Name of the attribute
    
		"""
		pass

	def getClosestPoint(self,point):
		"""
		Get closest point on part from passed point
		"""
		pass

	def getDependents(self,recursive=False, **kwds):
		"""
		Get objects that reference this object through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getFeature(self,name=None):
		"""
		Returns the feature based on its name.
		"""
		pass

	def getFeatures(self,type=None, rep="BestRep", **kwds):
		"""
		Returns a list of features based on specified filters.

    Args:
      type ((FeaturePoint, FeatureArea, FeatureCylindrical..etc)): Filters the 
        features based on type.
      rep (str): Feature representation. See part.representations for options
      **kwds : Additional attributes to consider while filtering.

    Returns:
      list [FeaturePoint, FeatureArea, FeatureCylindrical..etc)]: List of 
        features that satisfies all the filter criteria.
    
		"""
		pass

	def getGuiAttributeNames(self):
		"""
		Return list of the attribute names that are in the gui

    Returns:
      list: Returns list of active gui attribute
    
		"""
		pass

	def getGuiValue(self,attr, **kwds):
		"""
		Get value formatted to be shown in the gui

    Args:
      attr (str): Attribute name to gets its gui value.

    Returns:
      str: Returns a string of the value with its gui units, like "5 mm/s".
    
		"""
		pass

	def getRayIntersections(self,origin, direction):
		"""
		Find list of points where ray intersects part
		"""
		pass

	def getReferences(self,recursive=False, **kwds):
		"""
		Get objects this object references through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getSerializedAttributeValues(self):
		pass

	def getValue(self,attr):
		"""
		Return the attribute value for passed attribute name.
    
    Args:
      attr (String): Attribute name to gets its value.

    Returns:
      str: Returns the attribute value
    
		"""
		pass

	@property
	def ground(self):
		pass
	@ground.setter
	def ground(self):
		pass

	@property
	def grounded(self):
		pass
	@grounded.setter
	def grounded(self):
		pass

	@property
	def holes(self):
		pass
	@holes.setter
	def holes(self):
		pass

	def identifyShape(self):
		"""
		Attempts to identify the part geometry as a known shape.

      The shapes can be:

          - Box
          - Ellipsoid
          - Sphere
          - Cylinder
          - frustum
          - axi-symmetric gear
          - rack
          
    Returns:
      Box,Ellipsoid,Sphere.. : The identified shape.
    
		"""
		pass

	@property
	def ignoreFlexibility(self):
		pass
	@ignoreFlexibility.setter
	def ignoreFlexibility(self):
		pass

	def intersect(self,parts, createSolids=False, keepSourceParts=False):
		"""
		Intersect tool that deletes excess faces, edges and vertices.

  Args:
    parts (list[Part]): Parts to intersect.
    createSolids (bool): If True, faces of solid volumes automatically selected.
    keepSourceParts (bool): Determines whether to keep source parts or not.
      When original parts are not kept, they are deleted from the model
      at the end of a successful operation.

  Returns:
    Part/None: New part if created otherwise none.
  
		"""
		pass

	def intersectCurve(self,targets, tools, combineCurves=False):
		"""
		Split intersecting curves or wire bodies into several curves.

  Args:
    targets (list[Part]): Parts to be intersected with tools.
    tools (list[Part]): Parts used to intersect the targets.
    combineCurves (bool): If True, combine result curves.

  Returns:
    Part: The intersect part.
  
		"""
		pass

	def intersects(self,other):
		"""
		Finds whether the two parts intersect.

    Args:
      other (Part): The 2nd part.
    Returns:
      bool: True if they intersect, False otherwise.
    
		"""
		pass

	@property
	def ip(self):
		pass
	@ip.setter
	def ip(self):
		pass

	def isa(self,type=None, filter=None, name=None, wildcard=None, **kwds):
		"""
		Determines if the object matches the specified settings or not.
    
    Args:
      type (Union[Part, Assembly, Contact..]): The type of the object.
      filter (method): Return value of specified callback method.
      name (str): Name that matches exactly with object name.
      wildcard (str): A pattern to match exactly with the object name.
      **kwds : Additional keyword arguments to match other attributes.

    Returns:
      bool : True, if a match is found, otherwise False.
    
		"""
		pass

	def linearPattern(self,input, direction1, direction2=(0, 0, 0), bothDirection=False, spacing1="0.0", count1=3, spacing2="0.0", count2=3, instances=False, symmetry1=False, symmetry2=False, reverseDir1=False, reverseDir2=False, result="NEW_PART", mergeWithAllParts=True, mergeParts=None, copiesToSkip=None, seedOnly=False):
		"""
		Linear Pattern parts or faces along a direction.

  Args:
    input (list[Part] | list[FeatureArea]): Parts or Features to create linear
      pattern.
    direction1 (math.Vector | FeatureCurve | Axis): Direction can be a 
      reference line, edge, or axis to which the pattern will be parallel.
    direction2 (math.Vector | FeatureCurve | Axis): Direction can be a 
      reference line, edge, or axis to which the pattern will be parallel.
    bothDirection (bool): If True, sets in both direction otherwise single
      direction.
    spacing1 (float): Distance between two copies.
    count1 (int): Number of copies.
    spacing2 (float): Distance between two copies.
    count2 (int): Number of copies.
    instances (bool): If True, any changes to part or face will apply to all
      instances.
    symmetry1 (bool): Symmetry in Direction 1.
    symmetry2 (bool): Symmetry in Direction 2.
    reverseDir1 (bool): Reverse the pattern direction in Direction 1.
    reverseDir2 (bool): Reverse the pattern direction in Direction 2.
    result (str): Result type of linear pattern.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeParts.
    mergeParts (list[Part]): Parts to be merged with linear pattern.
    copiesToSkip ((dict{Part: list[tuplex,y)]}): Set copies to skip. Here x and
      y are the indices in 2D space of copy , which needs to be skipped.
    seedOnly (bool): If True, pattern the entities only along the first row and
      first column.

  Returns:
  list[Part]: List of parts created.
  
		"""
		pass

	@property
	def location(self):
		pass
	@location.setter
	def location(self):
		pass

	def makeSmooth(self,parts=None, maintainVolume=True, intensity=0.5, iterations=40):
		"""
		Smoothens parts from the selected parts with passed params.

  Args:
    parts (list[Part]): A list of parts to smooth
    maintainVolume (bool): If True part volume is targeted to be preserved.
      If false smoothening is done more aggressively every iteration
    intensity (float[0.2, 0.9]): this control how aggressive the smoothening
      operation is every iteration.
    iterations (int): The number of iterations algorithm does smoothening.
      Higher number results in smoother mesh

  
		"""
		pass

	@property
	def mass(self):
		pass
	@mass.setter
	def mass(self):
		pass

	@property
	def material(self):
		pass
	@material.setter
	def material(self):
		pass

	@property
	def maxFreq(self):
		pass
	@maxFreq.setter
	def maxFreq(self):
		pass

	@property
	def maxMeshSize(self):
		pass
	@maxMeshSize.setter
	def maxMeshSize(self):
		pass

	@property
	def maxThickness(self):
		pass
	@maxThickness.setter
	def maxThickness(self):
		pass

	def meshInfo(self):
		pass

	def midSurface(self,part, surfaceOptions="Mid"):
		"""
		Extracts a midsurface or side faces from thin solids, and determine where
  surfaces are represented.
    
  Replacing parts with midsurfaces yields better results while increasing 
  speed when running an analysis or optimization.

  Args:
    part (Part): The part which needs midsurface extraction.
    surfaceOptions (str): This options allows you to extract the Mid, Left or Right
      surface of the part.
  
		"""
		pass

	@property
	def minBoundingBox(self):
		pass
	@minBoundingBox.setter
	def minBoundingBox(self):
		pass

	@property
	def minGap(self):
		pass
	@minGap.setter
	def minGap(self):
		pass

	@property
	def minMeshSize(self):
		pass
	@minMeshSize.setter
	def minMeshSize(self):
		pass

	@property
	def minThickness(self):
		pass
	@minThickness.setter
	def minThickness(self):
		pass

	def mirror(self,entity, planeOrigin=None, planeNormal=None, keep=True):
		"""
		Mirrors part across a symmetry plane.

  If entity is a Part, the planeOrigin and planeNormal need to be passed

  Args:
    entity (Part | FeaturePlanar): Part from which a mirror part needs to be created
      or a Planar feature which needs to be mirrored across the plane
    planeOrigin (math.Point): The origin of the symmetry plane.
    planeNormal (math.Vector): The normal of the symmetry plane.
    keep (bool): If True it keeps the original part, if False it removes it.

  Returns:
    Part: New mirrored part created.
  
		"""
		pass

	@property
	def modeType(self):
		pass
	@modeType.setter
	def modeType(self):
		pass

	def modelPositions(self):
		"""
		Forces all objects to return the original model positions instead of the
    current analysis positions.

    Useful when defining draw methods on GeneralObjects where behaviour is 
    different while animating.
    
		"""
		pass

	@property
	def modifiable(self):
		pass
	@modifiable.setter
	def modifiable(self):
		pass

	@property
	def morphable(self):
		pass
	@morphable.setter
	def morphable(self):
		pass

	@property
	def motionContactResolution(self):
		pass
	@motionContactResolution.setter
	def motionContactResolution(self):
		pass

	@property
	def movable(self):
		pass
	@movable.setter
	def movable(self):
		pass

	def move(self,part, position):
		"""
		Translates and/or rotates a part. 

  Args:
    part (Part): The part to move.
    position (math.Matrix44): The position to move the part at.
  
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	@property
	def numModes(self):
		pass
	@numModes.setter
	def numModes(self):
		pass

	def offset(self,input, value, newPart=False):
		"""
		Offset surfaces or parts.

  Args:
    input (list[Part] | list[Feature])
    value (float | str): Desired offset distance. Negative value means inward direction.
      If value is a string it can be a Model Variable or a value with units.
    newPart (bool): If True, creates a new part.

  Returns:
    Part|None: New part created if newPart was True.
  
		"""
		pass

	@property
	def orderType(self):
		pass
	@orderType.setter
	def orderType(self):
		pass

	@property
	def parent(self):
		pass
	@parent.setter
	def parent(self):
		pass

	def patternAlongPath(self,input, path, count=3, equalSpacing=False, spacing=0.01, instances=False, method="TRANSFORM", orientation="MAINTAIN_SEED_ORIENTATION", pathReverse=False, result="NEW_PART", mergeWithAllParts=True, mergeParts=None, copiesToSkip=None):
		"""
		Pattern parts or faces along curve.

   Args:
    input (list[Part] | list[FeatureArea]): Parts or Features to create pattern
      along the curve.
    path (list[FeatureCurve]): Path for pattern.
    count (int): Number of copies.
    equalSpacing (bool): If True, equally space the copies.
    spacing (float): Distance between two copies.
    instances (bool): If True, any changes to part or face will apply to all instances.
    method (str): Pattern method.
      - TRANSFORM
      - OFFSET
    orientation (str): Pattern Orientation.
      - TANGENT_TO_CURVE
      - MAINTAIN_SEED_ORIENTATION
    pathReverse (bool): Reverse the path of pattern.
    result (str): Result type of pattern along path.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeParts.
    mergeParts (list[Part]): Parts to be merged with pattern along path.
    copiesToSkip (dict{Part: list[indicesToSkip]}): Set copies to skip. It's
      basically a dictionary which contains Part as a key and list of indices to
      skip as values.

  Returns:
  list[Part | Feature]: List of parts/features created.
  
		"""
		pass

	@property
	def position(self):
		pass
	@position.setter
	def position(self):
		pass

	def projectAndSplit(self,targets, tools, direction, trim=True, keepType="EXTERIOR", vectorDirection=None, extendProjection=True, trimExtents="THROUGH_ALL", extractProjection=False, surfaceNormal=None, resultAsSurface=False):
		"""
		Formerly known as projectAndSplit. It removes part of a surface or solid by
  projecting a profile curve on to it. OR use a set of tool surfaces to split a
  set of target surfaces.

  Args:
    targets (list[Part] | list[Feature]): List of Parts or features on which
      feature projection to be.
    tools (list[Feature]): Feature that needs to be projected on Part.
    direction (str): Valid values are: TOOL_NORMAL, X, Y, Z,
      VECTOR and CLOSEST_POINT, SURFACE_NORMAL.
    trim (bool): If True, operation type is trim otherwise split.
    keepType (str): Output to keep. Only valid for split.
      - EXTERIOR
      - INTERIOR
      - BOTH
    vectorDirection (FeatureLinear | System): Vector direction, only applicable
      when direction is 'VECTOR'.
    extendProjection (bool): If True, extends the projection.
    trimExtents (str): Trim extents, Only valid for Trim operation.
      - THROUGH_ALL
      - DIRECTION_1
      - DIRECTION_2
    extractProjection (bool): If True, extract projection without split. Valid
      only for split operation
    surfaceNormal (FeaturePlanar): Planar surface along whose normal you want
     to project the tools.
    resultAsSurface (bool): If True, Force output result being a sheet by
      removing faces on the solid target obtained by cut. Valid only for trim
      operation.

  Returns:
  list[Part]: List of parts created.
  
		"""
		pass

	def removeAssociatedFeatures(self,features):
		"""
		Remove the association with provided features.

    Args:
       features (list[Feature]) : Associated features with concentrated mass.
    
		"""
		pass

	def removeIsland(self,part):
		"""
		Finds small disconnected regions of a mesh part and delete them.

  Args:
    part (Part): Part having island.
  
		"""
		pass

	def removeSmooth(self,parts=None):
		"""
		
  Removes any existing smoothening from passed parts

  Args:
    parts (list[Part]): A list of parts to removing smooothing from.

  
		"""
		pass

	def replaceFromFile(self,part, filePath):
		"""
		Replace part with the contents of a file.

  Args:
    part (Part): The part to be replaced.
    filePath (str): The path to the file whose contents will replace the part.
  
		"""
		pass

	def replaceFromPart(self,part, toolPart, keepToolPart=False):
		"""
		Replace part with tool part.

  Args:
    part (Part): The part to be replaced.
    toolPart (Part): The part to replace with.
    keepToolPart (bool): Determines whether to keep the toolPart or not after replace.
  
		"""
		pass

	@property
	def representations(self):
		pass
	@representations.setter
	def representations(self):
		pass

	def rib(self,sketch, targetPart, ribThickness=0.01, flipMaterialDirection=False, offsetDirection="MID", ribDirection="NORMAL", draftAngle="0", reverseDraftDirection=False, extensionType="LINEAR"):
		"""
		Extrude rib geometry from a sketch to stiffen your model.

  Args:
    sketch (Part): Sketch profile for rib tool.
    targetPart (Part): Target part on which rib tool will be created.
    ribThickness (bool): Rib thickness.
    flipMaterialDirection (bool): If True, flip the material direction of rib
     tool otherwise not.
    offsetDirection (str): Offset direction type.
     - LEFT
     - MID
     - RIGHT
    ribDirection (str): Rib direction type.
     - NORMAL
     - PARALLEL
    draftAngle (float): Draft angle for rib creation in degree.
    reverseDraftDirection (bool): If True, reverse the draftAngle direction
     otherwise not.
    extensionType (str): Rib extension type.
     - LINEAR
     - NATURAL
  
		"""
		pass

	@property
	def rigid(self):
		pass
	@rigid.setter
	def rigid(self):
		pass

	@property
	def rigidGroup(self):
		pass
	@rigidGroup.setter
	def rigidGroup(self):
		pass

	def rotate(self,part, axis, angle, degrees=True):
		"""
		Rotates a part around the specified axis.

  This is a body rotation.

  Args:
    part (Part): The part to rotate.
    axis (Vector | str): The rotation axis. 
      If axis a string, valid choices are "x", "y", "z".
    angle (float): The rotation angle.
    degrees (bool): If True, angle is considered in degrees, if False in radians.

  
		"""
		pass

	@property
	def rotations(self):
		pass
	@rotations.setter
	def rotations(self):
		pass

	def save(self,file):
		"""
		Save the Part in the specified file.

    Args:
      file (str) : File name and path, where the file needs to be saved.
        Valid file extensions are:
          '.x_b', '.x_t', '.xmt_bin', '.xmt_txt', '.sat', '.sab', '.iges', '.igs',
          '.stl', '.step', '.stp', '.obj', '.vrml', '.vrl'.
    
		"""
		pass

	def scale(self,parts, value=1.1):
		"""
		Resizes the part to the specified scale value.

  This is useful when working with an imported model that is associated 
  with a different default unit system.

  Args:
    parts (list[Part]): Parts that need to be scaled.
    value (float | str): The scale factor.
      If value is a string it can be a Model Variable or a value with units.
  
		"""
		pass

	def setValue(self,attr, value):
		"""
		Alias for setattr (attr, value)
    Args:
      attr (str): Attribute name to sets its value.
      value (str): Attribute value to set .
    
		"""
		pass

	def setValues(self,**kwds):
		"""
		Sets passed name/value pairs.
    
    Values are set in a standard order (the order the attribute is defined
    on the class) which is required in certain cases when an attribute's
    setter expects another attribute to have already been set.
    For example, setting a reference before a location that is wrt it.
    
    Args:
      **kwds: Set attributes in one go.
    
		"""
		pass

	@property
	def sheetThickness(self):
		pass
	@sheetThickness.setter
	def sheetThickness(self):
		pass

	def shrinkWrap(self,parts=None, voxelSize=-1, merge=True, sharpen=False):
		"""
		Creates a new part/parts from the selected parts with a single isosurface

  The shrinkwrap is useful when you want to merge optimized results with 
  non-design-space regions. 

  You would do this so you can fit a single PolyNURBS over the entire model.
  By default, the selected parts are merged into a single part. 
  This option can be disabled by setting merge to False.

  Args:
    parts (list[Part]): A list of parts to be shrink wrapped.
    voxelSize (float): Size of each voxel of the shrink wrapped part. Size
      value should be in the range 0 to 1 Defaults to -1 to auto compute the
      voxel dimension of the part.
    merge (bool): Merge the shrink wrapped parts into single or multiple parts.
    sharpen (bool): If set to True, then sharpen the edges of the new shrink
      wrapped part.

  Returns:
    Part: Returns a new shrink wrapped part
  
		"""
		pass

	def simplifyHoles(self,entity, minSize="0", maxSize=None):
		"""
		Finds and removes holes and pockets, and find raised areas such as lettering.

  Args:
    entity (Part | Assembly | Feature): Part/Assembly from which you want to 
      remove the holes from or FeatureCircular which needs to be removed.
    minSize (float): Minimum size of hole.
    maxSize (float): Maximum size of hole.
  
		"""
		pass

	def simplifyImprints(self,entity):
		"""
		Finds and removes imprints from a part.

  An imprint is an edge or a point that appears on a surface that can be removed
  without changing the underlying integrity of the surface, such as scratches or
  trimmed points.

  Args:
    entity (Part | Assembly | FeatureLinear): Part/Assembly from which you want to
      remove the imprints from or FeatureLinear imprint to be removed.
  
		"""
		pass

	def simplifyPlugs(self,entity, minSize="0", maxSize=None):
		"""
		Finds holes and pockets, and plug them by filling the area with a new part

  Args:
    entity (Part | Assembly | Feature): Part/Assembly from which you want to plug 
      the holes or a Circular feature that needs to be plugged.
    minSize (float): Minimum size of plug.
    maxSize (float): Maximum size of plug.
  
		"""
		pass

	def simplifyRounds(self,entity, roundType="ALL", minSize="0", maxSize=None):
		"""
		Finds and removes both round (convex) and fillet (concave) surfaces.

  Args:
    entity (Part | Assembly | Feature): Part/Assembly from which you want to 
      remove the fillets, chamfers from or a Feature to be removed.
    roundType (str): Valid values are: ROUNDS, FILLETS, CHAMFERS and ALL.
    minSize (float): Minimum size of round.
    maxSize (float): Maximum size of round.
  
		"""
		pass

	def slice(self,targets, cutOrigin=None, cutNormal=None, surfaceFeature=None, extendSurface=True):
		"""
		Slices a set of solid objects with a cutting plane or cutting surface.

  You must provide cutOrigin and cutNormal or surfaceFeature.

  Args:
    targets (list[Part]): The parts to slice across the cutting plane.
    cutOrigin (math.Point): The origin of the cutting plane.
    cutNormal (math.Vector): The normal of the cutting plane.
    surfaceFeature (FeatureArea): The surface to slice the enity accross.
    extendSurface (bool): Set Automatic extension On/Off for tool Surface.

  Returns:
    Part: The new sliced part created.
  
		"""
		pass

	@property
	def spiders(self):
		pass
	@spiders.setter
	def spiders(self):
		pass

	@property
	def strainCalculation(self):
		pass
	@strainCalculation.setter
	def strainCalculation(self):
		pass

	@property
	def stressCalculation(self):
		pass
	@stressCalculation.setter
	def stressCalculation(self):
		pass

	@property
	def symmetryConstraints(self):
		pass
	@symmetryConstraints.setter
	def symmetryConstraints(self):
		pass

	@property
	def temperatures(self):
		pass
	@temperatures.setter
	def temperatures(self):
		pass

	def thicken(self,parts, value, symmetric=True):
		"""
		Thicken surface parts and convert them to solids, or thicken and hollow 
  solid parts.

  When used on a solid part, the Thicken tool yields a hollow solid.
  When used on a surface part, the Thicken tool yields a solid part.

  Args:
    parts (list[Part])
    value (float): Desired offset distance. Negative value means inward direction.
    symmetric (bool): If True, offsets symmetrically on both sides of the part surface.
  
		"""
		pass

	def translate(self,part, x="0", y=None, z=None):
		"""
		Translates by the specified distance.

  If y is None, x is assumed to be a list of 3 floats.

  Args:
    part (Part): The part to translate.
    x (float): The distance to translate the 'x' vector. 
    y (float): The distance to translate the 'y' vector.
    z (float): The distance to translate the 'z' vector.
  
		"""
		pass

	@property
	def transparency(self):
		pass
	@transparency.setter
	def transparency(self):
		pass

	def trimAndSplit(self,targets, tools, direction, trim=True, keepType="EXTERIOR", vectorDirection=None, extendProjection=True, trimExtents="THROUGH_ALL", extractProjection=False, surfaceNormal=None, resultAsSurface=False):
		"""
		Formerly known as projectAndSplit. It removes part of a surface or solid by
  projecting a profile curve on to it. OR use a set of tool surfaces to split a
  set of target surfaces.

  Args:
    targets (list[Part] | list[Feature]): List of Parts or features on which
      feature projection to be.
    tools (list[Feature]): Feature that needs to be projected on Part.
    direction (str): Valid values are: TOOL_NORMAL, X, Y, Z,
      VECTOR and CLOSEST_POINT, SURFACE_NORMAL.
    trim (bool): If True, operation type is trim otherwise split.
    keepType (str): Output to keep. Only valid for split.
      - EXTERIOR
      - INTERIOR
      - BOTH
    vectorDirection (FeatureLinear | System): Vector direction, only applicable
      when direction is 'VECTOR'.
    extendProjection (bool): If True, extends the projection.
    trimExtents (str): Trim extents, Only valid for Trim operation.
      - THROUGH_ALL
      - DIRECTION_1
      - DIRECTION_2
    extractProjection (bool): If True, extract projection without split. Valid
      only for split operation
    surfaceNormal (FeaturePlanar): Planar surface along whose normal you want
     to project the tools.
    resultAsSurface (bool): If True, Force output result being a sheet by
      removing faces on the solid target obtained by cut. Valid only for trim
      operation.

  Returns:
  list[Part]: List of parts created.
  
		"""
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

	@property
	def volume(self):
		pass
	@volume.setter
	def volume(self):
		pass

	def wasValueSet(self,attr):
		"""
		Check if attribute was set

    Args:
      attr (str): Attribute name to check it value set or not

    Returns:
      bool: True, if value was set else false.
    
		"""
		pass

class Cone:
	def __init__(self,**kwds):
		"""
Create a Cone implicit body.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class Config:
	def __init__(self):
		"""
Config is a container class which would hold other entities
  There could be multiple configs present in given project
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	def destroy(self):
		"""
		Delete the object removing it from the model.
    
    The object may come back due to an undo/redo.
    
		"""
		pass

	def getAllChildren(self,type=None, **kwds):
		"""
		Returns a list of all children that matches the specified type.

    Args:
      type (list[Named]): Filter to use to get the children based on object type.
      **kwds : Additional keyword arguments to match other attributes of the object.

    Returns:
      list[Union[Part, Motor, BoundaryCondition, ...]]: The list of children that satisfy the supplied filters.
    
		"""
		pass

	def getAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value.

    Args:
      name (str): Attribute name to find its class.
    
		"""
		pass

	def getAttributes(self,type=None, **kwds):
		"""
		Return an dict of the attributes.
    Pass type and kwds to filter by type and Attribute properties

    Args:
      type (type): Filters the attribute based on type
      **kwds : Additional kwds argument to filter attribute by its properties

    Returns:
      dict: Return an OrderedDict of the attributes
    
		"""
		pass

	def getChild(self,name=None, recursive=False, **kwds):
		"""
		Returns the child of the object which matches the specified unique name.

    Args:
      name (str): The name of the child object.
      recursive (bool):  Search all descendents.
      **kwds : Additional keyword arguments to match attributes of the object.

    Returns:
      Named: The child object which satisfies the specified filters.
    
		"""
		pass

	def getChildren(self,type=None, recursive=False, sorted=False, **kwds):
		"""
		Returns a list of children that is of the specified type.

    Args:
      type (Type[Named]): Filter objects by class.
      recursive (bool): True to get all descendent Parts and Assemblies.
      sorted (bool): Sort the children base on id.

    Returns:
      list[Named]
    
		"""
		pass

	def getClass(self,className):
		"""
		Returns the class of the object.
    
    It can be simple or qualified (with namespace). If the name is simple, we 
    prepend the cls.namespace.

    Args:
      className (Union[Part, Occurrence, Named..]) : The class name. 
     
    Returns:
      Union[Part, Occurrence, Named..] : The class for the specified className. 

    
		"""
		pass

	def getClassAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value

    Args:
      name (str): Name of the attribute
    
		"""
		pass

	def getDependents(self,recursive=False, **kwds):
		"""
		Get objects that reference this object through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getGuiAttributeNames(self):
		"""
		Return list of the attribute names that are in the gui

    Returns:
      list: Returns list of active gui attribute
    
		"""
		pass

	def getGuiValue(self,attr, **kwds):
		"""
		Get value formatted to be shown in the gui

    Args:
      attr (str): Attribute name to gets its gui value.

    Returns:
      str: Returns a string of the value with its gui units, like "5 mm/s".
    
		"""
		pass

	def getReferences(self,recursive=False, **kwds):
		"""
		Get objects this object references through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getSerializedAttributeValues(self):
		pass

	def getValue(self,attr):
		"""
		Return the attribute value for passed attribute name.
    
    Args:
      attr (String): Attribute name to gets its value.

    Returns:
      str: Returns the attribute value
    
		"""
		pass

	def isa(self,type=None, filter=None, name=None, wildcard=None, **kwds):
		"""
		Determines if the object matches the specified settings or not.
    
    Args:
      type (Union[Part, Assembly, Contact..]): The type of the object.
      filter (method): Return value of specified callback method.
      name (str): Name that matches exactly with object name.
      wildcard (str): A pattern to match exactly with the object name.
      **kwds : Additional keyword arguments to match other attributes.

    Returns:
      bool : True, if a match is found, otherwise False.
    
		"""
		pass

	def modelPositions(self):
		"""
		Forces all objects to return the original model positions instead of the
    current analysis positions.

    Useful when defining draw methods on GeneralObjects where behaviour is 
    different while animating.
    
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	@property
	def parent(self):
		pass
	@parent.setter
	def parent(self):
		pass

	def setValue(self,attr, value):
		"""
		Alias for setattr (attr, value)
    Args:
      attr (str): Attribute name to sets its value.
      value (str): Attribute value to set .
    
		"""
		pass

	def setValues(self,**kwds):
		"""
		Sets passed name/value pairs.
    
    Values are set in a standard order (the order the attribute is defined
    on the class) which is required in certain cases when an attribute's
    setter expects another attribute to have already been set.
    For example, setting a reference before a location that is wrt it.
    
    Args:
      **kwds: Set attributes in one go.
    
		"""
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

	def wasValueSet(self,attr):
		"""
		Check if attribute was set

    Args:
      attr (str): Attribute name to check it value set or not

    Returns:
      bool: True, if value was set else false.
    
		"""
		pass

class ConnectionCandidates:
	def __init__(self):
		"""
Joint information utilities
  
"""
		pass

	def getCandidates(self,keyFeatures="All", holes=None, parts=None, visibleOnly=True):
		"""
		Returns a list of objects that are valid connection candidates.

    Assumes model.updateContacts was already called to update any potential
    candidates. Dirty contacts are ignored.
    
		"""
		pass

class Connector:
	def __init__(self):
		"""
Connectors link points, edges, or faces to each other.

  They are used to connect two parts together, or to apply a load or support at a distance.

  Connectors are only valid if they connect at least three non-collinear points 
  or two non-collinear edges. Collinear points lie on the same line. 
  Non-collinear points do not.

  
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	@property
	def connectionRadius(self):
		pass
	@connectionRadius.setter
	def connectionRadius(self):
		pass

	def destroy(self):
		"""
		Delete the object removing it from the model.
    
    The object may come back due to an undo/redo.
    
		"""
		pass

	def getAllChildren(self,type=None, **kwds):
		"""
		Returns a list of all children that matches the specified type.

    Args:
      type (list[Named]): Filter to use to get the children based on object type.
      **kwds : Additional keyword arguments to match other attributes of the object.

    Returns:
      list[Union[Part, Motor, BoundaryCondition, ...]]: The list of children that satisfy the supplied filters.
    
		"""
		pass

	def getAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value.

    Args:
      name (str): Attribute name to find its class.
    
		"""
		pass

	def getAttributes(self,type=None, **kwds):
		"""
		Return an dict of the attributes.
    Pass type and kwds to filter by type and Attribute properties

    Args:
      type (type): Filters the attribute based on type
      **kwds : Additional kwds argument to filter attribute by its properties

    Returns:
      dict: Return an OrderedDict of the attributes
    
		"""
		pass

	def getChild(self,name=None, recursive=False, **kwds):
		"""
		Returns the child of the object which matches the specified unique name.

    Args:
      name (str): The name of the child object.
      recursive (bool):  Search all descendents.
      **kwds : Additional keyword arguments to match attributes of the object.

    Returns:
      Named: The child object which satisfies the specified filters.
    
		"""
		pass

	def getChildren(self,type=None, recursive=False, sorted=False, **kwds):
		"""
		Returns a list of children that is of the specified type.

    Args:
      type (Type[Named]): Filter objects by class.
      recursive (bool): True to get all descendent Parts and Assemblies.
      sorted (bool): Sort the children base on id.

    Returns:
      list[Named]
    
		"""
		pass

	def getClass(self,className):
		"""
		Returns the class of the object.
    
    It can be simple or qualified (with namespace). If the name is simple, we 
    prepend the cls.namespace.

    Args:
      className (Union[Part, Occurrence, Named..]) : The class name. 
     
    Returns:
      Union[Part, Occurrence, Named..] : The class for the specified className. 

    
		"""
		pass

	def getClassAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value

    Args:
      name (str): Name of the attribute
    
		"""
		pass

	def getDependents(self,recursive=False, **kwds):
		"""
		Get objects that reference this object through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getGuiAttributeNames(self):
		"""
		Return list of the attribute names that are in the gui

    Returns:
      list: Returns list of active gui attribute
    
		"""
		pass

	def getGuiValue(self,attr, **kwds):
		"""
		Get value formatted to be shown in the gui

    Args:
      attr (str): Attribute name to gets its gui value.

    Returns:
      str: Returns a string of the value with its gui units, like "5 mm/s".
    
		"""
		pass

	def getReferences(self,recursive=False, **kwds):
		"""
		Get objects this object references through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getSerializedAttributeValues(self):
		pass

	def getValue(self,attr):
		"""
		Return the attribute value for passed attribute name.
    
    Args:
      attr (String): Attribute name to gets its value.

    Returns:
      str: Returns the attribute value
    
		"""
		pass

	def isa(self,type=None, filter=None, name=None, wildcard=None, **kwds):
		"""
		Determines if the object matches the specified settings or not.
    
    Args:
      type (Union[Part, Assembly, Contact..]): The type of the object.
      filter (method): Return value of specified callback method.
      name (str): Name that matches exactly with object name.
      wildcard (str): A pattern to match exactly with the object name.
      **kwds : Additional keyword arguments to match other attributes.

    Returns:
      bool : True, if a match is found, otherwise False.
    
		"""
		pass

	def modelPositions(self):
		"""
		Forces all objects to return the original model positions instead of the
    current analysis positions.

    Useful when defining draw methods on GeneralObjects where behaviour is 
    different while animating.
    
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	@property
	def parent(self):
		pass
	@parent.setter
	def parent(self):
		pass

	def setValue(self,attr, value):
		"""
		Alias for setattr (attr, value)
    Args:
      attr (str): Attribute name to sets its value.
      value (str): Attribute value to set .
    
		"""
		pass

	def setValues(self,**kwds):
		"""
		Sets passed name/value pairs.
    
    Values are set in a standard order (the order the attribute is defined
    on the class) which is required in certain cases when an attribute's
    setter expects another attribute to have already been set.
    For example, setting a reference before a location that is wrt it.
    
    Args:
      **kwds: Set attributes in one go.
    
		"""
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

	def wasValueSet(self,attr):
		"""
		Check if attribute was set

    Args:
      attr (str): Attribute name to check it value set or not

    Returns:
      bool: True, if value was set else false.
    
		"""
		pass

class Constant:
	def __init__(self,**kwds):
		"""
Implicit constant.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class Constraint:
	def __init__(self,features, position=None, isRemote=False, **kwds):
		"""
A constraint is used to hold a part so it doesn't displace when loads are 
  applied to it.

  You can apply a constraint to a single point on the model, to an edge or a 
  face, or at the center of a hole.
  
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	def applyToCylindricalHoleCenter(self):
		"""
		Sets support to act in a single direction across a cylindrical hole center.
		"""
		pass

	def applyToFace(self):
		"""
		Sets support to act in a single direction across the extent of a face.
		"""
		pass

	def applyToPoint(self):
		"""
		Sets support to act in a single direction at a point
		"""
		pass

	@property
	def color(self):
		pass
	@color.setter
	def color(self):
		pass

	@property
	def connectionRadius(self):
		pass
	@connectionRadius.setter
	def connectionRadius(self):
		pass

	@property
	def connectionType(self):
		pass
	@connectionType.setter
	def connectionType(self):
		pass

	def destroy(self):
		"""
		Delete the object removing it from the model.
    
    The object may come back due to an undo/redo.
    
		"""
		pass

	@property
	def detached(self):
		pass
	@detached.setter
	def detached(self):
		pass

	@property
	def direction(self):
		pass
	@direction.setter
	def direction(self):
		pass

	@property
	def distributed(self):
		pass
	@distributed.setter
	def distributed(self):
		pass

	@property
	def dofs(self):
		pass
	@dofs.setter
	def dofs(self):
		pass

	@property
	def feature(self):
		pass
	@feature.setter
	def feature(self):
		pass

	@property
	def features(self):
		pass
	@features.setter
	def features(self):
		pass

	@property
	def fixed(self):
		pass
	@fixed.setter
	def fixed(self):
		pass

	def getAllChildren(self,type=None, **kwds):
		"""
		Returns a list of all children that matches the specified type.

    Args:
      type (list[Named]): Filter to use to get the children based on object type.
      **kwds : Additional keyword arguments to match other attributes of the object.

    Returns:
      list[Union[Part, Motor, BoundaryCondition, ...]]: The list of children that satisfy the supplied filters.
    
		"""
		pass

	def getAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value.

    Args:
      name (str): Attribute name to find its class.
    
		"""
		pass

	def getAttributes(self,type=None, **kwds):
		"""
		Return an dict of the attributes.
    Pass type and kwds to filter by type and Attribute properties

    Args:
      type (type): Filters the attribute based on type
      **kwds : Additional kwds argument to filter attribute by its properties

    Returns:
      dict: Return an OrderedDict of the attributes
    
		"""
		pass

	def getChild(self,name=None, recursive=False, **kwds):
		"""
		Returns the child of the object which matches the specified unique name.

    Args:
      name (str): The name of the child object.
      recursive (bool):  Search all descendents.
      **kwds : Additional keyword arguments to match attributes of the object.

    Returns:
      Named: The child object which satisfies the specified filters.
    
		"""
		pass

	def getChildren(self,type=None, recursive=False, sorted=False, **kwds):
		"""
		Returns a list of children that is of the specified type.

    Args:
      type (Type[Named]): Filter objects by class.
      recursive (bool): True to get all descendent Parts and Assemblies.
      sorted (bool): Sort the children base on id.

    Returns:
      list[Named]
    
		"""
		pass

	def getClass(self,className):
		"""
		Returns the class of the object.
    
    It can be simple or qualified (with namespace). If the name is simple, we 
    prepend the cls.namespace.

    Args:
      className (Union[Part, Occurrence, Named..]) : The class name. 
     
    Returns:
      Union[Part, Occurrence, Named..] : The class for the specified className. 

    
		"""
		pass

	def getClassAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value

    Args:
      name (str): Name of the attribute
    
		"""
		pass

	def getDependents(self,recursive=False, **kwds):
		"""
		Get objects that reference this object through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getGuiAttributeNames(self):
		"""
		Return list of the attribute names that are in the gui

    Returns:
      list: Returns list of active gui attribute
    
		"""
		pass

	def getGuiValue(self,attr, **kwds):
		"""
		Get value formatted to be shown in the gui

    Args:
      attr (str): Attribute name to gets its gui value.

    Returns:
      str: Returns a string of the value with its gui units, like "5 mm/s".
    
		"""
		pass

	def getReferences(self,recursive=False, **kwds):
		"""
		Get objects this object references through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getSerializedAttributeValues(self):
		pass

	def getValue(self,attr):
		"""
		Return the attribute value for passed attribute name.
    
    Args:
      attr (String): Attribute name to gets its value.

    Returns:
      str: Returns the attribute value
    
		"""
		pass

	@property
	def hinge(self):
		pass
	@hinge.setter
	def hinge(self):
		pass

	def importLoads(self,csvFile):
		"""
		Imports boundary conditions to the active model from a csv file.

    Args:
      csvFile(str) : Csv file name containing all the BC information.

    Returns:
      list: List of error msgs that happened during import of all the boundary conditions.
    
		"""
		pass

	@property
	def inahole(self):
		pass
	@inahole.setter
	def inahole(self):
		pass

	def isa(self,type=None, filter=None, name=None, wildcard=None, **kwds):
		"""
		Determines if the object matches the specified settings or not.
    
    Args:
      type (Union[Part, Assembly, Contact..]): The type of the object.
      filter (method): Return value of specified callback method.
      name (str): Name that matches exactly with object name.
      wildcard (str): A pattern to match exactly with the object name.
      **kwds : Additional keyword arguments to match other attributes.

    Returns:
      bool : True, if a match is found, otherwise False.
    
		"""
		pass

	@property
	def loadCase(self):
		pass
	@loadCase.setter
	def loadCase(self):
		pass

	@property
	def localToPart(self):
		pass
	@localToPart.setter
	def localToPart(self):
		pass

	@property
	def location(self):
		pass
	@location.setter
	def location(self):
		pass

	@property
	def mode(self):
		pass
	@mode.setter
	def mode(self):
		pass

	def modelPositions(self):
		"""
		Forces all objects to return the original model positions instead of the
    current analysis positions.

    Useful when defining draw methods on GeneralObjects where behaviour is 
    different while animating.
    
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	@property
	def parent(self):
		pass
	@parent.setter
	def parent(self):
		pass

	@property
	def part(self):
		pass
	@part.setter
	def part(self):
		pass

	@property
	def parts(self):
		pass
	@parts.setter
	def parts(self):
		pass

	@property
	def position(self):
		pass
	@position.setter
	def position(self):
		pass

	def setDefaultDOFs(self):
		"""
		Sets supports DOFS to default.

    Default for supports in a hole or two dimensional parts are all constrained,
    while for the rest it's rotational DOFs constrained.
    
		"""
		pass

	def setSystem(self,system):
		"""
		Associate system to a boundary condition.

    Args:
      system (System): System tp associate with boundary condition.
    
		"""
		pass

	def setValue(self,attr, value):
		"""
		Alias for setattr (attr, value)
    Args:
      attr (str): Attribute name to sets its value.
      value (str): Attribute value to set .
    
		"""
		pass

	def setValues(self,**kwds):
		"""
		Sets passed name/value pairs.
    
    Values are set in a standard order (the order the attribute is defined
    on the class) which is required in certain cases when an attribute's
    setter expects another attribute to have already been set.
    For example, setting a reference before a location that is wrt it.
    
    Args:
      **kwds: Set attributes in one go.
    
		"""
		pass

	@property
	def sliding(self):
		pass
	@sliding.setter
	def sliding(self):
		pass

	def updatePosition(self,m44):
		"""
		Update the position by multiplying input M44 matrix.
		"""
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

	def wasValueSet(self,attr):
		"""
		Check if attribute was set

    Args:
      attr (str): Attribute name to check it value set or not

    Returns:
      bool: True, if value was set else false.
    
		"""
		pass

class Construction:
	pass

class Contact:
	def __init__(self):
		"""
Connection between two parts by the contact of features.

  Contacts indicate whether neighboring surfaces should be bonded, contacting, 
  or have no contact.
  
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	@property
	def axisAlignedBoundingBox(self):
		pass
	@axisAlignedBoundingBox.setter
	def axisAlignedBoundingBox(self):
		pass

	@property
	def connectionRadius(self):
		pass
	@connectionRadius.setter
	def connectionRadius(self):
		pass

	@property
	def contactData(self):
		pass
	@contactData.setter
	def contactData(self):
		pass

	@property
	def contactType(self):
		pass
	@contactType.setter
	def contactType(self):
		pass

	@property
	def definitionType(self):
		pass
	@definitionType.setter
	def definitionType(self):
		pass

	def destroy(self):
		"""
		Delete the object removing it from the model.
    
    The object may come back due to an undo/redo.
    
		"""
		pass

	@property
	def dirty(self):
		pass
	@dirty.setter
	def dirty(self):
		pass

	@property
	def features(self):
		pass
	@features.setter
	def features(self):
		pass

	def getAllChildren(self,type=None, **kwds):
		"""
		Returns a list of all children that matches the specified type.

    Args:
      type (list[Named]): Filter to use to get the children based on object type.
      **kwds : Additional keyword arguments to match other attributes of the object.

    Returns:
      list[Union[Part, Motor, BoundaryCondition, ...]]: The list of children that satisfy the supplied filters.
    
		"""
		pass

	def getAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value.

    Args:
      name (str): Attribute name to find its class.
    
		"""
		pass

	def getAttributes(self,type=None, **kwds):
		"""
		Return an dict of the attributes.
    Pass type and kwds to filter by type and Attribute properties

    Args:
      type (type): Filters the attribute based on type
      **kwds : Additional kwds argument to filter attribute by its properties

    Returns:
      dict: Return an OrderedDict of the attributes
    
		"""
		pass

	def getChild(self,name=None, recursive=False, **kwds):
		"""
		Returns the child of the object which matches the specified unique name.

    Args:
      name (str): The name of the child object.
      recursive (bool):  Search all descendents.
      **kwds : Additional keyword arguments to match attributes of the object.

    Returns:
      Named: The child object which satisfies the specified filters.
    
		"""
		pass

	def getChildren(self,type=None, recursive=False, sorted=False, **kwds):
		"""
		Returns a list of children that is of the specified type.

    Args:
      type (Type[Named]): Filter objects by class.
      recursive (bool): True to get all descendent Parts and Assemblies.
      sorted (bool): Sort the children base on id.

    Returns:
      list[Named]
    
		"""
		pass

	def getClass(self,className):
		"""
		Returns the class of the object.
    
    It can be simple or qualified (with namespace). If the name is simple, we 
    prepend the cls.namespace.

    Args:
      className (Union[Part, Occurrence, Named..]) : The class name. 
     
    Returns:
      Union[Part, Occurrence, Named..] : The class for the specified className. 

    
		"""
		pass

	def getClassAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value

    Args:
      name (str): Name of the attribute
    
		"""
		pass

	def getContactJoint(self):
		"""
		Returns the joint that uses this contact.
    
		"""
		pass

	def getDependents(self,recursive=False, **kwds):
		"""
		Get objects that reference this object through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getGuiAttributeNames(self):
		"""
		Return list of the attribute names that are in the gui

    Returns:
      list: Returns list of active gui attribute
    
		"""
		pass

	def getGuiValue(self,attr, **kwds):
		"""
		Get value formatted to be shown in the gui

    Args:
      attr (str): Attribute name to gets its gui value.

    Returns:
      str: Returns a string of the value with its gui units, like "5 mm/s".
    
		"""
		pass

	def getReferences(self,recursive=False, **kwds):
		"""
		Get objects this object references through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getSerializedAttributeValues(self):
		pass

	def getValue(self,attr):
		"""
		Return the attribute value for passed attribute name.
    
    Args:
      attr (String): Attribute name to gets its value.

    Returns:
      str: Returns the attribute value
    
		"""
		pass

	def isa(self,type=None, filter=None, name=None, wildcard=None, **kwds):
		"""
		Determines if the object matches the specified settings or not.
    
    Args:
      type (Union[Part, Assembly, Contact..]): The type of the object.
      filter (method): Return value of specified callback method.
      name (str): Name that matches exactly with object name.
      wildcard (str): A pattern to match exactly with the object name.
      **kwds : Additional keyword arguments to match other attributes.

    Returns:
      bool : True, if a match is found, otherwise False.
    
		"""
		pass

	@property
	def minBoundingBox(self):
		pass
	@minBoundingBox.setter
	def minBoundingBox(self):
		pass

	def modelPositions(self):
		"""
		Forces all objects to return the original model positions instead of the
    current analysis positions.

    Useful when defining draw methods on GeneralObjects where behaviour is 
    different while animating.
    
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	@property
	def parent(self):
		pass
	@parent.setter
	def parent(self):
		pass

	@property
	def parts(self):
		pass
	@parts.setter
	def parts(self):
		pass

	@property
	def primaryFeatures(self):
		pass
	@primaryFeatures.setter
	def primaryFeatures(self):
		pass

	@property
	def primaryPart(self):
		pass
	@primaryPart.setter
	def primaryPart(self):
		pass

	@property
	def searchDistance(self):
		pass
	@searchDistance.setter
	def searchDistance(self):
		pass

	@property
	def secondaryFeatures(self):
		pass
	@secondaryFeatures.setter
	def secondaryFeatures(self):
		pass

	@property
	def secondaryPart(self):
		pass
	@secondaryPart.setter
	def secondaryPart(self):
		pass

	def setResolution(self,resolution="Low"):
		"""
		Set the resolution of the contact.

    Args:
      resolution(str): Resolution of the contact. Valid values are-
        - Low
        - Medium
        - High
    
		"""
		pass

	def setValue(self,attr, value):
		"""
		Alias for setattr (attr, value)
    Args:
      attr (str): Attribute name to sets its value.
      value (str): Attribute value to set .
    
		"""
		pass

	def setValues(self,**kwds):
		"""
		Sets passed name/value pairs.
    
    Values are set in a standard order (the order the attribute is defined
    on the class) which is required in certain cases when an attribute's
    setter expects another attribute to have already been set.
    For example, setting a reference before a location that is wrt it.
    
    Args:
      **kwds: Set attributes in one go.
    
		"""
		pass

	@property
	def solver(self):
		pass
	@solver.setter
	def solver(self):
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

	def wasValueSet(self,attr):
		"""
		Check if attribute was set

    Args:
      attr (str): Attribute name to check it value set or not

    Returns:
      bool: True, if value was set else false.
    
		"""
		pass

class ContactInfo:
	def __init__(self):
		"""
Compute contact based joint information from the contacts features
  
"""
		pass

	def areAligned(self,cyls, planes):
		"""
		Returns true if all of the cylindrical feature axes and the planes are
    aligned
    Args:
      cyls (list[FeatureCylindrical]): List of cylindrical features to check
        aligned with other
      planes (list[FeaturePlanar]): List of planner features to check
        aligned with other
    
		"""
		pass

	def areCollinear(self,pt1, pt2, pt3):
		"""
		Returns true, if three points are collinear (lie in on the
    same straight line)

    Args:
      pt1 (Point, list, tuple): Point 1, to check collinear with other points
      pt2 (Point, list, tuple): Point 2, to check collinear with other points
      pt3 (Point, list, tuple): Point 3, to check collinear with other points
    
		"""
		pass

	def areCylindersCoaxial(self,cyl1, cyl2):
		"""
		Returns true, if two cylindrical features share a common axis

    Args:
      cyl1 (FeatureCylindrical): Cylindrical features 1, to check it axis
        coaxial with other 
      cyl2 (FeFeatureCylindricalature): Cylindrical features 1, to check it axis
        coaxial with other 
    
		"""
		pass

	def areParallel(self,cylinder, plane):
		"""
		Return true, if cylindrical feature axes and the planes are
    parallel

    Args:
      cylinder (list[FeatureCylindrical]): List of cylindrical features to check
        parallel with other
      plane (list[FeaturePlanar]): List of planner features to check parallel 
        with other
    
		"""
		pass

	def arePerpendicular(self,cylinder, plane):
		"""
		Return true, if a cylindar axis is perpendicular to a plane

    Args:
      cylinder (FeatureCylindrical): Cylindrical features to check perpendicular
        with other
      plane (FeaturePlanar): Planner to check perpendicular with other
    
		"""
		pass

	def getCylindricalAxes(self,primary, secondary):
		"""
		Return all cylindrical axes that exist between two list of features. The
    returned list is sorted in descending order by the maximum radius of the
    features defining the axes.
    Note: Aligned means that they share the same axis of rotation

    Args:
      primary (Feature, list[feature]): Feature list 1 to get same axis of 
        rotation with other
      secondary (Feature, list[feature]): Feature list 2 to get same axis of 
        rotation with other
    
		"""
		pass

	def getFillets(self,parts=None):
		"""
		Return list of features on input parts which represent fillets
    
    Args:
      part(Part, list[Part]): Model parts to find fillet features
    
		"""
		pass

	def getFilteredFeatures(self,features, featureType):
		"""
		Return the list feature of the specified type from the features list
    
    Args:
      features(Feature): List of feature to find match of feature type.
      featureType(str, cls.Feature): Feature type to filter the match 
        from features
     
		"""
		pass

	def getFirstFeature(self,features, featureType):
		"""
		Return the first feature of the specified type from the features list
    
    Args:
      features(Feature): List of feature to find first match of feature type.
      featureType(str, cls.Feature): Feature type to filter the first match 
        from features
     
		"""
		pass

	def getFromAlignedCylindricalPairs(self,contact, primary, secondary):
		"""
		Return joint information for contacts which have multiple
    cylindrical features that share a common axis
    
		"""
		pass

	def getFromAnyFeatures(self,contact, primary, secondary):
		"""
		Return joint information if the contact includes 1 or more
    features can be found in either the primary or secondary feature lists.

    This is a "catch all" used to create joints when the none of the
    existing heuristics succeed in finding a joint type.
    
		"""
		pass

	def getFromCylindricalPairs(self,contact, primary, secondary):
		"""
		Return joint information, if the contact includes one or more
    cylindrical features in each of the primary and secondary feature lists.
    
		"""
		pass

	def getFromMultiParallelPlanarPairs(self,contact, primary, secondary):
		"""
		Return joint information, if the contact includes multiple set
    of parallel planes between the primary and secondary feature lists.
    
		"""
		pass

	def getFromParallelPlanarPairs(self,contact, primary, secondary):
		"""
		Return joint information, if the contact includes one or more sets
    of parallel planes between the primary and secondary feature lists.

    Note that if multiple planar features are found in either of the primary
    or secondary feature sets, only one will be used for the axis calculation.
    
		"""
		pass

	def getFromSphericalPairs(self,contact, primary, secondary):
		"""
		Return joint information, if the contact includes a Spherical
    feature in both the primary and secondary feature lists.
    
		"""
		pass

	def getFromUnpairedCylinders(self,contact, primary, secondary):
		"""
		Return a joint information, if the contact includes one or more
    cylindrical features in only one of the primary and secondary feature lists
    
		"""
		pass

	def getInfo(self,contact):
		"""
		Return contact information based on the type of Contact found

    Args:
      contact (Contact): Contact object to find it info.

    Returns:
      dict: Returns below information about the contact
        The information contains:
          jointType   : The Joint.type
          keyFeatures : Classification of features determining allowed types
          location    : Point for the joint location
          axis        : List of Point along z axis
          state       : Locked, Active, Free
          why         : The heuristic method used
    
		"""
		pass

	def getInfos(self,contact):
		pass

	def getLongestHole(self,contact, axis):
		"""
		Return longest hole axis for given contact and axis.
    
    Args:
      contact(Contact): Contact object to find longest hole axis
      Axis((listPoint)): Axis on which the longest hole need to be found
    
		"""
		pass

	def getMultiPlanar(self,primary, secondary):
		"""
		Determine if the planar features in a contact can be realized as a
    translational joint.

    Args:
      primary (list, list[Feature]): Feature list 1, to find multi planar 
        with other
      secondary (list, list[Feature]): Feature list 1, to find multi planar 
        with other

    Returns:
      list :Returns a list with below information.
        bool     - Indicates whether a translational joint can be realized or not
        location - Location of the joint 
        axis     - Axis of the joint
        radius   - Circle encompassing planes
        bool     - Indicating if there are any non-aligned planes such that
                   the realized joint should be set to state=Fixed
        list    -  List of planes
    
		"""
		pass

	def getParallelPlanes(self,primary, secondary):
		"""
		Return a sorted list of parallel plane pairs between the primary and
    secondary feature lists.

    The returned list is sorted in descending order by the number of parallel
    planes found. The sorting is used to determine a best guess as to the
    axis of the resultant joint.

    Note that redundant parallel planes in both the primary and secondary
    lists are ignored

    Args:
      primary (list, list[Feature]): Feature list 1, to find parallel 
        with other
      secondary (list, list[Feature]): Feature list 2, to find parallel 
        with other
    
		"""
		pass

	def hasExtraFeatures(self,contact):
		"""
		Returns true if the contact references any features of type
    FeaturePlaner or FeatureAreaOther
    
    Args:
      contact(Contact): Contact object to find any features of type
        FeaturePlaner or FeatureAreaOther referenced
    
		"""
		pass

	@property
	def heuristicsMethods(self):
		pass
	@heuristicsMethods.setter
	def heuristicsMethods(self):
		pass

	def removeFilletFeatures(self,features):
		"""
		Return fillet free list of features.
    
    Args:
      features(list[Feature]): List of feature to remove fillets from it.
    
		"""
		pass

class ConvertToImplicit:
	def __init__(self,**kwds):
		"""
The Convert tool accepts geometry in BRep or surface mesh formats and
  converts into Altair's implicit geometry format. The output is typically a
  Signed Distance Field (SDF) for the converted geometry.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class Core:
	"""

The Inspire core data model.

"""
	pass

class Cos:
	def __init__(self,**kwds):
		"""
Implicit Trigonometry Cos operation.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class Create2D:
	def __init__(self,**kwds):
		"""
Implicit 2D Vector creation.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class Create3D:
	def __init__(self,**kwds):
		"""
Implicit 3D Vector creation.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class Create4D:
	def __init__(self,**kwds):
		"""
Implicit 4D Vector creation.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class Cross:
	def __init__(self,**kwds):
		"""
Implicit Cross Vector creation.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class Cuboid:
	def __init__(self,**kwds):
		"""
Create a Cuboid implicit body.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class CustomBounds:
	def __init__(self,**kwds):
		"""
Custom Bounds for custom implicit body.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class Cylinder:
	def __init__(self,**kwds):
		"""
Create a Cylindrical implicit body.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class Deprecated:
	def __init__(self,alias=None, cast=None, default=None):
		"""
Mark the existence of old/deprecated attributes.
"""
		pass

	def apply(self,**kwds):
		"""
		Context manager to specify Attribute constructor kwds
    Useful to avoid repeating kwds while defining a related group
    
		"""
		pass

	def castForGet(self,obj, value):
		"""
		Converts and returns the attribute value to its external type.

    Args:
      obj (GeneralObject): Object this attribute belongs to.
      value (Any): Value of the attribute to be converted.

    Returns:
      value (Any): Converted value.
    
		"""
		pass

	def castForSet(self,obj, value):
		"""
		Converts and validates the value of the attribute before setting.

      Converts the value it to its internal type (and base units if applicable).

    Args:
      obj (GeneralObject): Object this attribute belongs to.
      value (Any): Value of the attribute to set.

    Returns:
      value (Any): Validated and converted value.
    
		"""
		pass

	def classifyObject(self,obj):
		pass

	def createList(self,listAttr, obj):
		pass

	def createListList(self,listAttr, obj):
		pass

	def disable(self,obj):
		"""
		Called by GeneralObject when destroyed (or undo of a create)
		"""
		pass

	def enable(self,obj):
		"""
		Called by GeneralObject when created (or undo of a destroy)
		"""
		pass

	def getCreateArgs(self):
		"""
		Helper used in create methods
		"""
		pass

	def getDisplayName(self,obj):
		pass

	def getGuiValue(self,obj):
		"""
		Returns the formatted value, as shown in the Property Editor.
		"""
		pass

	def getInCoreValue(self,obj):
		pass

	def getReadonly(self,obj):
		pass

	def getUnits(self,obj):
		pass

	def getValue(self,obj):
		pass

	def getValueList(self,obj):
		pass

	def getValueListList(self,obj):
		pass

	def initialize(self,objCls, name):
		pass

	def loadValue(self,obj, value):
		"""
		Send value through the normal setattr process so that backwards compat
       can be handled in _castAttributeValue, setValue
    
		"""
		pass

	def populateGuiValue(self,obj, prop):
		"""
		Override to customize, prop.value, displayValue, allowedValues.
    
    The prop.value type determines which editor widget used:
    - bool -> checkbox
    - str  -> line edit
    - hwtypes.Color -> color picker
    
    Setting prop.allowedValues yields a ComboBox.
    
    prop.displayValue is a str shown when the editor loses focus.
    
		"""
		pass

	def populatePropertyEditor(self,obj, prop, **kwds):
		"""
		Customize how attribute appears in Property Editor and ObjectTables.
    
    Args:
      obj (GeneralObject)
      prop (hwt::Property): Property Editor interface.
      component (int): 0, 1, 2
        Only passed when showing Triples 1 value at a time.
    
		"""
		pass

	def setInCoreValue(self,obj, value):
		pass

	def setValue(self,obj, value):
		pass

	def setValueList(self,obj, value):
		pass

	def setValueListList(self,obj, value):
		pass

	def usingUnits(self,units):
		pass

class DeprecatedGeneralObject:
	def __init__(self,*args, **kwds):
		"""
Base class for GeneralObjects that don't exist anymore

     __init__ / _loadAttributeValues can be overloaded to forward the attributes

     The object isn't added to the model so it isn't accessible after creation
  
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	def destroy(self):
		"""
		Delete the object removing it from the model.
    
    The object may come back due to an undo/redo.
    
		"""
		pass

	def getAllChildren(self,type=None, **kwds):
		"""
		Returns a list of all children that matches the specified type.

    Args:
      type (list[Named]): Filter to use to get the children based on object type.
      **kwds : Additional keyword arguments to match other attributes of the object.

    Returns:
      list[Union[Part, Motor, BoundaryCondition, ...]]: The list of children that satisfy the supplied filters.
    
		"""
		pass

	def getAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value.

    Args:
      name (str): Attribute name to find its class.
    
		"""
		pass

	def getAttributes(self,type=None, **kwds):
		"""
		Return an dict of the attributes.
    Pass type and kwds to filter by type and Attribute properties

    Args:
      type (type): Filters the attribute based on type
      **kwds : Additional kwds argument to filter attribute by its properties

    Returns:
      dict: Return an OrderedDict of the attributes
    
		"""
		pass

	def getChild(self,name=None, recursive=False, **kwds):
		"""
		Returns the child of the object which matches the specified unique name.

    Args:
      name (str): The name of the child object.
      recursive (bool):  Search all descendents.
      **kwds : Additional keyword arguments to match attributes of the object.

    Returns:
      Named: The child object which satisfies the specified filters.
    
		"""
		pass

	def getChildren(self,type=None, recursive=False, sorted=False, **kwds):
		"""
		Returns a list of children that is of the specified type.

    Args:
      type (Type[Named]): Filter objects by class.
      recursive (bool): True to get all descendent Parts and Assemblies.
      sorted (bool): Sort the children base on id.

    Returns:
      list[Named]
    
		"""
		pass

	def getClass(self,className):
		"""
		Returns the class of the object.
    
    It can be simple or qualified (with namespace). If the name is simple, we 
    prepend the cls.namespace.

    Args:
      className (Union[Part, Occurrence, Named..]) : The class name. 
     
    Returns:
      Union[Part, Occurrence, Named..] : The class for the specified className. 

    
		"""
		pass

	def getClassAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value

    Args:
      name (str): Name of the attribute
    
		"""
		pass

	def getDependents(self,recursive=False, **kwds):
		"""
		Get objects that reference this object through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getGuiValue(self,attr, **kwds):
		"""
		Get value formatted to be shown in the gui

    Args:
      attr (str): Attribute name to gets its gui value.

    Returns:
      str: Returns a string of the value with its gui units, like "5 mm/s".
    
		"""
		pass

	def getIcon(self):
		"""
		Specifies the icon used to display in Model Browser, Object Tables etc
		"""
		pass

	def getReferences(self,recursive=False, **kwds):
		"""
		Get objects this object references through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getSerializedAttributeValues(self):
		pass

	def getValue(self,attr):
		"""
		Return the attribute value for passed attribute name.
    
    Args:
      attr (String): Attribute name to gets its value.

    Returns:
      str: Returns the attribute value
    
		"""
		pass

	@property
	def inbrowser(self):
		pass
	@inbrowser.setter
	def inbrowser(self):
		pass

	def isa(self,type=None, filter=None, name=None, wildcard=None, **kwds):
		"""
		Determines if the object matches the specified settings or not.
    
    Args:
      type (Union[Part, Assembly, Contact..]): The type of the object.
      filter (method): Return value of specified callback method.
      name (str): Name that matches exactly with object name.
      wildcard (str): A pattern to match exactly with the object name.
      **kwds : Additional keyword arguments to match other attributes.

    Returns:
      bool : True, if a match is found, otherwise False.
    
		"""
		pass

	def modelPositions(self):
		"""
		Forces all objects to return the original model positions instead of the
    current analysis positions.

    Useful when defining draw methods on GeneralObjects where behaviour is 
    different while animating.
    
		"""
		pass

	@property
	def movable(self):
		pass
	@movable.setter
	def movable(self):
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	@property
	def parent(self):
		pass
	@parent.setter
	def parent(self):
		pass

	@property
	def redrawWhenUnitsChanged(self):
		pass
	@redrawWhenUnitsChanged.setter
	def redrawWhenUnitsChanged(self):
		pass

	def requireRedraw(self):
		"""
		Marks the object that needs to be redrawn in the graphics window.
    
		"""
		pass

	def setValue(self,attr, value):
		"""
		Alias for setattr (attr, value)
    Args:
      attr (str): Attribute name to sets its value.
      value (str): Attribute value to set .
    
		"""
		pass

	def setValues(self,**kwds):
		"""
		Sets passed name/value pairs.
    
    Values are set in a standard order (the order the attribute is defined
    on the class) which is required in certain cases when an attribute's
    setter expects another attribute to have already been set.
    For example, setting a reference before a location that is wrt it.
    
    Args:
      **kwds: Set attributes in one go.
    
		"""
		pass

	@property
	def suppressible(self):
		pass
	@suppressible.setter
	def suppressible(self):
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

	def wasValueSet(self,attr):
		"""
		Check if attribute was set

    Args:
      attr (str): Attribute name to check it value set or not

    Returns:
      bool: True, if value was set else false.
    
		"""
		pass

class Difference:
	def __init__(self,**kwds):
		"""
The Difference tool is used to cut 'tool' implicit bodies from 'target'
  implicit bodies. This tool creates a new implicit body that envelopes any
  volume that falls within any target but NOT within any tools. It is
  equivalent to a logical NOT / negation.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class Direction:
	def __init__(self,default=(0, 0, 1), **kwds):
		"""
Specify a direction relative to another entity.
  
  Directions are get or set in global coordinates.

  Directional components are [x,y,z].
  
  Directions are not normalized, this is required to match Inspire
  behaviour of showing non normalized directions in Property Editor.
  
"""
		pass

	def OnAttributeModify(self,obj, attr, *args):
		pass

	def activateListener(self,obj):
		"""
		Listen to referenced object for any changes.
		"""
		pass

	def apply(self,**kwds):
		"""
		Context manager to specify Attribute constructor kwds
    Useful to avoid repeating kwds while defining a related group
    
		"""
		pass

	def castForGet(self,obj, value):
		"""
		Converts and returns the attribute value to its external type.

    Args:
      obj (GeneralObject): Object this attribute belongs to.
      value (Any): Value of the attribute to be converted.

    Returns:
      value (Any): Converted value.
    
		"""
		pass

	def castForSet(self,obj, value):
		pass

	def classifyObject(self,obj):
		pass

	def create(self,obj):
		pass

	def createList(self,listAttr, obj):
		pass

	def createListList(self,listAttr, obj):
		pass

	def deactivateListener(self,obj):
		"""
		Stop listening to referenced objects.
		"""
		pass

	def disable(self,obj):
		pass

	def enable(self,obj):
		pass

	def getCreateArgs(self):
		"""
		Helper used in create methods
		"""
		pass

	def getDisplayName(self,obj):
		pass

	def getGuiValue(self,obj, component=None, **kwds):
		pass

	def getInCoreValue(self,obj):
		pass

	def getReadonly(self,obj):
		pass

	def getReferenceFrame(self,obj):
		"""
		Get Matrix44 from referenced object in base units.
		"""
		pass

	def getUnits(self,obj):
		pass

	def getValue(self,obj):
		pass

	def getValueList(self,obj):
		pass

	def getValueListList(self,obj):
		pass

	def getWrt(self,obj):
		"""
		Get object this attribute is relative to.
		"""
		pass

	def initialize(self,objCls, name):
		"""
		Initializes the attribute.

    Args:
      objCls (class): Object class this attribute belongs to.
      name (str): Name of the attribute.
    
		"""
		pass

	def loadValue(self,obj, value):
		pass

	def populateGuiValue(self,obj, prop, component=None):
		pass

	def populatePropertyEditor(self,obj, prop, **kwds):
		"""
		Customize how attribute appears in Property Editor and ObjectTables.
    
    Args:
      obj (GeneralObject)
      prop (hwt::Property): Property Editor interface.
      component (int): 0, 1, 2
        Only passed when showing Triples 1 value at a time.
    
		"""
		pass

	def setInCoreValue(self,obj, value):
		pass

	def setValue(self,obj, value):
		pass

	def setValueList(self,obj, value):
		pass

	def setValueListList(self,obj, value):
		pass

	def toGlobal(self,obj, value):
		pass

	def toLocal(self,obj, value):
		pass

	def usingUnits(self,units):
		pass

class DisplacementConstraint:
	def __init__(self,features, location=None, upperBound=0.01, lowerBound=-0.01,name: str="", isRemote=False, **kwds):
		"""
Displacement constraints can be applied to a model to limit deflections in
  desired locations and directions.
  
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	@property
	def boundDirection(self):
		pass
	@boundDirection.setter
	def boundDirection(self):
		pass

	@property
	def color(self):
		pass
	@color.setter
	def color(self):
		pass

	@property
	def connectionRadius(self):
		pass
	@connectionRadius.setter
	def connectionRadius(self):
		pass

	@property
	def connectionType(self):
		pass
	@connectionType.setter
	def connectionType(self):
		pass

	def destroy(self):
		"""
		Delete the object removing it from the model.
    
    The object may come back due to an undo/redo.
    
		"""
		pass

	@property
	def direction(self):
		pass
	@direction.setter
	def direction(self):
		pass

	@property
	def distributed(self):
		pass
	@distributed.setter
	def distributed(self):
		pass

	@property
	def feature(self):
		pass
	@feature.setter
	def feature(self):
		pass

	@property
	def features(self):
		pass
	@features.setter
	def features(self):
		pass

	def getAllChildren(self,type=None, **kwds):
		"""
		Returns a list of all children that matches the specified type.

    Args:
      type (list[Named]): Filter to use to get the children based on object type.
      **kwds : Additional keyword arguments to match other attributes of the object.

    Returns:
      list[Union[Part, Motor, BoundaryCondition, ...]]: The list of children that satisfy the supplied filters.
    
		"""
		pass

	def getAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value.

    Args:
      name (str): Attribute name to find its class.
    
		"""
		pass

	def getAttributes(self,type=None, **kwds):
		"""
		Return an dict of the attributes.
    Pass type and kwds to filter by type and Attribute properties

    Args:
      type (type): Filters the attribute based on type
      **kwds : Additional kwds argument to filter attribute by its properties

    Returns:
      dict: Return an OrderedDict of the attributes
    
		"""
		pass

	def getChild(self,name=None, recursive=False, **kwds):
		"""
		Returns the child of the object which matches the specified unique name.

    Args:
      name (str): The name of the child object.
      recursive (bool):  Search all descendents.
      **kwds : Additional keyword arguments to match attributes of the object.

    Returns:
      Named: The child object which satisfies the specified filters.
    
		"""
		pass

	def getChildren(self,type=None, recursive=False, sorted=False, **kwds):
		"""
		Returns a list of children that is of the specified type.

    Args:
      type (Type[Named]): Filter objects by class.
      recursive (bool): True to get all descendent Parts and Assemblies.
      sorted (bool): Sort the children base on id.

    Returns:
      list[Named]
    
		"""
		pass

	def getClass(self,className):
		"""
		Returns the class of the object.
    
    It can be simple or qualified (with namespace). If the name is simple, we 
    prepend the cls.namespace.

    Args:
      className (Union[Part, Occurrence, Named..]) : The class name. 
     
    Returns:
      Union[Part, Occurrence, Named..] : The class for the specified className. 

    
		"""
		pass

	def getClassAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value

    Args:
      name (str): Name of the attribute
    
		"""
		pass

	def getDependents(self,recursive=False, **kwds):
		"""
		Get objects that reference this object through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getGuiAttributeNames(self):
		"""
		Return list of the attribute names that are in the gui

    Returns:
      list: Returns list of active gui attribute
    
		"""
		pass

	def getGuiValue(self,attr, **kwds):
		"""
		Get value formatted to be shown in the gui

    Args:
      attr (str): Attribute name to gets its gui value.

    Returns:
      str: Returns a string of the value with its gui units, like "5 mm/s".
    
		"""
		pass

	def getReferences(self,recursive=False, **kwds):
		"""
		Get objects this object references through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getSerializedAttributeValues(self):
		pass

	def getValue(self,attr):
		"""
		Return the attribute value for passed attribute name.
    
    Args:
      attr (String): Attribute name to gets its value.

    Returns:
      str: Returns the attribute value
    
		"""
		pass

	@property
	def hasLowerBound(self):
		pass
	@hasLowerBound.setter
	def hasLowerBound(self):
		pass

	@property
	def hasUpperBound(self):
		pass
	@hasUpperBound.setter
	def hasUpperBound(self):
		pass

	def importLoads(self,csvFile):
		"""
		Imports boundary conditions to the active model from a csv file.

    Args:
      csvFile(str) : Csv file name containing all the BC information.

    Returns:
      list: List of error msgs that happened during import of all the boundary conditions.
    
		"""
		pass

	@property
	def inahole(self):
		pass
	@inahole.setter
	def inahole(self):
		pass

	def isa(self,type=None, filter=None, name=None, wildcard=None, **kwds):
		"""
		Determines if the object matches the specified settings or not.
    
    Args:
      type (Union[Part, Assembly, Contact..]): The type of the object.
      filter (method): Return value of specified callback method.
      name (str): Name that matches exactly with object name.
      wildcard (str): A pattern to match exactly with the object name.
      **kwds : Additional keyword arguments to match other attributes.

    Returns:
      bool : True, if a match is found, otherwise False.
    
		"""
		pass

	@property
	def loadCase(self):
		pass
	@loadCase.setter
	def loadCase(self):
		pass

	@property
	def localToPart(self):
		pass
	@localToPart.setter
	def localToPart(self):
		pass

	@property
	def location(self):
		pass
	@location.setter
	def location(self):
		pass

	@property
	def lowerBound(self):
		pass
	@lowerBound.setter
	def lowerBound(self):
		pass

	@property
	def mode(self):
		pass
	@mode.setter
	def mode(self):
		pass

	def modelPositions(self):
		"""
		Forces all objects to return the original model positions instead of the
    current analysis positions.

    Useful when defining draw methods on GeneralObjects where behaviour is 
    different while animating.
    
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	@property
	def parent(self):
		pass
	@parent.setter
	def parent(self):
		pass

	@property
	def part(self):
		pass
	@part.setter
	def part(self):
		pass

	@property
	def parts(self):
		pass
	@parts.setter
	def parts(self):
		pass

	@property
	def position(self):
		pass
	@position.setter
	def position(self):
		pass

	def setSystem(self,system):
		"""
		Associate system to a boundary condition.

    Args:
      system (System): System tp associate with boundary condition.
    
		"""
		pass

	def setValue(self,attr, value):
		"""
		Alias for setattr (attr, value)
    Args:
      attr (str): Attribute name to sets its value.
      value (str): Attribute value to set .
    
		"""
		pass

	def setValues(self,**kwds):
		"""
		Sets passed name/value pairs.
    
    Values are set in a standard order (the order the attribute is defined
    on the class) which is required in certain cases when an attribute's
    setter expects another attribute to have already been set.
    For example, setting a reference before a location that is wrt it.
    
    Args:
      **kwds: Set attributes in one go.
    
		"""
		pass

	def updatePosition(self,m44):
		"""
		Update the position by multiplying input M44 matrix.
		"""
		pass

	@property
	def upperBound(self):
		pass
	@upperBound.setter
	def upperBound(self):
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

	def wasValueSet(self,attr):
		"""
		Check if attribute was set

    Args:
      attr (str): Attribute name to check it value set or not

    Returns:
      bool: True, if value was set else false.
    
		"""
		pass

class Distance:
	def __init__(self,**kwds):
		"""
Implicit Distance Vector creation.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class Divide:
	def __init__(self,**kwds):
		"""
Implicit Divide operation.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class Dot:
	def __init__(self,**kwds):
		"""
Implicit Dot Vector creation.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class Double:
	def __init__(self,default="0",doc: str="", **kwds):
		"""
Store float value with units.

  Units can be None, length, mass, force, ...

  Values are get/set in base units unless under inspire.usingUnits(...).

  A value's units can be specified using a string like: "5 mm".
  
"""
		pass

	def apply(self,**kwds):
		"""
		Context manager to specify Attribute constructor kwds
    Useful to avoid repeating kwds while defining a related group
    
		"""
		pass

	def castForGet(self,obj, value):
		"""
		Converts and returns the attribute value to its external type.

    Args:
      obj (GeneralObject): Object this attribute belongs to.
      value (Any): Value of the attribute to be converted.

    Returns:
      value (Any): Converted value.
    
		"""
		pass

	def castForSet(self,obj, value):
		pass

	def classifyObject(self,obj):
		pass

	def create(self,obj):
		pass

	def createList(self,listAttr, obj):
		pass

	def createListList(self,listAttr, obj):
		pass

	def disable(self,obj):
		"""
		Called by GeneralObject when destroyed (or undo of a create)
		"""
		pass

	def enable(self,obj):
		"""
		Called by GeneralObject when created (or undo of a destroy)
		"""
		pass

	def getCreateArgs(self):
		"""
		Helper used in create methods
		"""
		pass

	def getDisplayName(self,obj):
		pass

	def getGuiValue(self,obj, format="modeling"):
		pass

	def getInCoreValue(self,obj):
		pass

	def getReadonly(self,obj):
		pass

	def getUnits(self,obj):
		pass

	def getValue(self,obj):
		pass

	def getValueList(self,obj):
		pass

	def getValueListList(self,obj):
		pass

	def initialize(self,objCls, name):
		"""
		Initializes the attribute.

    Args:
      objCls (class): Object class this attribute belongs to.
      name (str): Name of the attribute.
    
		"""
		pass

	def loadValue(self,obj, value):
		"""
		Called by GeneralObject.loadAttributeValues during stmod deserialization
		"""
		pass

	def populateGuiValue(self,obj, prop):
		pass

	def populatePropertyEditor(self,obj, prop, **kwds):
		"""
		Customize how attribute appears in Property Editor and ObjectTables.
    
    Args:
      obj (GeneralObject)
      prop (hwt::Property): Property Editor interface.
      component (int): 0, 1, 2
        Only passed when showing Triples 1 value at a time.
    
		"""
		pass

	def setInCoreValue(self,obj, value):
		pass

	def setValue(self,obj, value):
		pass

	def setValueList(self,obj, value):
		pass

	def setValueListList(self,obj, value):
		pass

	def usingUnits(self,units):
		pass

class DrawDirection:
	def __init__(self,part, direction=(0, 0, 1), **kwds):
		"""
Draw Directions Shape Control.

  Draw directions are used to ensure that a design space can be physically 
  manufactured using a specific process such as casting, stamping, or extrusion.
  Draw directions are a type of shape control. 
  
  If you intend for a part to be manufactured by casting it or stamping it, 
  the optimized shape must allow the two halves of the mold or the stamping dies 
  to separate after the part is formed. Negative draft angles must be avoided. 
  You can generate shapes that can be molded or stamped by indicating a draw 
  direction, which is the plane where the two halves of the mold are pulled apart.

  Only one type of draw direction can be applied to a design space. 
  Draw directions are valid for optimization but not analysis.
  
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	@property
	def activePlane(self):
		pass
	@activePlane.setter
	def activePlane(self):
		pass

	@property
	def color(self):
		pass
	@color.setter
	def color(self):
		pass

	@property
	def connectionRadius(self):
		pass
	@connectionRadius.setter
	def connectionRadius(self):
		pass

	@property
	def connectionType(self):
		pass
	@connectionType.setter
	def connectionType(self):
		pass

	def destroy(self):
		"""
		Delete the object removing it from the model.
    
    The object may come back due to an undo/redo.
    
		"""
		pass

	@property
	def direction(self):
		pass
	@direction.setter
	def direction(self):
		pass

	@property
	def distributed(self):
		pass
	@distributed.setter
	def distributed(self):
		pass

	@property
	def feature(self):
		pass
	@feature.setter
	def feature(self):
		pass

	@property
	def features(self):
		pass
	@features.setter
	def features(self):
		pass

	def getAllChildren(self,type=None, **kwds):
		"""
		Returns a list of all children that matches the specified type.

    Args:
      type (list[Named]): Filter to use to get the children based on object type.
      **kwds : Additional keyword arguments to match other attributes of the object.

    Returns:
      list[Union[Part, Motor, BoundaryCondition, ...]]: The list of children that satisfy the supplied filters.
    
		"""
		pass

	def getAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value.

    Args:
      name (str): Attribute name to find its class.
    
		"""
		pass

	def getAttributes(self,type=None, **kwds):
		"""
		Return an dict of the attributes.
    Pass type and kwds to filter by type and Attribute properties

    Args:
      type (type): Filters the attribute based on type
      **kwds : Additional kwds argument to filter attribute by its properties

    Returns:
      dict: Return an OrderedDict of the attributes
    
		"""
		pass

	def getChild(self,name=None, recursive=False, **kwds):
		"""
		Returns the child of the object which matches the specified unique name.

    Args:
      name (str): The name of the child object.
      recursive (bool):  Search all descendents.
      **kwds : Additional keyword arguments to match attributes of the object.

    Returns:
      Named: The child object which satisfies the specified filters.
    
		"""
		pass

	def getChildren(self,type=None, recursive=False, sorted=False, **kwds):
		"""
		Returns a list of children that is of the specified type.

    Args:
      type (Type[Named]): Filter objects by class.
      recursive (bool): True to get all descendent Parts and Assemblies.
      sorted (bool): Sort the children base on id.

    Returns:
      list[Named]
    
		"""
		pass

	def getClass(self,className):
		"""
		Returns the class of the object.
    
    It can be simple or qualified (with namespace). If the name is simple, we 
    prepend the cls.namespace.

    Args:
      className (Union[Part, Occurrence, Named..]) : The class name. 
     
    Returns:
      Union[Part, Occurrence, Named..] : The class for the specified className. 

    
		"""
		pass

	def getClassAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value

    Args:
      name (str): Name of the attribute
    
		"""
		pass

	def getDependents(self,recursive=False, **kwds):
		"""
		Get objects that reference this object through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getGuiAttributeNames(self):
		"""
		Return list of the attribute names that are in the gui

    Returns:
      list: Returns list of active gui attribute
    
		"""
		pass

	def getGuiValue(self,attr, **kwds):
		"""
		Get value formatted to be shown in the gui

    Args:
      attr (str): Attribute name to gets its gui value.

    Returns:
      str: Returns a string of the value with its gui units, like "5 mm/s".
    
		"""
		pass

	def getReferences(self,recursive=False, **kwds):
		"""
		Get objects this object references through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getSerializedAttributeValues(self):
		pass

	def getValue(self,attr):
		"""
		Return the attribute value for passed attribute name.
    
    Args:
      attr (String): Attribute name to gets its value.

    Returns:
      str: Returns the attribute value
    
		"""
		pass

	def importLoads(self,csvFile):
		"""
		Imports boundary conditions to the active model from a csv file.

    Args:
      csvFile(str) : Csv file name containing all the BC information.

    Returns:
      list: List of error msgs that happened during import of all the boundary conditions.
    
		"""
		pass

	@property
	def inahole(self):
		pass
	@inahole.setter
	def inahole(self):
		pass

	def isa(self,type=None, filter=None, name=None, wildcard=None, **kwds):
		"""
		Determines if the object matches the specified settings or not.
    
    Args:
      type (Union[Part, Assembly, Contact..]): The type of the object.
      filter (method): Return value of specified callback method.
      name (str): Name that matches exactly with object name.
      wildcard (str): A pattern to match exactly with the object name.
      **kwds : Additional keyword arguments to match other attributes.

    Returns:
      bool : True, if a match is found, otherwise False.
    
		"""
		pass

	@property
	def loadCase(self):
		pass
	@loadCase.setter
	def loadCase(self):
		pass

	@property
	def localToPart(self):
		pass
	@localToPart.setter
	def localToPart(self):
		pass

	@property
	def location(self):
		pass
	@location.setter
	def location(self):
		pass

	@property
	def method(self):
		pass
	@method.setter
	def method(self):
		pass

	@property
	def millingAccessDepth(self):
		pass
	@millingAccessDepth.setter
	def millingAccessDepth(self):
		pass

	@property
	def millingAccessRadius(self):
		pass
	@millingAccessRadius.setter
	def millingAccessRadius(self):
		pass

	@property
	def millingClampRadius(self):
		pass
	@millingClampRadius.setter
	def millingClampRadius(self):
		pass

	@property
	def millingConType(self):
		pass
	@millingConType.setter
	def millingConType(self):
		pass

	@property
	def millingToolLength(self):
		pass
	@millingToolLength.setter
	def millingToolLength(self):
		pass

	@property
	def millingToolRadius(self):
		pass
	@millingToolRadius.setter
	def millingToolRadius(self):
		pass

	@property
	def mode(self):
		pass
	@mode.setter
	def mode(self):
		pass

	def modelPositions(self):
		"""
		Forces all objects to return the original model positions instead of the
    current analysis positions.

    Useful when defining draw methods on GeneralObjects where behaviour is 
    different while animating.
    
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	@property
	def parent(self):
		pass
	@parent.setter
	def parent(self):
		pass

	@property
	def part(self):
		pass
	@part.setter
	def part(self):
		pass

	@property
	def parts(self):
		pass
	@parts.setter
	def parts(self):
		pass

	def setSystem(self,system):
		"""
		Associate system to a boundary condition.

    Args:
      system (System): System tp associate with boundary condition.
    
		"""
		pass

	def setValue(self,attr, value):
		"""
		Alias for setattr (attr, value)
    Args:
      attr (str): Attribute name to sets its value.
      value (str): Attribute value to set .
    
		"""
		pass

	def setValues(self,**kwds):
		"""
		Sets passed name/value pairs.
    
    Values are set in a standard order (the order the attribute is defined
    on the class) which is required in certain cases when an attribute's
    setter expects another attribute to have already been set.
    For example, setting a reference before a location that is wrt it.
    
    Args:
      **kwds: Set attributes in one go.
    
		"""
		pass

	@property
	def type(self):
		pass
	@type.setter
	def type(self):
		pass

	def updatePosition(self,m44):
		"""
		Sets the design space positions of all the inspire parts to their 
    position in the current analysis frame.    
    
		"""
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

	def wasValueSet(self,attr):
		"""
		Check if attribute was set

    Args:
      attr (str): Attribute name to check it value set or not

    Returns:
      bool: True, if value was set else false.
    
		"""
		pass

class DummyInit:
	def __init__(self):
		"""
<property object at 0x0000020F55E19D10>
"""
		pass

def DumpDebugInfoByNames(namedNames, debugType, fileNameWithPath, recursive=False):
	pass

def DumpDebugInfoByObjs(namedEnts, debugType, fileNameWithPath, recursive=False):
	pass

def DumpModelFEQAInfo(model, criteriaType, fileNameWithPath, feQAInfo):
	pass

class E:
	def __init__(self,**kwds):
		"""
Implicit Euler's number.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class EnforcedDisplacement:
	def __init__(self,features, location=None, direction=None, magnitude=0.001,name: str="", isRemote=False, **kwds):
		"""
 Create enforced displacement on supplied features.
  
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	@property
	def color(self):
		pass
	@color.setter
	def color(self):
		pass

	@property
	def connectionRadius(self):
		pass
	@connectionRadius.setter
	def connectionRadius(self):
		pass

	@property
	def connectionType(self):
		pass
	@connectionType.setter
	def connectionType(self):
		pass

	def destroy(self):
		"""
		Delete the object removing it from the model.
    
    The object may come back due to an undo/redo.
    
		"""
		pass

	@property
	def direction(self):
		pass
	@direction.setter
	def direction(self):
		pass

	@property
	def distributed(self):
		pass
	@distributed.setter
	def distributed(self):
		pass

	@property
	def feature(self):
		pass
	@feature.setter
	def feature(self):
		pass

	@property
	def features(self):
		pass
	@features.setter
	def features(self):
		pass

	def getAllChildren(self,type=None, **kwds):
		"""
		Returns a list of all children that matches the specified type.

    Args:
      type (list[Named]): Filter to use to get the children based on object type.
      **kwds : Additional keyword arguments to match other attributes of the object.

    Returns:
      list[Union[Part, Motor, BoundaryCondition, ...]]: The list of children that satisfy the supplied filters.
    
		"""
		pass

	def getAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value.

    Args:
      name (str): Attribute name to find its class.
    
		"""
		pass

	def getAttributes(self,type=None, **kwds):
		"""
		Return an dict of the attributes.
    Pass type and kwds to filter by type and Attribute properties

    Args:
      type (type): Filters the attribute based on type
      **kwds : Additional kwds argument to filter attribute by its properties

    Returns:
      dict: Return an OrderedDict of the attributes
    
		"""
		pass

	def getChild(self,name=None, recursive=False, **kwds):
		"""
		Returns the child of the object which matches the specified unique name.

    Args:
      name (str): The name of the child object.
      recursive (bool):  Search all descendents.
      **kwds : Additional keyword arguments to match attributes of the object.

    Returns:
      Named: The child object which satisfies the specified filters.
    
		"""
		pass

	def getChildren(self,type=None, recursive=False, sorted=False, **kwds):
		"""
		Returns a list of children that is of the specified type.

    Args:
      type (Type[Named]): Filter objects by class.
      recursive (bool): True to get all descendent Parts and Assemblies.
      sorted (bool): Sort the children base on id.

    Returns:
      list[Named]
    
		"""
		pass

	def getClass(self,className):
		"""
		Returns the class of the object.
    
    It can be simple or qualified (with namespace). If the name is simple, we 
    prepend the cls.namespace.

    Args:
      className (Union[Part, Occurrence, Named..]) : The class name. 
     
    Returns:
      Union[Part, Occurrence, Named..] : The class for the specified className. 

    
		"""
		pass

	def getClassAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value

    Args:
      name (str): Name of the attribute
    
		"""
		pass

	def getDependents(self,recursive=False, **kwds):
		"""
		Get objects that reference this object through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getGuiAttributeNames(self):
		"""
		Return list of the attribute names that are in the gui

    Returns:
      list: Returns list of active gui attribute
    
		"""
		pass

	def getGuiValue(self,attr, **kwds):
		"""
		Get value formatted to be shown in the gui

    Args:
      attr (str): Attribute name to gets its gui value.

    Returns:
      str: Returns a string of the value with its gui units, like "5 mm/s".
    
		"""
		pass

	def getReferences(self,recursive=False, **kwds):
		"""
		Get objects this object references through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getSerializedAttributeValues(self):
		pass

	def getValue(self,attr):
		"""
		Return the attribute value for passed attribute name.
    
    Args:
      attr (String): Attribute name to gets its value.

    Returns:
      str: Returns the attribute value
    
		"""
		pass

	def importLoads(self,csvFile):
		"""
		Imports boundary conditions to the active model from a csv file.

    Args:
      csvFile(str) : Csv file name containing all the BC information.

    Returns:
      list: List of error msgs that happened during import of all the boundary conditions.
    
		"""
		pass

	@property
	def inahole(self):
		pass
	@inahole.setter
	def inahole(self):
		pass

	def isa(self,type=None, filter=None, name=None, wildcard=None, **kwds):
		"""
		Determines if the object matches the specified settings or not.
    
    Args:
      type (Union[Part, Assembly, Contact..]): The type of the object.
      filter (method): Return value of specified callback method.
      name (str): Name that matches exactly with object name.
      wildcard (str): A pattern to match exactly with the object name.
      **kwds : Additional keyword arguments to match other attributes.

    Returns:
      bool : True, if a match is found, otherwise False.
    
		"""
		pass

	@property
	def loadCase(self):
		pass
	@loadCase.setter
	def loadCase(self):
		pass

	@property
	def localToPart(self):
		pass
	@localToPart.setter
	def localToPart(self):
		pass

	@property
	def location(self):
		pass
	@location.setter
	def location(self):
		pass

	@property
	def magnitude(self):
		pass
	@magnitude.setter
	def magnitude(self):
		pass

	@property
	def mode(self):
		pass
	@mode.setter
	def mode(self):
		pass

	def modelPositions(self):
		"""
		Forces all objects to return the original model positions instead of the
    current analysis positions.

    Useful when defining draw methods on GeneralObjects where behaviour is 
    different while animating.
    
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	@property
	def parent(self):
		pass
	@parent.setter
	def parent(self):
		pass

	@property
	def part(self):
		pass
	@part.setter
	def part(self):
		pass

	@property
	def parts(self):
		pass
	@parts.setter
	def parts(self):
		pass

	def setSystem(self,system):
		"""
		Associate system to a boundary condition.

    Args:
      system (System): System tp associate with boundary condition.
    
		"""
		pass

	def setValue(self,attr, value):
		"""
		Alias for setattr (attr, value)
    Args:
      attr (str): Attribute name to sets its value.
      value (str): Attribute value to set .
    
		"""
		pass

	def setValues(self,**kwds):
		"""
		Sets passed name/value pairs.
    
    Values are set in a standard order (the order the attribute is defined
    on the class) which is required in certain cases when an attribute's
    setter expects another attribute to have already been set.
    For example, setting a reference before a location that is wrt it.
    
    Args:
      **kwds: Set attributes in one go.
    
		"""
		pass

	def updatePosition(self,m44):
		"""
		Update the position by multiplying input M44 matrix.
		"""
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

	def wasValueSet(self,attr):
		"""
		Check if attribute was set

    Args:
      attr (str): Attribute name to check it value set or not

    Returns:
      bool: True, if value was set else false.
    
		"""
		pass

class Enum:
	def __init__(self,values, default="0",doc: str="", **kwds):
		"""
Store a string with a predefined list of allowed values and labels
"""
		pass

	def apply(self,**kwds):
		"""
		Context manager to specify Attribute constructor kwds
    Useful to avoid repeating kwds while defining a related group
    
		"""
		pass

	def castForGet(self,obj, value):
		pass

	def castForSet(self,obj, value):
		pass

	def classifyObject(self,obj):
		pass

	def create(self,obj):
		"""
		Creates an enum attribute for the specified object.
		"""
		pass

	def createList(self,listAttr, obj):
		pass

	def createListList(self,listAttr, obj):
		pass

	def disable(self,obj):
		"""
		Called by GeneralObject when destroyed (or undo of a create)
		"""
		pass

	def enable(self,obj):
		"""
		Called by GeneralObject when created (or undo of a destroy)
		"""
		pass

	def getCreateArgs(self):
		"""
		Helper used in create methods
		"""
		pass

	def getDisplayName(self,obj):
		pass

	def getDisplayNames(self,obj):
		pass

	def getGuiValue(self,obj):
		pass

	def getInCoreValue(self,obj):
		pass

	def getReadonly(self,obj):
		pass

	def getUnits(self,obj):
		pass

	def getValue(self,obj):
		pass

	def getValueFromDisplayName(self,obj, displayName):
		pass

	def getValueList(self,obj):
		pass

	def getValueListList(self,obj):
		pass

	def getValues(self,obj):
		pass

	def getValuesAndDisplayNames(self,obj, valuesOnly=False):
		pass

	def initialize(self,objCls, name):
		"""
		Initializes the attribute.

    Args:
      objCls (class): Object class this attribute belongs to.
      name (str): Name of the attribute.
    
		"""
		pass

	def loadValue(self,obj, value):
		pass

	def populateGuiValue(self,obj, prop):
		pass

	def populatePropertyEditor(self,obj, prop, **kwds):
		"""
		Customize how attribute appears in Property Editor and ObjectTables.
    
    Args:
      obj (GeneralObject)
      prop (hwt::Property): Property Editor interface.
      component (int): 0, 1, 2
        Only passed when showing Triples 1 value at a time.
    
		"""
		pass

	def raiseValueError(self,values, value):
		pass

	def setInCoreValue(self,obj, value):
		pass

	def setValue(self,obj, value):
		pass

	def setValueList(self,obj, value):
		pass

	def setValueListList(self,obj, value):
		pass

	def splitValues(self,options):
		"""
		Splits the specified options into values and displayNames.
		"""
		pass

	def usingUnits(self,units):
		pass

class EnumImplicit:
	def __init__(self,enum, *args, **kwds):
		"""
Enum
"""
		pass

class EnumUnion:
	def __init__(self,enum, *args, **kwds):
		"""
Group of mutually exclusive attributes where only one is active at at time.

     The active attribute is controlled by a separate Enum Attribute.
  
"""
		pass

	def apply(self,**kwds):
		"""
		Context manager to specify Attribute constructor kwds
    Useful to avoid repeating kwds while defining a related group
    
		"""
		pass

	def castForGet(self,obj, value):
		"""
		Converts and returns the attribute value to its external type.

    Args:
      obj (GeneralObject): Object this attribute belongs to.
      value (Any): Value of the attribute to be converted.

    Returns:
      value (Any): Converted value.
    
		"""
		pass

	def castForSet(self,obj, value):
		pass

	def classifyObject(self,obj):
		pass

	def createList(self,listAttr, obj):
		pass

	def createListList(self,listAttr, obj):
		pass

	def disable(self,obj):
		"""
		Called by GeneralObject when destroyed (or undo of a create)
		"""
		pass

	def enable(self,obj):
		"""
		Called by GeneralObject when created (or undo of a destroy)
		"""
		pass

	def get(self,key, default=None):
		"""
		D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.
		"""
		pass

	def getActiveAttribute(self,obj):
		"""
		Returns the active attribute.
		"""
		pass

	def getActiveKey(self,obj):
		"""
		Returns the active attribute.
		"""
		pass

	def getCreateArgs(self):
		"""
		Helper used in create methods
		"""
		pass

	def getDisplayName(self,obj):
		"""
		Returns the display name of the active attribute.
		"""
		pass

	def getGuiValue(self,obj):
		"""
		Returns the formatted value, as shown in the Property Editor.
		"""
		pass

	def getInCoreValue(self,obj):
		pass

	def getReadonly(self,obj):
		pass

	def getUnits(self,obj):
		"""
		Returns the units for the active attribute.
		"""
		pass

	def getValue(self,obj):
		pass

	def getValueList(self,obj):
		pass

	def getValueListList(self,obj):
		pass

	def initialize(self,objCls, name):
		pass

	def items(self):
		"""
		D.items() -> a set-like object providing a view on D's items
		"""
		pass

	def keys(self):
		"""
		D.keys() -> a set-like object providing a view on D's keys
		"""
		pass

	def loadValue(self,obj, value):
		"""
		Called by GeneralObject.loadAttributeValues during stmod deserialization
		"""
		pass

	def populateGuiValue(self,obj, prop):
		"""
		Override to customize, prop.value, displayValue, allowedValues.
    
    The prop.value type determines which editor widget used:
    - bool -> checkbox
    - str  -> line edit
    - hwtypes.Color -> color picker
    
    Setting prop.allowedValues yields a ComboBox.
    
    prop.displayValue is a str shown when the editor loses focus.
    
		"""
		pass

	def populatePropertyEditor(self,obj, prop, **kwds):
		"""
		Customize how attribute appears in Property Editor and ObjectTables.
    
    Args:
      obj (GeneralObject)
      prop (hwt::Property): Property Editor interface.
      component (int): 0, 1, 2
        Only passed when showing Triples 1 value at a time.
    
		"""
		pass

	def setInCoreValue(self,obj, value):
		pass

	def setValue(self,obj, value):
		pass

	def setValueList(self,obj, value):
		pass

	def setValueListList(self,obj, value):
		pass

	def usingUnits(self,units):
		pass

	def values(self):
		"""
		D.values() -> an object providing a view on D's values
		"""
		pass

class EqualTo:
	def __init__(self,**kwds):
		"""
Implicit equal to operation.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class Extrude:
	"""

Create a part by extruding a profile

"""
	pass

class FEAnalysis:
	pass

class FEAnalysisResults:
	pass

class Fastener:
	def __init__(self,connection=None, direction=(0, 0, 1),name: str="", **kwds):
		"""
Fasten two or more parts together.

  Fasteners connect parts together without allowing movement at the hole location.
  
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	@property
	def autoCalculateAllowableForces(self):
		pass
	@autoCalculateAllowableForces.setter
	def autoCalculateAllowableForces(self):
		pass

	@property
	def autoCalculatePosition(self):
		pass
	@autoCalculatePosition.setter
	def autoCalculatePosition(self):
		pass

	@property
	def axialForce(self):
		pass
	@axialForce.setter
	def axialForce(self):
		pass

	@property
	def axialStiffness(self):
		pass
	@axialStiffness.setter
	def axialStiffness(self):
		pass

	@property
	def axis(self):
		pass
	@axis.setter
	def axis(self):
		pass

	@property
	def color(self):
		pass
	@color.setter
	def color(self):
		pass

	@property
	def connectionRadius(self):
		pass
	@connectionRadius.setter
	def connectionRadius(self):
		pass

	def destroy(self):
		"""
		Delete the object removing it from the model.
    
    The object may come back due to an undo/redo.
    
		"""
		pass

	@property
	def direction(self):
		pass
	@direction.setter
	def direction(self):
		pass

	@property
	def enableAllowableForces(self):
		pass
	@enableAllowableForces.setter
	def enableAllowableForces(self):
		pass

	@property
	def enablePretension(self):
		pass
	@enablePretension.setter
	def enablePretension(self):
		pass

	@property
	def featureLists(self):
		pass
	@featureLists.setter
	def featureLists(self):
		pass

	@property
	def features(self):
		pass
	@features.setter
	def features(self):
		pass

	def getAllChildren(self,type=None, **kwds):
		"""
		Returns a list of all children that matches the specified type.

    Args:
      type (list[Named]): Filter to use to get the children based on object type.
      **kwds : Additional keyword arguments to match other attributes of the object.

    Returns:
      list[Union[Part, Motor, BoundaryCondition, ...]]: The list of children that satisfy the supplied filters.
    
		"""
		pass

	def getAllowedTypes(self):
		"""
		Returns a list of allowed part connectors type.

    Returns:
      list : List of allowed part connectors.
    
		"""
		pass

	def getAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value.

    Args:
      name (str): Attribute name to find its class.
    
		"""
		pass

	def getAttributes(self,type=None, **kwds):
		"""
		Return an dict of the attributes.
    Pass type and kwds to filter by type and Attribute properties

    Args:
      type (type): Filters the attribute based on type
      **kwds : Additional kwds argument to filter attribute by its properties

    Returns:
      dict: Return an OrderedDict of the attributes
    
		"""
		pass

	def getChild(self,name=None, recursive=False, **kwds):
		"""
		Returns the child of the object which matches the specified unique name.

    Args:
      name (str): The name of the child object.
      recursive (bool):  Search all descendents.
      **kwds : Additional keyword arguments to match attributes of the object.

    Returns:
      Named: The child object which satisfies the specified filters.
    
		"""
		pass

	def getChildren(self,type=None, recursive=False, sorted=False, **kwds):
		"""
		Returns a list of children that is of the specified type.

    Args:
      type (Type[Named]): Filter objects by class.
      recursive (bool): True to get all descendent Parts and Assemblies.
      sorted (bool): Sort the children base on id.

    Returns:
      list[Named]
    
		"""
		pass

	def getClass(self,className):
		"""
		Returns the class of the object.
    
    It can be simple or qualified (with namespace). If the name is simple, we 
    prepend the cls.namespace.

    Args:
      className (Union[Part, Occurrence, Named..]) : The class name. 
     
    Returns:
      Union[Part, Occurrence, Named..] : The class for the specified className. 

    
		"""
		pass

	def getClassAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value

    Args:
      name (str): Name of the attribute
    
		"""
		pass

	def getDependents(self,recursive=False, **kwds):
		"""
		Get objects that reference this object through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getGuiAttributeNames(self):
		"""
		Return list of the attribute names that are in the gui

    Returns:
      list: Returns list of active gui attribute
    
		"""
		pass

	def getGuiValue(self,attr, **kwds):
		"""
		Get value formatted to be shown in the gui

    Args:
      attr (str): Attribute name to gets its gui value.

    Returns:
      str: Returns a string of the value with its gui units, like "5 mm/s".
    
		"""
		pass

	def getReferences(self,recursive=False, **kwds):
		"""
		Get objects this object references through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getSerializedAttributeValues(self):
		pass

	def getValue(self,attr):
		"""
		Return the attribute value for passed attribute name.
    
    Args:
      attr (String): Attribute name to gets its value.

    Returns:
      str: Returns the attribute value
    
		"""
		pass

	@property
	def grounded(self):
		pass
	@grounded.setter
	def grounded(self):
		pass

	def isa(self,type=None, filter=None, name=None, wildcard=None, **kwds):
		"""
		Determines if the object matches the specified settings or not.
    
    Args:
      type (Union[Part, Assembly, Contact..]): The type of the object.
      filter (method): Return value of specified callback method.
      name (str): Name that matches exactly with object name.
      wildcard (str): A pattern to match exactly with the object name.
      **kwds : Additional keyword arguments to match other attributes.

    Returns:
      bool : True, if a match is found, otherwise False.
    
		"""
		pass

	@property
	def location(self):
		pass
	@location.setter
	def location(self):
		pass

	@property
	def material(self):
		pass
	@material.setter
	def material(self):
		pass

	def modelPositions(self):
		"""
		Forces all objects to return the original model positions instead of the
    current analysis positions.

    Useful when defining draw methods on GeneralObjects where behaviour is 
    different while animating.
    
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	@property
	def parent(self):
		pass
	@parent.setter
	def parent(self):
		pass

	@property
	def parts(self):
		pass
	@parts.setter
	def parts(self):
		pass

	@property
	def partsInHoles(self):
		pass
	@partsInHoles.setter
	def partsInHoles(self):
		pass

	@property
	def position(self):
		pass
	@position.setter
	def position(self):
		pass

	@property
	def pretensionForce(self):
		pass
	@pretensionForce.setter
	def pretensionForce(self):
		pass

	@property
	def radius(self):
		pass
	@radius.setter
	def radius(self):
		pass

	def setValue(self,attr, value):
		"""
		Alias for setattr (attr, value)
    Args:
      attr (str): Attribute name to sets its value.
      value (str): Attribute value to set .
    
		"""
		pass

	def setValues(self,**kwds):
		"""
		Sets passed name/value pairs.
    
    Values are set in a standard order (the order the attribute is defined
    on the class) which is required in certain cases when an attribute's
    setter expects another attribute to have already been set.
    For example, setting a reference before a location that is wrt it.
    
    Args:
      **kwds: Set attributes in one go.
    
		"""
		pass

	@property
	def shearForce(self):
		pass
	@shearForce.setter
	def shearForce(self):
		pass

	@property
	def shearStiffness(self):
		pass
	@shearStiffness.setter
	def shearStiffness(self):
		pass

	@property
	def type(self):
		pass
	@type.setter
	def type(self):
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

	def wasValueSet(self,attr):
		"""
		Check if attribute was set

    Args:
      attr (str): Attribute name to check it value set or not

    Returns:
      bool: True, if value was set else false.
    
		"""
		pass

class Feature:
	def __init__(self,*args, **kwargs):
		"""
Features are what gives shape to a Part.

  They can be points, lines, planes, holes, etc.
  
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	@property
	def cg(self):
		pass
	@cg.setter
	def cg(self):
		pass

	def chamferByAngle(self,feature, angle=45, dist=0.003):
		"""
		Creates chamfer on a Linear/Planar feature.

  Args:
    feature (Feature): Feature that needs to be chamfer.
    angle (float): Chamfer angle from the edge.
    dist (float): Chamfer distance from the edge.
  
		"""
		pass

	def chamferByDistance(self,feature, dist1=0.003, dist2=0.003):
		"""
		Creates chamfer on a linear or planar feature.

  Args:
    feature (Feature): Feature that needs to be chamfer.
    dist1 (float): Chamfer distance from the edge.
    dist2 (float): Chamfer distance from the edge.
  
		"""
		pass

	def circularPattern(self,input, axis, angle=60, count=3, equalSpacing=False, instances=False, symmetry=False, axisReverse=False, result="NEW_PART", mergeWithAllParts=True, mergeParts=None, copiesToSkip=None):
		"""
		Circular Pattern parts or faces around an axis.

  Args:
    input (list[Part] | list[FeatureArea]): Parts or Features to create circular
      pattern.
    axis (math.Vector | FeatureCurve | Axis): Axis is a reference line, edge,
      or axis to which the pattern will be parallel.
    angle (float): Angle within which the copies are equally spaced.
    count (int): Number of copies.
    equalSpacing (bool): If True, equally space the copies within a specified
      Angle.
    instances (bool): If True, any changes to part or face will apply to all
      instances.
    symmetry (bool): Symmetry in Direction 1.
    axisReverse (bool): Reverse the axis in Direction 1.
    result (str): Result type of circular pattern.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeParts.
    mergeParts (list[Part]): Parts to be merged with circular pattern.
    copiesToSkip (dict{Part: list[indicesToSkip]}): Set copies to skip. It's
      basically a dictionary which contains Part as a key and list of indices to
      skip as values.

  Returns:
  list[Part]: List of parts created.
  
		"""
		pass

	@property
	def connectedCurves(self):
		pass
	@connectedCurves.setter
	def connectedCurves(self):
		pass

	@property
	def connectedFaces(self):
		pass
	@connectedFaces.setter
	def connectedFaces(self):
		pass

	@property
	def connectedPoints(self):
		pass
	@connectedPoints.setter
	def connectedPoints(self):
		pass

	def divideCurve(self,curve, divisionPoints, uniformDivision=False):
		"""
		Divide a curve by inserting points along the curve.

    Args:
      curve (FeatureCurve): Curve to divide.
      divisionPoints((listlist[float], bool)): List of divisionPoints (length
        ratio or length along the curve) and the bool value depicts position
        ratio. If True, Divide the curve on length ratio otherwise
        division occurs at length along the curve.
      uniformDivision (bool): If True, Curve is uniformly divided.

    Returns:
      Part: New part created.
    
		"""
		pass

	def edgeFillet(self,feature, radius="3 mm", continuity="TANGENT", tangentPropagation=True):
		"""
		Creates fillet on a Linear feature.

  Args:
    feature (Feature): feature that needs to fillet.
    radius (float | str): Radius of the fillet.
    continuity (str): Valid values are: TANGENT and CURVATURE.
    tangentPropagation (bool): If True, selecting an edge will also select all
      of its tangent edges.
  
		"""
		pass

	def extendCurve(self,curve, extensionTypeAndDistance, shape="LINEAR", extendEnds="START", extendAsNewPart=False):
		"""
		Extend a curve and modify the shape of the extension.

    Args:
      curve (FeatureCurve): Extracted Curve to extend.
      extensionTypeAndDistance (list[str, float] | list[str, Feature | Plane]):
        Extension type as string and Distance as float to extend. For
        UP_TO_FEATURE extension type second argument should be either a Feature
        or System Plane.
        Valid extension types are:
          - EXTENSION_DISTANCE
          - INCREMENT_FACTOR
          - TOTAL_LENGTH
          - UP_TO_FEATURE
      shape (str): Shape of extend curve.
        - LINEAR
        - SOFT
        - REFLECTIVE
        - NATURAL
        - ARC
      extendEnds (str): To reverse the curve extension direction.
        - START
        - END
      extendAsNewPart (bool): Create a new part if True, otherwise merge in
        original part.

    Returns:
      Part: New part created.
    
		"""
		pass

	def extract(self,features, maintainReference=True):
		"""
		Extracts geometry features and transfer them into a new part.

  Args:
    features (list[Feature]): Feature to be extracted.
    maintainReference (bool): If true, set reference associativity otherwise not.

  Returns:
    Part: New part created.
  
		"""
		pass

	def faceCurve(self,face, method="POINT", uRatio=True, vRatio=True, ignoreHoles=True, uCurvesCount=5, vCurvesCount=5, uParmRatioForPointMode="0", vParmRatioForPointMode="0", vertexFeature=None, vertexPoint=None):
		"""
		Extract curves from a face in the U or V direction. This is useful for
  creating trim curves that run along a face.

  Args:
    face (FeatureArea): Face on which extract curves.
    method (str): Method for face curve.
      - POINT
      - VERTEX
      - MESH
    uRatio (bool): If True, create U curves.
    vRatio (bool): If True, create V curves.
    ignoreHoles (bool): If True, ignore the holes in face curve.
    uCurvesCount (Int): Set U curves count to create for method type MESH.
    vCurvesCount (Int): Set V curves count to create for method type MESH.
    uParmRatioForPointMode (Float): Set U Param for method type POINT,
      param should be between 0 and 1.
    vParmRatioForPointMode (Float): Set V Param for method type POINT,
      param should be between 0 and 1.
    vertexFeature (FeaturePoint): Feature point to extract iso-param curve for
      method type VERTEX.
    vertexPoint (math.Point): Point to create face curves for method
      type POINT. Point must lie on the face.

  Returns:
    Part: New part created.
    
		"""
		pass

	def findClosestPoint(self,referencePoint):
		"""
		Returns the point on feature that nearest to the specified point.
    
    Args:
      referencePoint (Point) : Reference point to find closest point on feature.
    
    Returns:
      Point : The closest point of the feature from specified point.
    
		"""
		pass

	def getClass(self,classname):
		pass

	def helixCurve(self,profile, type="TURNS_AND_HEIGHT", numTurns=2, pitch=0.003, height=0.01, startAngle="0", curveHand="RIGHT", heightReverse=False, lockDiameterRatio=True, topDiameter="0"):
		"""
		Create a solid loft or a lofted surface from profiles and guide curves.

    Args:
      profile (FeatureCircular): Circular sketch profile.
      type (str): Helix Curve Type.
        - TURNS_AND_HEIGHT
        - TURNS_AND_PITCH
        - HEIGHT_AND_PITCH
      numTurns(float): Number of turns in helix curve.
      pitch (float): Pitch distance of helix curve.
      height (float): Height of helix curve.
      startAngle (float): Start angle of helix curve.
      curveHand (str): Helix curve sweep direction.
        - LEFT
        - RIGHT
      heightReverse (bool): If True, Reverse the height in other direction of
        helix curve.
      lockDiameterRatio (bool): If True, Set lock diameter ratio of helix curve.
      topDiameter (float): Top Diameter of helix curve.

    Returns:
      Part: New part created.
    
		"""
		pass

	def isa(self,type=None, filter=None, **kwds):
		"""
		Determines the object matches the specified settings or not.

    Args:
      type (Part, Assembly, Contact, ..) :  Specify type of the object.
      filter (method) : Return value of specified callback method.
      **kwds : Additional keyword arguments to match attributes.
    
		"""
		pass

	@property
	def ishole(self):
		pass
	@ishole.setter
	def ishole(self):
		pass

	def linearPattern(self,input, direction1, direction2=(0, 0, 0), bothDirection=False, spacing1="0.0", count1=3, spacing2="0.0", count2=3, instances=False, symmetry1=False, symmetry2=False, reverseDir1=False, reverseDir2=False, result="NEW_PART", mergeWithAllParts=True, mergeParts=None, copiesToSkip=None, seedOnly=False):
		"""
		Linear Pattern parts or faces along a direction.

  Args:
    input (list[Part] | list[FeatureArea]): Parts or Features to create linear
      pattern.
    direction1 (math.Vector | FeatureCurve | Axis): Direction can be a 
      reference line, edge, or axis to which the pattern will be parallel.
    direction2 (math.Vector | FeatureCurve | Axis): Direction can be a 
      reference line, edge, or axis to which the pattern will be parallel.
    bothDirection (bool): If True, sets in both direction otherwise single
      direction.
    spacing1 (float): Distance between two copies.
    count1 (int): Number of copies.
    spacing2 (float): Distance between two copies.
    count2 (int): Number of copies.
    instances (bool): If True, any changes to part or face will apply to all
      instances.
    symmetry1 (bool): Symmetry in Direction 1.
    symmetry2 (bool): Symmetry in Direction 2.
    reverseDir1 (bool): Reverse the pattern direction in Direction 1.
    reverseDir2 (bool): Reverse the pattern direction in Direction 2.
    result (str): Result type of linear pattern.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeParts.
    mergeParts (list[Part]): Parts to be merged with linear pattern.
    copiesToSkip ((dict{Part: list[tuplex,y)]}): Set copies to skip. Here x and
      y are the indices in 2D space of copy , which needs to be skipped.
    seedOnly (bool): If True, pattern the entities only along the first row and
      first column.

  Returns:
  list[Part]: List of parts created.
  
		"""
		pass

	@property
	def location(self):
		pass
	@location.setter
	def location(self):
		pass

	def loft(self,profiles, loftAsSolid=True, guideCurves=None, arcLengthProfiles=False, arcLengthGuides=False, swapSurface=False, closed=False, resultType="NEW_PART", mergeWithAllParts=True, mergeParts=None, profileChain=False, guideCurvesTangent=False):
		"""
		Create a solid loft or a lofted surface from profiles and guide curves.

  Args:
    profiles (list[FeatureArea | FeatureCurve]): Faces, closed sketches or curves.
    loftAsSolid (bool): If true, sweep as solids otherwise sweep as surfaces.
    guideCurves(list[FeatureCurve]): Guide curves for the loft.
    arcLengthProfiles (bool): If True, Set Arc Length Parametrization on profiles.
    arcLengthGuides (bool): If True, Set Arc Length Parametrization on guides.
    swapSurface (bool): If True, interchange the profiles and rails to get
      preferred shape.
    closed (bool): If True, close the loft.
    resultType (str): Result type of loft operation.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeTargets.
    mergeParts (Part): Parts to be merged with loft operation.
    profileChain (bool): True, Allows to select profile's connected edges.
    guideCurvesTangent (bool): True, Allows to select  guideCurve's connected edges.

  Returns:
    Part|None: New part created if resultType is NEW_PART.
  
		"""
		pass

	@property
	def minBoundingBox(self):
		pass
	@minBoundingBox.setter
	def minBoundingBox(self):
		pass

	def moveFaces(self,features, position, duplicate=False):
		"""
		Translate, rotate, copy, or extend features.

  Args:
    features (list[FeatureArea]): The features to move.
    position (math.Matrix44): The position to move the features at.
    duplicate (bool): If True, copy the features at given position.
  
		"""
		pass

	def multiSweep(self,profiles, path, sweepAsSolid=True, arcLengthProfiles=False, arcLengthGuides=False, orientation="PERPENDICULAR", normalToSurface=None, resultType="NEW_PART", mergeWithAllParts=True, mergeParts=None):
		"""
		Sweep multiple profiles along a path to create a solid or surface.

  Args:
    profiles (list[FeatureArea | FeatureCurve]): Faces or closed sketches.
    path(list[FeatureCurve]): Path for the multiSweep.
    sweepAsSolid (bool): If true, sweep as solids otherwise sweep as surfaces.
    arcLengthProfiles (bool): If True, Set Arc Length Parametrization on profiles.
    arcLengthGuides (bool): If True, Set Arc Length Parametrization on path.
    orientation (str): Orientation for multiSweep.
      - PERPENDICULAR
      - PARALLEL
      - NORMAL_TO_SURFACE
    normalToSurface (list[FeatureArea]): Face to which sweep orientation will be
      normal.
    resultType (str): Result type of multiSweep operation.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeTargets.
    mergeParts (Part): Parts to be merged with sweep operation.

  Returns:
    Part|None: New part created if resultType is NEW_PART.
  
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	def offset(self,input, value, newPart=False):
		"""
		Offset surfaces or parts.

  Args:
    input (list[Part] | list[Feature])
    value (float | str): Desired offset distance. Negative value means inward direction.
      If value is a string it can be a Model Variable or a value with units.
    newPart (bool): If True, creates a new part.

  Returns:
    Part|None: New part created if newPart was True.
  
		"""
		pass

	@property
	def part(self):
		pass
	@part.setter
	def part(self):
		pass

	def patternAlongPath(self,input, path, count=3, equalSpacing=False, spacing=0.01, instances=False, method="TRANSFORM", orientation="MAINTAIN_SEED_ORIENTATION", pathReverse=False, result="NEW_PART", mergeWithAllParts=True, mergeParts=None, copiesToSkip=None):
		"""
		Pattern parts or faces along curve.

   Args:
    input (list[Part] | list[FeatureArea]): Parts or Features to create pattern
      along the curve.
    path (list[FeatureCurve]): Path for pattern.
    count (int): Number of copies.
    equalSpacing (bool): If True, equally space the copies.
    spacing (float): Distance between two copies.
    instances (bool): If True, any changes to part or face will apply to all instances.
    method (str): Pattern method.
      - TRANSFORM
      - OFFSET
    orientation (str): Pattern Orientation.
      - TANGENT_TO_CURVE
      - MAINTAIN_SEED_ORIENTATION
    pathReverse (bool): Reverse the path of pattern.
    result (str): Result type of pattern along path.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeParts.
    mergeParts (list[Part]): Parts to be merged with pattern along path.
    copiesToSkip (dict{Part: list[indicesToSkip]}): Set copies to skip. It's
      basically a dictionary which contains Part as a key and list of indices to
      skip as values.

  Returns:
  list[Part | Feature]: List of parts/features created.
  
		"""
		pass

	def projection(self,feature, parts, extendEdges=True):
		"""
		Creates projection of a feature from one part to another part.

  Args:
    feature (Feature): Feature that needs to be projected on Part.
    parts (list[Part]): Parts on which feature projection to be.
    extendEdges (bool): If True, extends the edge.
  
		"""
		pass

	def pushPull(self,feature, depth, newPart=False, resultType=None):
		"""
		Pushes or pulls a face or an edge to a specified distance.

  Args:
    feature (Feature): Feature to push or pull.
    depth (float | str): The precise distance. 
      A positive value extends, whereas a negative value contracts.
    newPart (bool): If True, creates a new Part as a result of pushPull operation.
    resultType (str): Result type of pushPull operation. This option is valid
      only for pushPull a sketch on face.
      - NEW_PART
      - ADD
      - REMOVE
      - REPLACE

  Returns:
    Part: If New Part created, otherwise return None.
  
		"""
		pass

	def revolve2(self,profiles, axis, direction="SINGLE", resultType="NEW_PART", mergeTargets=None, flipAxis=False, angle1="0", angle2="0"):
		"""
		New Revolve - Revolve a face, sketch, line, or 2D edge about an axis.

  Args:
    profiles (FeatureArea | FeatureCurve): A face, line, or 2D edge.
    axis (FeatureLinear | FeatureCircular | Axis): An edge, line, cylindrical 
    hole or an Axis.

      Selecting an edge on another part projects the axis of revolution to the
      planar face that will be rotated.
    direction (str): Valid values are: SINGLE, BOTH and SYMMETRY.
    resultType (str): Valid values are: COMBINE, SUBTRACT, INTERSECT and NEW_PART.
    mergeTargets (list[Feature]): Explict merge targets for Result Type.
    flipAxis (bool): If True, axis will be flipped.
    angle1 (float): The angle of revolution.
    angle2 (float): The angle of revolution when direction is Both.

  Returns:
    Part|None: New part created if resultType is NEW_PART.
  
		"""
		pass

	def sweep(self,profiles, path, solidProfile=None, sweepAsSolid=True, profileOrientation=True, propagate=True, pathIgnoredFeatures=None, guideCurves=None, pathDirection="DIRECTION_1", twistType="NO_TWIST", twistAngle="0", twistTurns="0", twistAngleDir2="0", twistTurnsDir2="0", resultType="NEW_PART", mergeWithAllParts=True, mergeParts=None, twist1Reverse=False, twist2Reverse=False, guideScale="UNIFORM"):
		"""
		Sweep a profile along a path to create a solid or 3D surface.

  Args:
    profiles (FeatureArea | FeatureCurve): A face or a closed sketch.
    path(list[FeatureCurve]): Path for the sweep.
    solidProfile (Part): Sweep profile as solid. Only applicable for solid cylinder.
    sweepAsSolid (bool): If true, sweep as solids otherwise sweep as surfaces.
    profileOrientation (bool): If true, sweep orientation will be normal to the
      path otherwise parallel.
    propagate (bool): If true, all the tangent edges of the input path is also selected.
    pathIgnoredFeatures (list[FeatureCurve]): Edge to be ignored when propagate is True.
    guideCurves (list[FeatureCurve]): Guide curves for the sweep. No guide curves are set by default.
    pathDirection (str): Sweep direction.
      - DIRECTION_1
      - DIRECTION_2
      - BOTH
    twistType (str): Twist type.
      - NO_TWIST
      - ANGLE_TWIST
      - NO_OF_TURNS
    twistAngle (float): Twist angle in DIRECTION_1.
    twistTurns (float): Number of twist turns in DIRECTION_1.
    twistAngleDir2 (float): Twist angle in DIRECTION_2. Applicable only when
      pathDirection is "BOTH".
    twistTurnsDir2 (float): Number of twist turns in DIRECTION_2. Applicable
      only when pathDirection is "BOTH".
    resultType (str): Result type of sweep operation.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeTargets.
    mergeParts (Part): Parts to be merged with sweep operation.
    twist1Reverse (bool): If True, Reverse the twist in DIRECTION_1 or DIRECTION_2.
    twist2Reverse (bool): If True, Reverse the twist in DIRECTION_2. Applicable
      only when pathDirection is "BOTH".
    guideScale (str): Guide scale option. Applicable only when guideCurves is provided.
      - UNIFORM
      - LATERAL

  Returns:
    Part|None: New part created if resultType is NEW_PART.
  
		"""
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

class FeatureArea:
	def __init__(self,*args):
		"""
Represents the surface or area of a part.
  
  They are not created through the API but can be retrieved from a part.
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	@property
	def area(self):
		pass
	@area.setter
	def area(self):
		pass

	@property
	def cg(self):
		pass
	@cg.setter
	def cg(self):
		pass

	def chamferByAngle(self,feature, angle=45, dist=0.003):
		"""
		Creates chamfer on a Linear/Planar feature.

  Args:
    feature (Feature): Feature that needs to be chamfer.
    angle (float): Chamfer angle from the edge.
    dist (float): Chamfer distance from the edge.
  
		"""
		pass

	def chamferByDistance(self,feature, dist1=0.003, dist2=0.003):
		"""
		Creates chamfer on a linear or planar feature.

  Args:
    feature (Feature): Feature that needs to be chamfer.
    dist1 (float): Chamfer distance from the edge.
    dist2 (float): Chamfer distance from the edge.
  
		"""
		pass

	def circularPattern(self,input, axis, angle=60, count=3, equalSpacing=False, instances=False, symmetry=False, axisReverse=False, result="NEW_PART", mergeWithAllParts=True, mergeParts=None, copiesToSkip=None):
		"""
		Circular Pattern parts or faces around an axis.

  Args:
    input (list[Part] | list[FeatureArea]): Parts or Features to create circular
      pattern.
    axis (math.Vector | FeatureCurve | Axis): Axis is a reference line, edge,
      or axis to which the pattern will be parallel.
    angle (float): Angle within which the copies are equally spaced.
    count (int): Number of copies.
    equalSpacing (bool): If True, equally space the copies within a specified
      Angle.
    instances (bool): If True, any changes to part or face will apply to all
      instances.
    symmetry (bool): Symmetry in Direction 1.
    axisReverse (bool): Reverse the axis in Direction 1.
    result (str): Result type of circular pattern.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeParts.
    mergeParts (list[Part]): Parts to be merged with circular pattern.
    copiesToSkip (dict{Part: list[indicesToSkip]}): Set copies to skip. It's
      basically a dictionary which contains Part as a key and list of indices to
      skip as values.

  Returns:
  list[Part]: List of parts created.
  
		"""
		pass

	@property
	def connectedCurves(self):
		pass
	@connectedCurves.setter
	def connectedCurves(self):
		pass

	@property
	def connectedFaces(self):
		pass
	@connectedFaces.setter
	def connectedFaces(self):
		pass

	@property
	def connectedPoints(self):
		pass
	@connectedPoints.setter
	def connectedPoints(self):
		pass

	def deleteFaces(self,features):
		"""
		Deletes the specified faces from the part.

  Args:
    features (list[Feature]): Features to be removed.
  
		"""
		pass

	def divideCurve(self,curve, divisionPoints, uniformDivision=False):
		"""
		Divide a curve by inserting points along the curve.

    Args:
      curve (FeatureCurve): Curve to divide.
      divisionPoints((listlist[float], bool)): List of divisionPoints (length
        ratio or length along the curve) and the bool value depicts position
        ratio. If True, Divide the curve on length ratio otherwise
        division occurs at length along the curve.
      uniformDivision (bool): If True, Curve is uniformly divided.

    Returns:
      Part: New part created.
    
		"""
		pass

	def draft(self,features, direction, neutralPlane, angle1=3.0, angle2=3.0, flipDrawDirection1=False, flipDrawDirection2=False):
		"""
		Add draft to one or more faces of a part when designing a product that is
     manufactured using injection molding.

  Args:
    features (list[FeatureArea]): Faces to Draft.
    direction (str): The Draft direction. Valid values are: SINGLE, BOTH and SYMMETRY.
    neutralPlane (FeaturePlanar, Plane): A reference plane or an existing face
     in the model. neutralPlane can not be same as draft feature.
    angle1 (float): The angle1 of draft.
    angle2 (float): The angle2 of draft. This is applicable for BOTH or SYMMETRY value for direction.
    flipDrawDirection1 (bool): If True, flips the draw direction of draft in single direction.
    flipDrawDirection2 (bool): If True, flips the draw direction of draft.
      Applicable for BOTH direction.
  
		"""
		pass

	def edgeFillet(self,feature, radius="3 mm", continuity="TANGENT", tangentPropagation=True):
		"""
		Creates fillet on a Linear feature.

  Args:
    feature (Feature): feature that needs to fillet.
    radius (float | str): Radius of the fillet.
    continuity (str): Valid values are: TANGENT and CURVATURE.
    tangentPropagation (bool): If True, selecting an edge will also select all
      of its tangent edges.
  
		"""
		pass

	def extendCurve(self,curve, extensionTypeAndDistance, shape="LINEAR", extendEnds="START", extendAsNewPart=False):
		"""
		Extend a curve and modify the shape of the extension.

    Args:
      curve (FeatureCurve): Extracted Curve to extend.
      extensionTypeAndDistance (list[str, float] | list[str, Feature | Plane]):
        Extension type as string and Distance as float to extend. For
        UP_TO_FEATURE extension type second argument should be either a Feature
        or System Plane.
        Valid extension types are:
          - EXTENSION_DISTANCE
          - INCREMENT_FACTOR
          - TOTAL_LENGTH
          - UP_TO_FEATURE
      shape (str): Shape of extend curve.
        - LINEAR
        - SOFT
        - REFLECTIVE
        - NATURAL
        - ARC
      extendEnds (str): To reverse the curve extension direction.
        - START
        - END
      extendAsNewPart (bool): Create a new part if True, otherwise merge in
        original part.

    Returns:
      Part: New part created.
    
		"""
		pass

	def extract(self,features, maintainReference=True):
		"""
		Extracts geometry features and transfer them into a new part.

  Args:
    features (list[Feature]): Feature to be extracted.
    maintainReference (bool): If true, set reference associativity otherwise not.

  Returns:
    Part: New part created.
  
		"""
		pass

	def faceCurve(self,face, method="POINT", uRatio=True, vRatio=True, ignoreHoles=True, uCurvesCount=5, vCurvesCount=5, uParmRatioForPointMode="0", vParmRatioForPointMode="0", vertexFeature=None, vertexPoint=None):
		"""
		Extract curves from a face in the U or V direction. This is useful for
  creating trim curves that run along a face.

  Args:
    face (FeatureArea): Face on which extract curves.
    method (str): Method for face curve.
      - POINT
      - VERTEX
      - MESH
    uRatio (bool): If True, create U curves.
    vRatio (bool): If True, create V curves.
    ignoreHoles (bool): If True, ignore the holes in face curve.
    uCurvesCount (Int): Set U curves count to create for method type MESH.
    vCurvesCount (Int): Set V curves count to create for method type MESH.
    uParmRatioForPointMode (Float): Set U Param for method type POINT,
      param should be between 0 and 1.
    vParmRatioForPointMode (Float): Set V Param for method type POINT,
      param should be between 0 and 1.
    vertexFeature (FeaturePoint): Feature point to extract iso-param curve for
      method type VERTEX.
    vertexPoint (math.Point): Point to create face curves for method
      type POINT. Point must lie on the face.

  Returns:
    Part: New part created.
    
		"""
		pass

	def findClosestPoint(self,referencePoint):
		"""
		Returns the point on feature that nearest to the specified point.
    
    Args:
      referencePoint (Point) : Reference point to find closest point on feature.
    
    Returns:
      Point : The closest point of the feature from specified point.
    
		"""
		pass

	def getClass(self,classname):
		pass

	def getConnectionPoints(self,uslices=2, vslices=2):
		"""
		Returns a list of points that can be used to visualize how the feature 
    is connected (spider points).

    Args:
      uslices (int) : Number of slices in u-direction.
      vslices (int) : Number of slices in v-direction

    Returns:
      list[Point] : List of points that can be used to visualize 
        how the feature is connected.
    
		"""
		pass

	def getCurvature(self,point):
		"""
		Returns the directions and curvatures at the given point position

    Args:
      point (Point) : Point position at which directions and curvatures are computed.
    
		"""
		pass

	def getNormal(self,point):
		"""
		Return vector perpendicular to surface at a point.

    Args:
      point (Point) : Point position at which normal is computed.
    
		"""
		pass

	def helixCurve(self,profile, type="TURNS_AND_HEIGHT", numTurns=2, pitch=0.003, height=0.01, startAngle="0", curveHand="RIGHT", heightReverse=False, lockDiameterRatio=True, topDiameter="0"):
		"""
		Create a solid loft or a lofted surface from profiles and guide curves.

    Args:
      profile (FeatureCircular): Circular sketch profile.
      type (str): Helix Curve Type.
        - TURNS_AND_HEIGHT
        - TURNS_AND_PITCH
        - HEIGHT_AND_PITCH
      numTurns(float): Number of turns in helix curve.
      pitch (float): Pitch distance of helix curve.
      height (float): Height of helix curve.
      startAngle (float): Start angle of helix curve.
      curveHand (str): Helix curve sweep direction.
        - LEFT
        - RIGHT
      heightReverse (bool): If True, Reverse the height in other direction of
        helix curve.
      lockDiameterRatio (bool): If True, Set lock diameter ratio of helix curve.
      topDiameter (float): Top Diameter of helix curve.

    Returns:
      Part: New part created.
    
		"""
		pass

	def isTouching(self,point):
		"""
		Determines the point is on the surface or not.

    Args:
      point (Point) : Point positionin x, y, z coordinates.
    
		"""
		pass

	def isa(self,type=None, filter=None, **kwds):
		"""
		Determines the object matches the specified settings or not.

    Args:
      type (Part, Assembly, Contact, ..) :  Specify type of the object.
      filter (method) : Return value of specified callback method.
      **kwds : Additional keyword arguments to match attributes.
    
		"""
		pass

	@property
	def ishole(self):
		pass
	@ishole.setter
	def ishole(self):
		pass

	def isperiodic(self):
		"""
		Returns True if it's a periodic area, False otherwise.
		"""
		pass

	def linearPattern(self,input, direction1, direction2=(0, 0, 0), bothDirection=False, spacing1="0.0", count1=3, spacing2="0.0", count2=3, instances=False, symmetry1=False, symmetry2=False, reverseDir1=False, reverseDir2=False, result="NEW_PART", mergeWithAllParts=True, mergeParts=None, copiesToSkip=None, seedOnly=False):
		"""
		Linear Pattern parts or faces along a direction.

  Args:
    input (list[Part] | list[FeatureArea]): Parts or Features to create linear
      pattern.
    direction1 (math.Vector | FeatureCurve | Axis): Direction can be a 
      reference line, edge, or axis to which the pattern will be parallel.
    direction2 (math.Vector | FeatureCurve | Axis): Direction can be a 
      reference line, edge, or axis to which the pattern will be parallel.
    bothDirection (bool): If True, sets in both direction otherwise single
      direction.
    spacing1 (float): Distance between two copies.
    count1 (int): Number of copies.
    spacing2 (float): Distance between two copies.
    count2 (int): Number of copies.
    instances (bool): If True, any changes to part or face will apply to all
      instances.
    symmetry1 (bool): Symmetry in Direction 1.
    symmetry2 (bool): Symmetry in Direction 2.
    reverseDir1 (bool): Reverse the pattern direction in Direction 1.
    reverseDir2 (bool): Reverse the pattern direction in Direction 2.
    result (str): Result type of linear pattern.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeParts.
    mergeParts (list[Part]): Parts to be merged with linear pattern.
    copiesToSkip ((dict{Part: list[tuplex,y)]}): Set copies to skip. Here x and
      y are the indices in 2D space of copy , which needs to be skipped.
    seedOnly (bool): If True, pattern the entities only along the first row and
      first column.

  Returns:
  list[Part]: List of parts created.
  
		"""
		pass

	@property
	def location(self):
		pass
	@location.setter
	def location(self):
		pass

	def loft(self,profiles, loftAsSolid=True, guideCurves=None, arcLengthProfiles=False, arcLengthGuides=False, swapSurface=False, closed=False, resultType="NEW_PART", mergeWithAllParts=True, mergeParts=None, profileChain=False, guideCurvesTangent=False):
		"""
		Create a solid loft or a lofted surface from profiles and guide curves.

  Args:
    profiles (list[FeatureArea | FeatureCurve]): Faces, closed sketches or curves.
    loftAsSolid (bool): If true, sweep as solids otherwise sweep as surfaces.
    guideCurves(list[FeatureCurve]): Guide curves for the loft.
    arcLengthProfiles (bool): If True, Set Arc Length Parametrization on profiles.
    arcLengthGuides (bool): If True, Set Arc Length Parametrization on guides.
    swapSurface (bool): If True, interchange the profiles and rails to get
      preferred shape.
    closed (bool): If True, close the loft.
    resultType (str): Result type of loft operation.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeTargets.
    mergeParts (Part): Parts to be merged with loft operation.
    profileChain (bool): True, Allows to select profile's connected edges.
    guideCurvesTangent (bool): True, Allows to select  guideCurve's connected edges.

  Returns:
    Part|None: New part created if resultType is NEW_PART.
  
		"""
		pass

	@property
	def minBoundingBox(self):
		pass
	@minBoundingBox.setter
	def minBoundingBox(self):
		pass

	def moveFaces(self,features, position, duplicate=False):
		"""
		Translate, rotate, copy, or extend features.

  Args:
    features (list[FeatureArea]): The features to move.
    position (math.Matrix44): The position to move the features at.
    duplicate (bool): If True, copy the features at given position.
  
		"""
		pass

	def multiSweep(self,profiles, path, sweepAsSolid=True, arcLengthProfiles=False, arcLengthGuides=False, orientation="PERPENDICULAR", normalToSurface=None, resultType="NEW_PART", mergeWithAllParts=True, mergeParts=None):
		"""
		Sweep multiple profiles along a path to create a solid or surface.

  Args:
    profiles (list[FeatureArea | FeatureCurve]): Faces or closed sketches.
    path(list[FeatureCurve]): Path for the multiSweep.
    sweepAsSolid (bool): If true, sweep as solids otherwise sweep as surfaces.
    arcLengthProfiles (bool): If True, Set Arc Length Parametrization on profiles.
    arcLengthGuides (bool): If True, Set Arc Length Parametrization on path.
    orientation (str): Orientation for multiSweep.
      - PERPENDICULAR
      - PARALLEL
      - NORMAL_TO_SURFACE
    normalToSurface (list[FeatureArea]): Face to which sweep orientation will be
      normal.
    resultType (str): Result type of multiSweep operation.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeTargets.
    mergeParts (Part): Parts to be merged with sweep operation.

  Returns:
    Part|None: New part created if resultType is NEW_PART.
  
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	def offset(self,input, value, newPart=False):
		"""
		Offset surfaces or parts.

  Args:
    input (list[Part] | list[Feature])
    value (float | str): Desired offset distance. Negative value means inward direction.
      If value is a string it can be a Model Variable or a value with units.
    newPart (bool): If True, creates a new part.

  Returns:
    Part|None: New part created if newPart was True.
  
		"""
		pass

	@property
	def part(self):
		pass
	@part.setter
	def part(self):
		pass

	def partition(self,entity, thickness="1 mm", reverseDirection=False, minSize="0", maxSize=1):
		"""
		Divides a solid part into design and non-design regions by selecting a
  hole, pocket, or face to offset.

  Args:
    entity (Part | Assembly | [[Feature]]): Part/Assembly from which you want to
      plug the holes or a feature to be partitioned. If it is a feature then it
      should be list of feature list, where the features in internal feature
      list are related to each other.
    thickness (float): The partition thickness consider in mm.
    reverseDirection (bool): Switch the direction of the offset for the
      partition.
    minSize (float): Minimum size of partition to find features.
    maxSize (float): Maximum size of partition to find features.

  Returns:
    Part: New part created.
  
		"""
		pass

	def patternAlongPath(self,input, path, count=3, equalSpacing=False, spacing=0.01, instances=False, method="TRANSFORM", orientation="MAINTAIN_SEED_ORIENTATION", pathReverse=False, result="NEW_PART", mergeWithAllParts=True, mergeParts=None, copiesToSkip=None):
		"""
		Pattern parts or faces along curve.

   Args:
    input (list[Part] | list[FeatureArea]): Parts or Features to create pattern
      along the curve.
    path (list[FeatureCurve]): Path for pattern.
    count (int): Number of copies.
    equalSpacing (bool): If True, equally space the copies.
    spacing (float): Distance between two copies.
    instances (bool): If True, any changes to part or face will apply to all instances.
    method (str): Pattern method.
      - TRANSFORM
      - OFFSET
    orientation (str): Pattern Orientation.
      - TANGENT_TO_CURVE
      - MAINTAIN_SEED_ORIENTATION
    pathReverse (bool): Reverse the path of pattern.
    result (str): Result type of pattern along path.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeParts.
    mergeParts (list[Part]): Parts to be merged with pattern along path.
    copiesToSkip (dict{Part: list[indicesToSkip]}): Set copies to skip. It's
      basically a dictionary which contains Part as a key and list of indices to
      skip as values.

  Returns:
  list[Part | Feature]: List of parts/features created.
  
		"""
		pass

	def projection(self,feature, parts, extendEdges=True):
		"""
		Creates projection of a feature from one part to another part.

  Args:
    feature (Feature): Feature that needs to be projected on Part.
    parts (list[Part]): Parts on which feature projection to be.
    extendEdges (bool): If True, extends the edge.
  
		"""
		pass

	def pushPull(self,feature, depth, newPart=False, resultType=None):
		"""
		Pushes or pulls a face or an edge to a specified distance.

  Args:
    feature (Feature): Feature to push or pull.
    depth (float | str): The precise distance. 
      A positive value extends, whereas a negative value contracts.
    newPart (bool): If True, creates a new Part as a result of pushPull operation.
    resultType (str): Result type of pushPull operation. This option is valid
      only for pushPull a sketch on face.
      - NEW_PART
      - ADD
      - REMOVE
      - REPLACE

  Returns:
    Part: If New Part created, otherwise return None.
  
		"""
		pass

	def revolve2(self,profiles, axis, direction="SINGLE", resultType="NEW_PART", mergeTargets=None, flipAxis=False, angle1="0", angle2="0"):
		"""
		New Revolve - Revolve a face, sketch, line, or 2D edge about an axis.

  Args:
    profiles (FeatureArea | FeatureCurve): A face, line, or 2D edge.
    axis (FeatureLinear | FeatureCircular | Axis): An edge, line, cylindrical 
    hole or an Axis.

      Selecting an edge on another part projects the axis of revolution to the
      planar face that will be rotated.
    direction (str): Valid values are: SINGLE, BOTH and SYMMETRY.
    resultType (str): Valid values are: COMBINE, SUBTRACT, INTERSECT and NEW_PART.
    mergeTargets (list[Feature]): Explict merge targets for Result Type.
    flipAxis (bool): If True, axis will be flipped.
    angle1 (float): The angle of revolution.
    angle2 (float): The angle of revolution when direction is Both.

  Returns:
    Part|None: New part created if resultType is NEW_PART.
  
		"""
		pass

	def shell(self,feature, thickness=1):
		"""
		Removes material and create thin walls to generate a shelled part.

  Args:
    feature (FeatureArea): Feature to create a shelled part from.
    thickness (float): Shell thickness.
  
		"""
		pass

	def simplifyHoles(self,entity, minSize="0", maxSize=None):
		"""
		Finds and removes holes and pockets, and find raised areas such as lettering.

  Args:
    entity (Part | Assembly | Feature): Part/Assembly from which you want to 
      remove the holes from or FeatureCircular which needs to be removed.
    minSize (float): Minimum size of hole.
    maxSize (float): Maximum size of hole.
  
		"""
		pass

	def simplifyPlugs(self,entity, minSize="0", maxSize=None):
		"""
		Finds holes and pockets, and plug them by filling the area with a new part

  Args:
    entity (Part | Assembly | Feature): Part/Assembly from which you want to plug 
      the holes or a Circular feature that needs to be plugged.
    minSize (float): Minimum size of plug.
    maxSize (float): Maximum size of plug.
  
		"""
		pass

	def simplifyRounds(self,entity, roundType="ALL", minSize="0", maxSize=None):
		"""
		Finds and removes both round (convex) and fillet (concave) surfaces.

  Args:
    entity (Part | Assembly | Feature): Part/Assembly from which you want to 
      remove the fillets, chamfers from or a Feature to be removed.
    roundType (str): Valid values are: ROUNDS, FILLETS, CHAMFERS and ALL.
    minSize (float): Minimum size of round.
    maxSize (float): Maximum size of round.
  
		"""
		pass

	def sweep(self,profiles, path, solidProfile=None, sweepAsSolid=True, profileOrientation=True, propagate=True, pathIgnoredFeatures=None, guideCurves=None, pathDirection="DIRECTION_1", twistType="NO_TWIST", twistAngle="0", twistTurns="0", twistAngleDir2="0", twistTurnsDir2="0", resultType="NEW_PART", mergeWithAllParts=True, mergeParts=None, twist1Reverse=False, twist2Reverse=False, guideScale="UNIFORM"):
		"""
		Sweep a profile along a path to create a solid or 3D surface.

  Args:
    profiles (FeatureArea | FeatureCurve): A face or a closed sketch.
    path(list[FeatureCurve]): Path for the sweep.
    solidProfile (Part): Sweep profile as solid. Only applicable for solid cylinder.
    sweepAsSolid (bool): If true, sweep as solids otherwise sweep as surfaces.
    profileOrientation (bool): If true, sweep orientation will be normal to the
      path otherwise parallel.
    propagate (bool): If true, all the tangent edges of the input path is also selected.
    pathIgnoredFeatures (list[FeatureCurve]): Edge to be ignored when propagate is True.
    guideCurves (list[FeatureCurve]): Guide curves for the sweep. No guide curves are set by default.
    pathDirection (str): Sweep direction.
      - DIRECTION_1
      - DIRECTION_2
      - BOTH
    twistType (str): Twist type.
      - NO_TWIST
      - ANGLE_TWIST
      - NO_OF_TURNS
    twistAngle (float): Twist angle in DIRECTION_1.
    twistTurns (float): Number of twist turns in DIRECTION_1.
    twistAngleDir2 (float): Twist angle in DIRECTION_2. Applicable only when
      pathDirection is "BOTH".
    twistTurnsDir2 (float): Number of twist turns in DIRECTION_2. Applicable
      only when pathDirection is "BOTH".
    resultType (str): Result type of sweep operation.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeTargets.
    mergeParts (Part): Parts to be merged with sweep operation.
    twist1Reverse (bool): If True, Reverse the twist in DIRECTION_1 or DIRECTION_2.
    twist2Reverse (bool): If True, Reverse the twist in DIRECTION_2. Applicable
      only when pathDirection is "BOTH".
    guideScale (str): Guide scale option. Applicable only when guideCurves is provided.
      - UNIFORM
      - LATERAL

  Returns:
    Part|None: New part created if resultType is NEW_PART.
  
		"""
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

class FeatureAreaOther:
	def __init__(self,*args):
		"""
Feature that is a flat face that can not be simply characterized.
  (not instance of FeaturePlanar, Feature Cylindrical or FeatureSpherical)

  They are not created through the API but can be retrieved from a part.
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	@property
	def area(self):
		pass
	@area.setter
	def area(self):
		pass

	@property
	def cg(self):
		pass
	@cg.setter
	def cg(self):
		pass

	def chamferByAngle(self,feature, angle=45, dist=0.003):
		"""
		Creates chamfer on a Linear/Planar feature.

  Args:
    feature (Feature): Feature that needs to be chamfer.
    angle (float): Chamfer angle from the edge.
    dist (float): Chamfer distance from the edge.
  
		"""
		pass

	def chamferByDistance(self,feature, dist1=0.003, dist2=0.003):
		"""
		Creates chamfer on a linear or planar feature.

  Args:
    feature (Feature): Feature that needs to be chamfer.
    dist1 (float): Chamfer distance from the edge.
    dist2 (float): Chamfer distance from the edge.
  
		"""
		pass

	def circularPattern(self,input, axis, angle=60, count=3, equalSpacing=False, instances=False, symmetry=False, axisReverse=False, result="NEW_PART", mergeWithAllParts=True, mergeParts=None, copiesToSkip=None):
		"""
		Circular Pattern parts or faces around an axis.

  Args:
    input (list[Part] | list[FeatureArea]): Parts or Features to create circular
      pattern.
    axis (math.Vector | FeatureCurve | Axis): Axis is a reference line, edge,
      or axis to which the pattern will be parallel.
    angle (float): Angle within which the copies are equally spaced.
    count (int): Number of copies.
    equalSpacing (bool): If True, equally space the copies within a specified
      Angle.
    instances (bool): If True, any changes to part or face will apply to all
      instances.
    symmetry (bool): Symmetry in Direction 1.
    axisReverse (bool): Reverse the axis in Direction 1.
    result (str): Result type of circular pattern.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeParts.
    mergeParts (list[Part]): Parts to be merged with circular pattern.
    copiesToSkip (dict{Part: list[indicesToSkip]}): Set copies to skip. It's
      basically a dictionary which contains Part as a key and list of indices to
      skip as values.

  Returns:
  list[Part]: List of parts created.
  
		"""
		pass

	@property
	def connectedCurves(self):
		pass
	@connectedCurves.setter
	def connectedCurves(self):
		pass

	@property
	def connectedFaces(self):
		pass
	@connectedFaces.setter
	def connectedFaces(self):
		pass

	@property
	def connectedPoints(self):
		pass
	@connectedPoints.setter
	def connectedPoints(self):
		pass

	def deleteFaces(self,features):
		"""
		Deletes the specified faces from the part.

  Args:
    features (list[Feature]): Features to be removed.
  
		"""
		pass

	def divideCurve(self,curve, divisionPoints, uniformDivision=False):
		"""
		Divide a curve by inserting points along the curve.

    Args:
      curve (FeatureCurve): Curve to divide.
      divisionPoints((listlist[float], bool)): List of divisionPoints (length
        ratio or length along the curve) and the bool value depicts position
        ratio. If True, Divide the curve on length ratio otherwise
        division occurs at length along the curve.
      uniformDivision (bool): If True, Curve is uniformly divided.

    Returns:
      Part: New part created.
    
		"""
		pass

	def draft(self,features, direction, neutralPlane, angle1=3.0, angle2=3.0, flipDrawDirection1=False, flipDrawDirection2=False):
		"""
		Add draft to one or more faces of a part when designing a product that is
     manufactured using injection molding.

  Args:
    features (list[FeatureArea]): Faces to Draft.
    direction (str): The Draft direction. Valid values are: SINGLE, BOTH and SYMMETRY.
    neutralPlane (FeaturePlanar, Plane): A reference plane or an existing face
     in the model. neutralPlane can not be same as draft feature.
    angle1 (float): The angle1 of draft.
    angle2 (float): The angle2 of draft. This is applicable for BOTH or SYMMETRY value for direction.
    flipDrawDirection1 (bool): If True, flips the draw direction of draft in single direction.
    flipDrawDirection2 (bool): If True, flips the draw direction of draft.
      Applicable for BOTH direction.
  
		"""
		pass

	def edgeFillet(self,feature, radius="3 mm", continuity="TANGENT", tangentPropagation=True):
		"""
		Creates fillet on a Linear feature.

  Args:
    feature (Feature): feature that needs to fillet.
    radius (float | str): Radius of the fillet.
    continuity (str): Valid values are: TANGENT and CURVATURE.
    tangentPropagation (bool): If True, selecting an edge will also select all
      of its tangent edges.
  
		"""
		pass

	def extendCurve(self,curve, extensionTypeAndDistance, shape="LINEAR", extendEnds="START", extendAsNewPart=False):
		"""
		Extend a curve and modify the shape of the extension.

    Args:
      curve (FeatureCurve): Extracted Curve to extend.
      extensionTypeAndDistance (list[str, float] | list[str, Feature | Plane]):
        Extension type as string and Distance as float to extend. For
        UP_TO_FEATURE extension type second argument should be either a Feature
        or System Plane.
        Valid extension types are:
          - EXTENSION_DISTANCE
          - INCREMENT_FACTOR
          - TOTAL_LENGTH
          - UP_TO_FEATURE
      shape (str): Shape of extend curve.
        - LINEAR
        - SOFT
        - REFLECTIVE
        - NATURAL
        - ARC
      extendEnds (str): To reverse the curve extension direction.
        - START
        - END
      extendAsNewPart (bool): Create a new part if True, otherwise merge in
        original part.

    Returns:
      Part: New part created.
    
		"""
		pass

	def extract(self,features, maintainReference=True):
		"""
		Extracts geometry features and transfer them into a new part.

  Args:
    features (list[Feature]): Feature to be extracted.
    maintainReference (bool): If true, set reference associativity otherwise not.

  Returns:
    Part: New part created.
  
		"""
		pass

	def faceCurve(self,face, method="POINT", uRatio=True, vRatio=True, ignoreHoles=True, uCurvesCount=5, vCurvesCount=5, uParmRatioForPointMode="0", vParmRatioForPointMode="0", vertexFeature=None, vertexPoint=None):
		"""
		Extract curves from a face in the U or V direction. This is useful for
  creating trim curves that run along a face.

  Args:
    face (FeatureArea): Face on which extract curves.
    method (str): Method for face curve.
      - POINT
      - VERTEX
      - MESH
    uRatio (bool): If True, create U curves.
    vRatio (bool): If True, create V curves.
    ignoreHoles (bool): If True, ignore the holes in face curve.
    uCurvesCount (Int): Set U curves count to create for method type MESH.
    vCurvesCount (Int): Set V curves count to create for method type MESH.
    uParmRatioForPointMode (Float): Set U Param for method type POINT,
      param should be between 0 and 1.
    vParmRatioForPointMode (Float): Set V Param for method type POINT,
      param should be between 0 and 1.
    vertexFeature (FeaturePoint): Feature point to extract iso-param curve for
      method type VERTEX.
    vertexPoint (math.Point): Point to create face curves for method
      type POINT. Point must lie on the face.

  Returns:
    Part: New part created.
    
		"""
		pass

	def findClosestPoint(self,referencePoint):
		"""
		Returns the point on feature that nearest to the specified point.
    
    Args:
      referencePoint (Point) : Reference point to find closest point on feature.
    
    Returns:
      Point : The closest point of the feature from specified point.
    
		"""
		pass

	def getClass(self,classname):
		pass

	def getConnectionPoints(self,uslices=2, vslices=2):
		"""
		Returns a list of points that can be used to visualize how the feature 
    is connected (spider points).

    Args:
      uslices (int) : Number of slices in u-direction.
      vslices (int) : Number of slices in v-direction

    Returns:
      list[Point] : List of points that can be used to visualize 
        how the feature is connected.
    
		"""
		pass

	def getCurvature(self,point):
		"""
		Returns the directions and curvatures at the given point position

    Args:
      point (Point) : Point position at which directions and curvatures are computed.
    
		"""
		pass

	def getNormal(self,point):
		"""
		Return vector perpendicular to surface at a point.

    Args:
      point (Point) : Point position at which normal is computed.
    
		"""
		pass

	def helixCurve(self,profile, type="TURNS_AND_HEIGHT", numTurns=2, pitch=0.003, height=0.01, startAngle="0", curveHand="RIGHT", heightReverse=False, lockDiameterRatio=True, topDiameter="0"):
		"""
		Create a solid loft or a lofted surface from profiles and guide curves.

    Args:
      profile (FeatureCircular): Circular sketch profile.
      type (str): Helix Curve Type.
        - TURNS_AND_HEIGHT
        - TURNS_AND_PITCH
        - HEIGHT_AND_PITCH
      numTurns(float): Number of turns in helix curve.
      pitch (float): Pitch distance of helix curve.
      height (float): Height of helix curve.
      startAngle (float): Start angle of helix curve.
      curveHand (str): Helix curve sweep direction.
        - LEFT
        - RIGHT
      heightReverse (bool): If True, Reverse the height in other direction of
        helix curve.
      lockDiameterRatio (bool): If True, Set lock diameter ratio of helix curve.
      topDiameter (float): Top Diameter of helix curve.

    Returns:
      Part: New part created.
    
		"""
		pass

	def isTouching(self,point):
		"""
		Determines the point is on the surface or not.

    Args:
      point (Point) : Point positionin x, y, z coordinates.
    
		"""
		pass

	def isa(self,type=None, filter=None, **kwds):
		"""
		Determines the object matches the specified settings or not.

    Args:
      type (Part, Assembly, Contact, ..) :  Specify type of the object.
      filter (method) : Return value of specified callback method.
      **kwds : Additional keyword arguments to match attributes.
    
		"""
		pass

	@property
	def ishole(self):
		pass
	@ishole.setter
	def ishole(self):
		pass

	def isperiodic(self):
		"""
		Returns True if it's a periodic area, False otherwise.
		"""
		pass

	def linearPattern(self,input, direction1, direction2=(0, 0, 0), bothDirection=False, spacing1="0.0", count1=3, spacing2="0.0", count2=3, instances=False, symmetry1=False, symmetry2=False, reverseDir1=False, reverseDir2=False, result="NEW_PART", mergeWithAllParts=True, mergeParts=None, copiesToSkip=None, seedOnly=False):
		"""
		Linear Pattern parts or faces along a direction.

  Args:
    input (list[Part] | list[FeatureArea]): Parts or Features to create linear
      pattern.
    direction1 (math.Vector | FeatureCurve | Axis): Direction can be a 
      reference line, edge, or axis to which the pattern will be parallel.
    direction2 (math.Vector | FeatureCurve | Axis): Direction can be a 
      reference line, edge, or axis to which the pattern will be parallel.
    bothDirection (bool): If True, sets in both direction otherwise single
      direction.
    spacing1 (float): Distance between two copies.
    count1 (int): Number of copies.
    spacing2 (float): Distance between two copies.
    count2 (int): Number of copies.
    instances (bool): If True, any changes to part or face will apply to all
      instances.
    symmetry1 (bool): Symmetry in Direction 1.
    symmetry2 (bool): Symmetry in Direction 2.
    reverseDir1 (bool): Reverse the pattern direction in Direction 1.
    reverseDir2 (bool): Reverse the pattern direction in Direction 2.
    result (str): Result type of linear pattern.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeParts.
    mergeParts (list[Part]): Parts to be merged with linear pattern.
    copiesToSkip ((dict{Part: list[tuplex,y)]}): Set copies to skip. Here x and
      y are the indices in 2D space of copy , which needs to be skipped.
    seedOnly (bool): If True, pattern the entities only along the first row and
      first column.

  Returns:
  list[Part]: List of parts created.
  
		"""
		pass

	@property
	def location(self):
		pass
	@location.setter
	def location(self):
		pass

	def loft(self,profiles, loftAsSolid=True, guideCurves=None, arcLengthProfiles=False, arcLengthGuides=False, swapSurface=False, closed=False, resultType="NEW_PART", mergeWithAllParts=True, mergeParts=None, profileChain=False, guideCurvesTangent=False):
		"""
		Create a solid loft or a lofted surface from profiles and guide curves.

  Args:
    profiles (list[FeatureArea | FeatureCurve]): Faces, closed sketches or curves.
    loftAsSolid (bool): If true, sweep as solids otherwise sweep as surfaces.
    guideCurves(list[FeatureCurve]): Guide curves for the loft.
    arcLengthProfiles (bool): If True, Set Arc Length Parametrization on profiles.
    arcLengthGuides (bool): If True, Set Arc Length Parametrization on guides.
    swapSurface (bool): If True, interchange the profiles and rails to get
      preferred shape.
    closed (bool): If True, close the loft.
    resultType (str): Result type of loft operation.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeTargets.
    mergeParts (Part): Parts to be merged with loft operation.
    profileChain (bool): True, Allows to select profile's connected edges.
    guideCurvesTangent (bool): True, Allows to select  guideCurve's connected edges.

  Returns:
    Part|None: New part created if resultType is NEW_PART.
  
		"""
		pass

	@property
	def minBoundingBox(self):
		pass
	@minBoundingBox.setter
	def minBoundingBox(self):
		pass

	def moveFaces(self,features, position, duplicate=False):
		"""
		Translate, rotate, copy, or extend features.

  Args:
    features (list[FeatureArea]): The features to move.
    position (math.Matrix44): The position to move the features at.
    duplicate (bool): If True, copy the features at given position.
  
		"""
		pass

	def multiSweep(self,profiles, path, sweepAsSolid=True, arcLengthProfiles=False, arcLengthGuides=False, orientation="PERPENDICULAR", normalToSurface=None, resultType="NEW_PART", mergeWithAllParts=True, mergeParts=None):
		"""
		Sweep multiple profiles along a path to create a solid or surface.

  Args:
    profiles (list[FeatureArea | FeatureCurve]): Faces or closed sketches.
    path(list[FeatureCurve]): Path for the multiSweep.
    sweepAsSolid (bool): If true, sweep as solids otherwise sweep as surfaces.
    arcLengthProfiles (bool): If True, Set Arc Length Parametrization on profiles.
    arcLengthGuides (bool): If True, Set Arc Length Parametrization on path.
    orientation (str): Orientation for multiSweep.
      - PERPENDICULAR
      - PARALLEL
      - NORMAL_TO_SURFACE
    normalToSurface (list[FeatureArea]): Face to which sweep orientation will be
      normal.
    resultType (str): Result type of multiSweep operation.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeTargets.
    mergeParts (Part): Parts to be merged with sweep operation.

  Returns:
    Part|None: New part created if resultType is NEW_PART.
  
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	def offset(self,input, value, newPart=False):
		"""
		Offset surfaces or parts.

  Args:
    input (list[Part] | list[Feature])
    value (float | str): Desired offset distance. Negative value means inward direction.
      If value is a string it can be a Model Variable or a value with units.
    newPart (bool): If True, creates a new part.

  Returns:
    Part|None: New part created if newPart was True.
  
		"""
		pass

	@property
	def part(self):
		pass
	@part.setter
	def part(self):
		pass

	def partition(self,entity, thickness="1 mm", reverseDirection=False, minSize="0", maxSize=1):
		"""
		Divides a solid part into design and non-design regions by selecting a
  hole, pocket, or face to offset.

  Args:
    entity (Part | Assembly | [[Feature]]): Part/Assembly from which you want to
      plug the holes or a feature to be partitioned. If it is a feature then it
      should be list of feature list, where the features in internal feature
      list are related to each other.
    thickness (float): The partition thickness consider in mm.
    reverseDirection (bool): Switch the direction of the offset for the
      partition.
    minSize (float): Minimum size of partition to find features.
    maxSize (float): Maximum size of partition to find features.

  Returns:
    Part: New part created.
  
		"""
		pass

	def patternAlongPath(self,input, path, count=3, equalSpacing=False, spacing=0.01, instances=False, method="TRANSFORM", orientation="MAINTAIN_SEED_ORIENTATION", pathReverse=False, result="NEW_PART", mergeWithAllParts=True, mergeParts=None, copiesToSkip=None):
		"""
		Pattern parts or faces along curve.

   Args:
    input (list[Part] | list[FeatureArea]): Parts or Features to create pattern
      along the curve.
    path (list[FeatureCurve]): Path for pattern.
    count (int): Number of copies.
    equalSpacing (bool): If True, equally space the copies.
    spacing (float): Distance between two copies.
    instances (bool): If True, any changes to part or face will apply to all instances.
    method (str): Pattern method.
      - TRANSFORM
      - OFFSET
    orientation (str): Pattern Orientation.
      - TANGENT_TO_CURVE
      - MAINTAIN_SEED_ORIENTATION
    pathReverse (bool): Reverse the path of pattern.
    result (str): Result type of pattern along path.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeParts.
    mergeParts (list[Part]): Parts to be merged with pattern along path.
    copiesToSkip (dict{Part: list[indicesToSkip]}): Set copies to skip. It's
      basically a dictionary which contains Part as a key and list of indices to
      skip as values.

  Returns:
  list[Part | Feature]: List of parts/features created.
  
		"""
		pass

	def projection(self,feature, parts, extendEdges=True):
		"""
		Creates projection of a feature from one part to another part.

  Args:
    feature (Feature): Feature that needs to be projected on Part.
    parts (list[Part]): Parts on which feature projection to be.
    extendEdges (bool): If True, extends the edge.
  
		"""
		pass

	def pushPull(self,feature, depth, newPart=False, resultType=None):
		"""
		Pushes or pulls a face or an edge to a specified distance.

  Args:
    feature (Feature): Feature to push or pull.
    depth (float | str): The precise distance. 
      A positive value extends, whereas a negative value contracts.
    newPart (bool): If True, creates a new Part as a result of pushPull operation.
    resultType (str): Result type of pushPull operation. This option is valid
      only for pushPull a sketch on face.
      - NEW_PART
      - ADD
      - REMOVE
      - REPLACE

  Returns:
    Part: If New Part created, otherwise return None.
  
		"""
		pass

	def revolve2(self,profiles, axis, direction="SINGLE", resultType="NEW_PART", mergeTargets=None, flipAxis=False, angle1="0", angle2="0"):
		"""
		New Revolve - Revolve a face, sketch, line, or 2D edge about an axis.

  Args:
    profiles (FeatureArea | FeatureCurve): A face, line, or 2D edge.
    axis (FeatureLinear | FeatureCircular | Axis): An edge, line, cylindrical 
    hole or an Axis.

      Selecting an edge on another part projects the axis of revolution to the
      planar face that will be rotated.
    direction (str): Valid values are: SINGLE, BOTH and SYMMETRY.
    resultType (str): Valid values are: COMBINE, SUBTRACT, INTERSECT and NEW_PART.
    mergeTargets (list[Feature]): Explict merge targets for Result Type.
    flipAxis (bool): If True, axis will be flipped.
    angle1 (float): The angle of revolution.
    angle2 (float): The angle of revolution when direction is Both.

  Returns:
    Part|None: New part created if resultType is NEW_PART.
  
		"""
		pass

	def shell(self,feature, thickness=1):
		"""
		Removes material and create thin walls to generate a shelled part.

  Args:
    feature (FeatureArea): Feature to create a shelled part from.
    thickness (float): Shell thickness.
  
		"""
		pass

	def simplifyHoles(self,entity, minSize="0", maxSize=None):
		"""
		Finds and removes holes and pockets, and find raised areas such as lettering.

  Args:
    entity (Part | Assembly | Feature): Part/Assembly from which you want to 
      remove the holes from or FeatureCircular which needs to be removed.
    minSize (float): Minimum size of hole.
    maxSize (float): Maximum size of hole.
  
		"""
		pass

	def simplifyPlugs(self,entity, minSize="0", maxSize=None):
		"""
		Finds holes and pockets, and plug them by filling the area with a new part

  Args:
    entity (Part | Assembly | Feature): Part/Assembly from which you want to plug 
      the holes or a Circular feature that needs to be plugged.
    minSize (float): Minimum size of plug.
    maxSize (float): Maximum size of plug.
  
		"""
		pass

	def simplifyRounds(self,entity, roundType="ALL", minSize="0", maxSize=None):
		"""
		Finds and removes both round (convex) and fillet (concave) surfaces.

  Args:
    entity (Part | Assembly | Feature): Part/Assembly from which you want to 
      remove the fillets, chamfers from or a Feature to be removed.
    roundType (str): Valid values are: ROUNDS, FILLETS, CHAMFERS and ALL.
    minSize (float): Minimum size of round.
    maxSize (float): Maximum size of round.
  
		"""
		pass

	def sweep(self,profiles, path, solidProfile=None, sweepAsSolid=True, profileOrientation=True, propagate=True, pathIgnoredFeatures=None, guideCurves=None, pathDirection="DIRECTION_1", twistType="NO_TWIST", twistAngle="0", twistTurns="0", twistAngleDir2="0", twistTurnsDir2="0", resultType="NEW_PART", mergeWithAllParts=True, mergeParts=None, twist1Reverse=False, twist2Reverse=False, guideScale="UNIFORM"):
		"""
		Sweep a profile along a path to create a solid or 3D surface.

  Args:
    profiles (FeatureArea | FeatureCurve): A face or a closed sketch.
    path(list[FeatureCurve]): Path for the sweep.
    solidProfile (Part): Sweep profile as solid. Only applicable for solid cylinder.
    sweepAsSolid (bool): If true, sweep as solids otherwise sweep as surfaces.
    profileOrientation (bool): If true, sweep orientation will be normal to the
      path otherwise parallel.
    propagate (bool): If true, all the tangent edges of the input path is also selected.
    pathIgnoredFeatures (list[FeatureCurve]): Edge to be ignored when propagate is True.
    guideCurves (list[FeatureCurve]): Guide curves for the sweep. No guide curves are set by default.
    pathDirection (str): Sweep direction.
      - DIRECTION_1
      - DIRECTION_2
      - BOTH
    twistType (str): Twist type.
      - NO_TWIST
      - ANGLE_TWIST
      - NO_OF_TURNS
    twistAngle (float): Twist angle in DIRECTION_1.
    twistTurns (float): Number of twist turns in DIRECTION_1.
    twistAngleDir2 (float): Twist angle in DIRECTION_2. Applicable only when
      pathDirection is "BOTH".
    twistTurnsDir2 (float): Number of twist turns in DIRECTION_2. Applicable
      only when pathDirection is "BOTH".
    resultType (str): Result type of sweep operation.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeTargets.
    mergeParts (Part): Parts to be merged with sweep operation.
    twist1Reverse (bool): If True, Reverse the twist in DIRECTION_1 or DIRECTION_2.
    twist2Reverse (bool): If True, Reverse the twist in DIRECTION_2. Applicable
      only when pathDirection is "BOTH".
    guideScale (str): Guide scale option. Applicable only when guideCurves is provided.
      - UNIFORM
      - LATERAL

  Returns:
    Part|None: New part created if resultType is NEW_PART.
  
		"""
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

class FeatureCircular:
	def __init__(self,*args):
		"""
Represents the circumferences of a part.
  
  They are not created through the API but can be retrieved from a part.
  
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	@property
	def axis(self):
		pass
	@axis.setter
	def axis(self):
		pass

	@property
	def cg(self):
		pass
	@cg.setter
	def cg(self):
		pass

	def chamferByAngle(self,feature, angle=45, dist=0.003):
		"""
		Creates chamfer on a Linear/Planar feature.

  Args:
    feature (Feature): Feature that needs to be chamfer.
    angle (float): Chamfer angle from the edge.
    dist (float): Chamfer distance from the edge.
  
		"""
		pass

	def chamferByDistance(self,feature, dist1=0.003, dist2=0.003):
		"""
		Creates chamfer on a linear or planar feature.

  Args:
    feature (Feature): Feature that needs to be chamfer.
    dist1 (float): Chamfer distance from the edge.
    dist2 (float): Chamfer distance from the edge.
  
		"""
		pass

	def circularPattern(self,input, axis, angle=60, count=3, equalSpacing=False, instances=False, symmetry=False, axisReverse=False, result="NEW_PART", mergeWithAllParts=True, mergeParts=None, copiesToSkip=None):
		"""
		Circular Pattern parts or faces around an axis.

  Args:
    input (list[Part] | list[FeatureArea]): Parts or Features to create circular
      pattern.
    axis (math.Vector | FeatureCurve | Axis): Axis is a reference line, edge,
      or axis to which the pattern will be parallel.
    angle (float): Angle within which the copies are equally spaced.
    count (int): Number of copies.
    equalSpacing (bool): If True, equally space the copies within a specified
      Angle.
    instances (bool): If True, any changes to part or face will apply to all
      instances.
    symmetry (bool): Symmetry in Direction 1.
    axisReverse (bool): Reverse the axis in Direction 1.
    result (str): Result type of circular pattern.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeParts.
    mergeParts (list[Part]): Parts to be merged with circular pattern.
    copiesToSkip (dict{Part: list[indicesToSkip]}): Set copies to skip. It's
      basically a dictionary which contains Part as a key and list of indices to
      skip as values.

  Returns:
  list[Part]: List of parts created.
  
		"""
		pass

	@property
	def connectedCurves(self):
		pass
	@connectedCurves.setter
	def connectedCurves(self):
		pass

	@property
	def connectedFaces(self):
		pass
	@connectedFaces.setter
	def connectedFaces(self):
		pass

	@property
	def connectedPoints(self):
		pass
	@connectedPoints.setter
	def connectedPoints(self):
		pass

	def createPipe(self,path, section="CIRCLE", size=0.01, width=0.01, thickness="0.0", angle=None, ignoredFeatures=None, propagate=False, resultType="COMBINE"):
		"""
		 Create Pipe for FeatureCurve.

  Args:
    path (list[FeatureCurve])
    section (str): The Pipe profile type. Valid choices are: CIRCLE, SQUARE, TRIANGLE
      and RECTANGLE.
    size (float | str): Length of the pipe.
      If value is a string it can be a Model Variable or a value with units.
    width (float): Width of the pipe, only applicable for Rectangular profile.
    thickness (float | str): Pipe thickness. 
      If not set or set to zero, it will be solid pipe.
      If value is a string it can be a Model Variable or a value with units.
    angle (float): Angle in radians. Only for xy alignment.
    ignoredFeatures: Ignored Features. Not mandatory. In propagated cases,
      if we need to ignore certain curves.
    propagate (bool): if True enables propagate option, otherwise disabled.
    resultType (str): Valid values are: COMBINE, SUBTRACT, INTERSECT and NEW_PART.

  Returns:
    Part: New part created.
  
		"""
		pass

	def divideCurve(self,curve, divisionPoints, uniformDivision=False):
		"""
		Divide a curve by inserting points along the curve.

    Args:
      curve (FeatureCurve): Curve to divide.
      divisionPoints((listlist[float], bool)): List of divisionPoints (length
        ratio or length along the curve) and the bool value depicts position
        ratio. If True, Divide the curve on length ratio otherwise
        division occurs at length along the curve.
      uniformDivision (bool): If True, Curve is uniformly divided.

    Returns:
      Part: New part created.
    
		"""
		pass

	def edgeFillet(self,feature, radius="3 mm", continuity="TANGENT", tangentPropagation=True):
		"""
		Creates fillet on a Linear feature.

  Args:
    feature (Feature): feature that needs to fillet.
    radius (float | str): Radius of the fillet.
    continuity (str): Valid values are: TANGENT and CURVATURE.
    tangentPropagation (bool): If True, selecting an edge will also select all
      of its tangent edges.
  
		"""
		pass

	def extendCurve(self,curve, extensionTypeAndDistance, shape="LINEAR", extendEnds="START", extendAsNewPart=False):
		"""
		Extend a curve and modify the shape of the extension.

    Args:
      curve (FeatureCurve): Extracted Curve to extend.
      extensionTypeAndDistance (list[str, float] | list[str, Feature | Plane]):
        Extension type as string and Distance as float to extend. For
        UP_TO_FEATURE extension type second argument should be either a Feature
        or System Plane.
        Valid extension types are:
          - EXTENSION_DISTANCE
          - INCREMENT_FACTOR
          - TOTAL_LENGTH
          - UP_TO_FEATURE
      shape (str): Shape of extend curve.
        - LINEAR
        - SOFT
        - REFLECTIVE
        - NATURAL
        - ARC
      extendEnds (str): To reverse the curve extension direction.
        - START
        - END
      extendAsNewPart (bool): Create a new part if True, otherwise merge in
        original part.

    Returns:
      Part: New part created.
    
		"""
		pass

	def extendSurface(self,edgesToExtend=None, allEdgesToExtend=False, extensionType="LINEAR", extent="EXTENSION_LENGTH", distance=0.01, extendUptoSurface=None, extendUptoPlane=None, createNewPart=False):
		"""
		Extend a surface along one or more edges.

  Args:
    edgesToExtend (list[FeatureCurve]): Edges of the surface to extend. Valid
      only if allEdgesToExtend is False.
    allEdgesToExtend (float): If True, it will consider all the edges of the
      surface and ignore edgesToExtend values.
    extensionType (str): Extension Type.
      - LINEAR
      - SOFT
      - REFLECTIVE
    extent (str): Extent of surface.
      - EXTENSION_LENGTH
      - UP_TO_PLANE
      - UP_TO_SURFACE
    distance (float): Extension distance of surface.
    extendUptoSurface (Part): System Plane up to which surface is extended. Only
      valid for UP_TO_SURFACE extent.
    extendUptoPlane (Plane): Plane up to which surface is extended. Only
      valid for UP_TO_PLANE extent.
    createNewPart (bool): If True, new part is created as a extended surface
      otherwise not.

  Returns:
    Part|None: New part created if createNewPart is True.
    
		"""
		pass

	def extract(self,features, maintainReference=True):
		"""
		Extracts geometry features and transfer them into a new part.

  Args:
    features (list[Feature]): Feature to be extracted.
    maintainReference (bool): If true, set reference associativity otherwise not.

  Returns:
    Part: New part created.
  
		"""
		pass

	def faceCurve(self,face, method="POINT", uRatio=True, vRatio=True, ignoreHoles=True, uCurvesCount=5, vCurvesCount=5, uParmRatioForPointMode="0", vParmRatioForPointMode="0", vertexFeature=None, vertexPoint=None):
		"""
		Extract curves from a face in the U or V direction. This is useful for
  creating trim curves that run along a face.

  Args:
    face (FeatureArea): Face on which extract curves.
    method (str): Method for face curve.
      - POINT
      - VERTEX
      - MESH
    uRatio (bool): If True, create U curves.
    vRatio (bool): If True, create V curves.
    ignoreHoles (bool): If True, ignore the holes in face curve.
    uCurvesCount (Int): Set U curves count to create for method type MESH.
    vCurvesCount (Int): Set V curves count to create for method type MESH.
    uParmRatioForPointMode (Float): Set U Param for method type POINT,
      param should be between 0 and 1.
    vParmRatioForPointMode (Float): Set V Param for method type POINT,
      param should be between 0 and 1.
    vertexFeature (FeaturePoint): Feature point to extract iso-param curve for
      method type VERTEX.
    vertexPoint (math.Point): Point to create face curves for method
      type POINT. Point must lie on the face.

  Returns:
    Part: New part created.
    
		"""
		pass

	def findClosestPoint(self,referencePoint):
		"""
		Returns the point on feature that nearest to the specified point.
    
    Args:
      referencePoint (Point) : Reference point to find closest point on feature.
    
    Returns:
      Point : The closest point of the feature from specified point.
    
		"""
		pass

	def getClass(self,classname):
		pass

	def getConnectionPoints(self,uslices=2, vslices=None):
		"""
		Return a list of points that can be used to visualize how the feature
    is connected (spider points).

    Args:
      uslices (int) : Number of slices in u-direction.
      vslices (int) : Number of slices in v-direction.

    Returns:
      list[Point] : Points that can be used to visualize how the 
      feature is connected.
    
		"""
		pass

	def helixCurve(self,profile, type="TURNS_AND_HEIGHT", numTurns=2, pitch=0.003, height=0.01, startAngle="0", curveHand="RIGHT", heightReverse=False, lockDiameterRatio=True, topDiameter="0"):
		"""
		Create a solid loft or a lofted surface from profiles and guide curves.

    Args:
      profile (FeatureCircular): Circular sketch profile.
      type (str): Helix Curve Type.
        - TURNS_AND_HEIGHT
        - TURNS_AND_PITCH
        - HEIGHT_AND_PITCH
      numTurns(float): Number of turns in helix curve.
      pitch (float): Pitch distance of helix curve.
      height (float): Height of helix curve.
      startAngle (float): Start angle of helix curve.
      curveHand (str): Helix curve sweep direction.
        - LEFT
        - RIGHT
      heightReverse (bool): If True, Reverse the height in other direction of
        helix curve.
      lockDiameterRatio (bool): If True, Set lock diameter ratio of helix curve.
      topDiameter (float): Top Diameter of helix curve.

    Returns:
      Part: New part created.
    
		"""
		pass

	def isTouching(self,point):
		"""
		Determines the point is on the curve or not. 

    Args:
      point (Point) : Point position x,y,z.
    
		"""
		pass

	def isa(self,type=None, filter=None, **kwds):
		"""
		Determines the object matches the specified settings or not.

    Args:
      type (Part, Assembly, Contact, ..) :  Specify type of the object.
      filter (method) : Return value of specified callback method.
      **kwds : Additional keyword arguments to match attributes.
    
		"""
		pass

	@property
	def ishole(self):
		pass
	@ishole.setter
	def ishole(self):
		pass

	@property
	def length(self):
		pass
	@length.setter
	def length(self):
		pass

	def linearPattern(self,input, direction1, direction2=(0, 0, 0), bothDirection=False, spacing1="0.0", count1=3, spacing2="0.0", count2=3, instances=False, symmetry1=False, symmetry2=False, reverseDir1=False, reverseDir2=False, result="NEW_PART", mergeWithAllParts=True, mergeParts=None, copiesToSkip=None, seedOnly=False):
		"""
		Linear Pattern parts or faces along a direction.

  Args:
    input (list[Part] | list[FeatureArea]): Parts or Features to create linear
      pattern.
    direction1 (math.Vector | FeatureCurve | Axis): Direction can be a 
      reference line, edge, or axis to which the pattern will be parallel.
    direction2 (math.Vector | FeatureCurve | Axis): Direction can be a 
      reference line, edge, or axis to which the pattern will be parallel.
    bothDirection (bool): If True, sets in both direction otherwise single
      direction.
    spacing1 (float): Distance between two copies.
    count1 (int): Number of copies.
    spacing2 (float): Distance between two copies.
    count2 (int): Number of copies.
    instances (bool): If True, any changes to part or face will apply to all
      instances.
    symmetry1 (bool): Symmetry in Direction 1.
    symmetry2 (bool): Symmetry in Direction 2.
    reverseDir1 (bool): Reverse the pattern direction in Direction 1.
    reverseDir2 (bool): Reverse the pattern direction in Direction 2.
    result (str): Result type of linear pattern.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeParts.
    mergeParts (list[Part]): Parts to be merged with linear pattern.
    copiesToSkip ((dict{Part: list[tuplex,y)]}): Set copies to skip. Here x and
      y are the indices in 2D space of copy , which needs to be skipped.
    seedOnly (bool): If True, pattern the entities only along the first row and
      first column.

  Returns:
  list[Part]: List of parts created.
  
		"""
		pass

	@property
	def location(self):
		pass
	@location.setter
	def location(self):
		pass

	def loft(self,profiles, loftAsSolid=True, guideCurves=None, arcLengthProfiles=False, arcLengthGuides=False, swapSurface=False, closed=False, resultType="NEW_PART", mergeWithAllParts=True, mergeParts=None, profileChain=False, guideCurvesTangent=False):
		"""
		Create a solid loft or a lofted surface from profiles and guide curves.

  Args:
    profiles (list[FeatureArea | FeatureCurve]): Faces, closed sketches or curves.
    loftAsSolid (bool): If true, sweep as solids otherwise sweep as surfaces.
    guideCurves(list[FeatureCurve]): Guide curves for the loft.
    arcLengthProfiles (bool): If True, Set Arc Length Parametrization on profiles.
    arcLengthGuides (bool): If True, Set Arc Length Parametrization on guides.
    swapSurface (bool): If True, interchange the profiles and rails to get
      preferred shape.
    closed (bool): If True, close the loft.
    resultType (str): Result type of loft operation.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeTargets.
    mergeParts (Part): Parts to be merged with loft operation.
    profileChain (bool): True, Allows to select profile's connected edges.
    guideCurvesTangent (bool): True, Allows to select  guideCurve's connected edges.

  Returns:
    Part|None: New part created if resultType is NEW_PART.
  
		"""
		pass

	@property
	def minBoundingBox(self):
		pass
	@minBoundingBox.setter
	def minBoundingBox(self):
		pass

	def moveFaces(self,features, position, duplicate=False):
		"""
		Translate, rotate, copy, or extend features.

  Args:
    features (list[FeatureArea]): The features to move.
    position (math.Matrix44): The position to move the features at.
    duplicate (bool): If True, copy the features at given position.
  
		"""
		pass

	def multiSweep(self,profiles, path, sweepAsSolid=True, arcLengthProfiles=False, arcLengthGuides=False, orientation="PERPENDICULAR", normalToSurface=None, resultType="NEW_PART", mergeWithAllParts=True, mergeParts=None):
		"""
		Sweep multiple profiles along a path to create a solid or surface.

  Args:
    profiles (list[FeatureArea | FeatureCurve]): Faces or closed sketches.
    path(list[FeatureCurve]): Path for the multiSweep.
    sweepAsSolid (bool): If true, sweep as solids otherwise sweep as surfaces.
    arcLengthProfiles (bool): If True, Set Arc Length Parametrization on profiles.
    arcLengthGuides (bool): If True, Set Arc Length Parametrization on path.
    orientation (str): Orientation for multiSweep.
      - PERPENDICULAR
      - PARALLEL
      - NORMAL_TO_SURFACE
    normalToSurface (list[FeatureArea]): Face to which sweep orientation will be
      normal.
    resultType (str): Result type of multiSweep operation.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeTargets.
    mergeParts (Part): Parts to be merged with sweep operation.

  Returns:
    Part|None: New part created if resultType is NEW_PART.
  
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	@property
	def normal(self):
		pass
	@normal.setter
	def normal(self):
		pass

	def offset(self,input, value, newPart=False):
		"""
		Offset surfaces or parts.

  Args:
    input (list[Part] | list[Feature])
    value (float | str): Desired offset distance. Negative value means inward direction.
      If value is a string it can be a Model Variable or a value with units.
    newPart (bool): If True, creates a new part.

  Returns:
    Part|None: New part created if newPart was True.
  
		"""
		pass

	def offsetCurves(self,curve, offsetDistance=0.01, extensionType="NATURAL", symmetry=False, endOptions="OPEN", elevationType="NONE", elevationDistance="0.0"):
		"""
		Create a copy of one or more curves at a specifies distance from the source
  curves This tool can be used on both 2D and 3D curves.

  Args:
    curve (FeatureCurve): Curve to create offset curve.
    offsetDistance (float): Offset distance form actual curve.
    extensionType (str): Extension Type for offset curve.
      - NATURAL
      - ROUND
      - LINEAR
    symmetry (bool): If True, offset curves are created in both direction.
    endOptions (str): End Options.
      - OPEN
      - CLOSED_AND_STRAIGHT_ENDS
      - CLOSED_AND_ROUNDED
    elevationType (str): Elevation Type.
      - NONE
      - NORMAL
      - CUSTOM
    elevationDistance (float): Elevation distance for the offset curve.

  Returns:
    Part: New part created.
    
		"""
		pass

	@property
	def part(self):
		pass
	@part.setter
	def part(self):
		pass

	def patch(self,features):
		"""
		Creates patches to fill in specified missing surfaces.

  Args:
    features (list[Feature]): Features to be patched.

  Returns:
    list[Part]: New parts created.
  
		"""
		pass

	def patternAlongPath(self,input, path, count=3, equalSpacing=False, spacing=0.01, instances=False, method="TRANSFORM", orientation="MAINTAIN_SEED_ORIENTATION", pathReverse=False, result="NEW_PART", mergeWithAllParts=True, mergeParts=None, copiesToSkip=None):
		"""
		Pattern parts or faces along curve.

   Args:
    input (list[Part] | list[FeatureArea]): Parts or Features to create pattern
      along the curve.
    path (list[FeatureCurve]): Path for pattern.
    count (int): Number of copies.
    equalSpacing (bool): If True, equally space the copies.
    spacing (float): Distance between two copies.
    instances (bool): If True, any changes to part or face will apply to all instances.
    method (str): Pattern method.
      - TRANSFORM
      - OFFSET
    orientation (str): Pattern Orientation.
      - TANGENT_TO_CURVE
      - MAINTAIN_SEED_ORIENTATION
    pathReverse (bool): Reverse the path of pattern.
    result (str): Result type of pattern along path.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeParts.
    mergeParts (list[Part]): Parts to be merged with pattern along path.
    copiesToSkip (dict{Part: list[indicesToSkip]}): Set copies to skip. It's
      basically a dictionary which contains Part as a key and list of indices to
      skip as values.

  Returns:
  list[Part | Feature]: List of parts/features created.
  
		"""
		pass

	@property
	def polyline(self):
		pass
	@polyline.setter
	def polyline(self):
		pass

	def projection(self,feature, parts, extendEdges=True):
		"""
		Creates projection of a feature from one part to another part.

  Args:
    feature (Feature): Feature that needs to be projected on Part.
    parts (list[Part]): Parts on which feature projection to be.
    extendEdges (bool): If True, extends the edge.
  
		"""
		pass

	def pushPull(self,feature, depth, newPart=False, resultType=None):
		"""
		Pushes or pulls a face or an edge to a specified distance.

  Args:
    feature (Feature): Feature to push or pull.
    depth (float | str): The precise distance. 
      A positive value extends, whereas a negative value contracts.
    newPart (bool): If True, creates a new Part as a result of pushPull operation.
    resultType (str): Result type of pushPull operation. This option is valid
      only for pushPull a sketch on face.
      - NEW_PART
      - ADD
      - REMOVE
      - REPLACE

  Returns:
    Part: If New Part created, otherwise return None.
  
		"""
		pass

	@property
	def radius(self):
		pass
	@radius.setter
	def radius(self):
		pass

	def revolve2(self,profiles, axis, direction="SINGLE", resultType="NEW_PART", mergeTargets=None, flipAxis=False, angle1="0", angle2="0"):
		"""
		New Revolve - Revolve a face, sketch, line, or 2D edge about an axis.

  Args:
    profiles (FeatureArea | FeatureCurve): A face, line, or 2D edge.
    axis (FeatureLinear | FeatureCircular | Axis): An edge, line, cylindrical 
    hole or an Axis.

      Selecting an edge on another part projects the axis of revolution to the
      planar face that will be rotated.
    direction (str): Valid values are: SINGLE, BOTH and SYMMETRY.
    resultType (str): Valid values are: COMBINE, SUBTRACT, INTERSECT and NEW_PART.
    mergeTargets (list[Feature]): Explict merge targets for Result Type.
    flipAxis (bool): If True, axis will be flipped.
    angle1 (float): The angle of revolution.
    angle2 (float): The angle of revolution when direction is Both.

  Returns:
    Part|None: New part created if resultType is NEW_PART.
  
		"""
		pass

	def sweep(self,profiles, path, solidProfile=None, sweepAsSolid=True, profileOrientation=True, propagate=True, pathIgnoredFeatures=None, guideCurves=None, pathDirection="DIRECTION_1", twistType="NO_TWIST", twistAngle="0", twistTurns="0", twistAngleDir2="0", twistTurnsDir2="0", resultType="NEW_PART", mergeWithAllParts=True, mergeParts=None, twist1Reverse=False, twist2Reverse=False, guideScale="UNIFORM"):
		"""
		Sweep a profile along a path to create a solid or 3D surface.

  Args:
    profiles (FeatureArea | FeatureCurve): A face or a closed sketch.
    path(list[FeatureCurve]): Path for the sweep.
    solidProfile (Part): Sweep profile as solid. Only applicable for solid cylinder.
    sweepAsSolid (bool): If true, sweep as solids otherwise sweep as surfaces.
    profileOrientation (bool): If true, sweep orientation will be normal to the
      path otherwise parallel.
    propagate (bool): If true, all the tangent edges of the input path is also selected.
    pathIgnoredFeatures (list[FeatureCurve]): Edge to be ignored when propagate is True.
    guideCurves (list[FeatureCurve]): Guide curves for the sweep. No guide curves are set by default.
    pathDirection (str): Sweep direction.
      - DIRECTION_1
      - DIRECTION_2
      - BOTH
    twistType (str): Twist type.
      - NO_TWIST
      - ANGLE_TWIST
      - NO_OF_TURNS
    twistAngle (float): Twist angle in DIRECTION_1.
    twistTurns (float): Number of twist turns in DIRECTION_1.
    twistAngleDir2 (float): Twist angle in DIRECTION_2. Applicable only when
      pathDirection is "BOTH".
    twistTurnsDir2 (float): Number of twist turns in DIRECTION_2. Applicable
      only when pathDirection is "BOTH".
    resultType (str): Result type of sweep operation.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeTargets.
    mergeParts (Part): Parts to be merged with sweep operation.
    twist1Reverse (bool): If True, Reverse the twist in DIRECTION_1 or DIRECTION_2.
    twist2Reverse (bool): If True, Reverse the twist in DIRECTION_2. Applicable
      only when pathDirection is "BOTH".
    guideScale (str): Guide scale option. Applicable only when guideCurves is provided.
      - UNIFORM
      - LATERAL

  Returns:
    Part|None: New part created if resultType is NEW_PART.
  
		"""
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

class FeatureConical:
	def __init__(self,*args):
		"""
Cone shaped feature.
  
  They are not created through the API but can be retrieved from a part.
  
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	@property
	def area(self):
		pass
	@area.setter
	def area(self):
		pass

	@property
	def axis(self):
		pass
	@axis.setter
	def axis(self):
		pass

	@property
	def cg(self):
		pass
	@cg.setter
	def cg(self):
		pass

	def chamferByAngle(self,feature, angle=45, dist=0.003):
		"""
		Creates chamfer on a Linear/Planar feature.

  Args:
    feature (Feature): Feature that needs to be chamfer.
    angle (float): Chamfer angle from the edge.
    dist (float): Chamfer distance from the edge.
  
		"""
		pass

	def chamferByDistance(self,feature, dist1=0.003, dist2=0.003):
		"""
		Creates chamfer on a linear or planar feature.

  Args:
    feature (Feature): Feature that needs to be chamfer.
    dist1 (float): Chamfer distance from the edge.
    dist2 (float): Chamfer distance from the edge.
  
		"""
		pass

	def circularPattern(self,input, axis, angle=60, count=3, equalSpacing=False, instances=False, symmetry=False, axisReverse=False, result="NEW_PART", mergeWithAllParts=True, mergeParts=None, copiesToSkip=None):
		"""
		Circular Pattern parts or faces around an axis.

  Args:
    input (list[Part] | list[FeatureArea]): Parts or Features to create circular
      pattern.
    axis (math.Vector | FeatureCurve | Axis): Axis is a reference line, edge,
      or axis to which the pattern will be parallel.
    angle (float): Angle within which the copies are equally spaced.
    count (int): Number of copies.
    equalSpacing (bool): If True, equally space the copies within a specified
      Angle.
    instances (bool): If True, any changes to part or face will apply to all
      instances.
    symmetry (bool): Symmetry in Direction 1.
    axisReverse (bool): Reverse the axis in Direction 1.
    result (str): Result type of circular pattern.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeParts.
    mergeParts (list[Part]): Parts to be merged with circular pattern.
    copiesToSkip (dict{Part: list[indicesToSkip]}): Set copies to skip. It's
      basically a dictionary which contains Part as a key and list of indices to
      skip as values.

  Returns:
  list[Part]: List of parts created.
  
		"""
		pass

	@property
	def connectedCurves(self):
		pass
	@connectedCurves.setter
	def connectedCurves(self):
		pass

	@property
	def connectedFaces(self):
		pass
	@connectedFaces.setter
	def connectedFaces(self):
		pass

	@property
	def connectedPoints(self):
		pass
	@connectedPoints.setter
	def connectedPoints(self):
		pass

	def deleteFaces(self,features):
		"""
		Deletes the specified faces from the part.

  Args:
    features (list[Feature]): Features to be removed.
  
		"""
		pass

	def divideCurve(self,curve, divisionPoints, uniformDivision=False):
		"""
		Divide a curve by inserting points along the curve.

    Args:
      curve (FeatureCurve): Curve to divide.
      divisionPoints((listlist[float], bool)): List of divisionPoints (length
        ratio or length along the curve) and the bool value depicts position
        ratio. If True, Divide the curve on length ratio otherwise
        division occurs at length along the curve.
      uniformDivision (bool): If True, Curve is uniformly divided.

    Returns:
      Part: New part created.
    
		"""
		pass

	def draft(self,features, direction, neutralPlane, angle1=3.0, angle2=3.0, flipDrawDirection1=False, flipDrawDirection2=False):
		"""
		Add draft to one or more faces of a part when designing a product that is
     manufactured using injection molding.

  Args:
    features (list[FeatureArea]): Faces to Draft.
    direction (str): The Draft direction. Valid values are: SINGLE, BOTH and SYMMETRY.
    neutralPlane (FeaturePlanar, Plane): A reference plane or an existing face
     in the model. neutralPlane can not be same as draft feature.
    angle1 (float): The angle1 of draft.
    angle2 (float): The angle2 of draft. This is applicable for BOTH or SYMMETRY value for direction.
    flipDrawDirection1 (bool): If True, flips the draw direction of draft in single direction.
    flipDrawDirection2 (bool): If True, flips the draw direction of draft.
      Applicable for BOTH direction.
  
		"""
		pass

	def edgeFillet(self,feature, radius="3 mm", continuity="TANGENT", tangentPropagation=True):
		"""
		Creates fillet on a Linear feature.

  Args:
    feature (Feature): feature that needs to fillet.
    radius (float | str): Radius of the fillet.
    continuity (str): Valid values are: TANGENT and CURVATURE.
    tangentPropagation (bool): If True, selecting an edge will also select all
      of its tangent edges.
  
		"""
		pass

	def extendCurve(self,curve, extensionTypeAndDistance, shape="LINEAR", extendEnds="START", extendAsNewPart=False):
		"""
		Extend a curve and modify the shape of the extension.

    Args:
      curve (FeatureCurve): Extracted Curve to extend.
      extensionTypeAndDistance (list[str, float] | list[str, Feature | Plane]):
        Extension type as string and Distance as float to extend. For
        UP_TO_FEATURE extension type second argument should be either a Feature
        or System Plane.
        Valid extension types are:
          - EXTENSION_DISTANCE
          - INCREMENT_FACTOR
          - TOTAL_LENGTH
          - UP_TO_FEATURE
      shape (str): Shape of extend curve.
        - LINEAR
        - SOFT
        - REFLECTIVE
        - NATURAL
        - ARC
      extendEnds (str): To reverse the curve extension direction.
        - START
        - END
      extendAsNewPart (bool): Create a new part if True, otherwise merge in
        original part.

    Returns:
      Part: New part created.
    
		"""
		pass

	def extract(self,features, maintainReference=True):
		"""
		Extracts geometry features and transfer them into a new part.

  Args:
    features (list[Feature]): Feature to be extracted.
    maintainReference (bool): If true, set reference associativity otherwise not.

  Returns:
    Part: New part created.
  
		"""
		pass

	def faceCurve(self,face, method="POINT", uRatio=True, vRatio=True, ignoreHoles=True, uCurvesCount=5, vCurvesCount=5, uParmRatioForPointMode="0", vParmRatioForPointMode="0", vertexFeature=None, vertexPoint=None):
		"""
		Extract curves from a face in the U or V direction. This is useful for
  creating trim curves that run along a face.

  Args:
    face (FeatureArea): Face on which extract curves.
    method (str): Method for face curve.
      - POINT
      - VERTEX
      - MESH
    uRatio (bool): If True, create U curves.
    vRatio (bool): If True, create V curves.
    ignoreHoles (bool): If True, ignore the holes in face curve.
    uCurvesCount (Int): Set U curves count to create for method type MESH.
    vCurvesCount (Int): Set V curves count to create for method type MESH.
    uParmRatioForPointMode (Float): Set U Param for method type POINT,
      param should be between 0 and 1.
    vParmRatioForPointMode (Float): Set V Param for method type POINT,
      param should be between 0 and 1.
    vertexFeature (FeaturePoint): Feature point to extract iso-param curve for
      method type VERTEX.
    vertexPoint (math.Point): Point to create face curves for method
      type POINT. Point must lie on the face.

  Returns:
    Part: New part created.
    
		"""
		pass

	def findClosestPoint(self,referencePoint):
		"""
		Returns the point on feature that nearest to the specified point.
    
    Args:
      referencePoint (Point) : Reference point to find closest point on feature.
    
    Returns:
      Point : The closest point of the feature from specified point.
    
		"""
		pass

	def getClass(self,classname):
		pass

	def getConnectionPoints(self,uslices=2, vslices=2):
		"""
		Returns a list of points that can be used to visualize how the feature 
    is connected (spider points).

    Args:
      uslices (int) : Number of slices in u-direction.
      vslices (int) : Number of slices in v-direction

    Returns:
      list[Point] : List of points that can be used to visualize 
        how the feature is connected.
    
		"""
		pass

	def getCurvature(self,point):
		"""
		Returns the directions and curvatures at the given point position

    Args:
      point (Point) : Point position at which directions and curvatures are computed.
    
		"""
		pass

	def getNormal(self,point):
		"""
		Return vector perpendicular to surface at a point.

    Args:
      point (Point) : Point position at which normal is computed.
    
		"""
		pass

	def helixCurve(self,profile, type="TURNS_AND_HEIGHT", numTurns=2, pitch=0.003, height=0.01, startAngle="0", curveHand="RIGHT", heightReverse=False, lockDiameterRatio=True, topDiameter="0"):
		"""
		Create a solid loft or a lofted surface from profiles and guide curves.

    Args:
      profile (FeatureCircular): Circular sketch profile.
      type (str): Helix Curve Type.
        - TURNS_AND_HEIGHT
        - TURNS_AND_PITCH
        - HEIGHT_AND_PITCH
      numTurns(float): Number of turns in helix curve.
      pitch (float): Pitch distance of helix curve.
      height (float): Height of helix curve.
      startAngle (float): Start angle of helix curve.
      curveHand (str): Helix curve sweep direction.
        - LEFT
        - RIGHT
      heightReverse (bool): If True, Reverse the height in other direction of
        helix curve.
      lockDiameterRatio (bool): If True, Set lock diameter ratio of helix curve.
      topDiameter (float): Top Diameter of helix curve.

    Returns:
      Part: New part created.
    
		"""
		pass

	def isTouching(self,point):
		"""
		Determines the point is on the surface or not.

    Args:
      point (Point) : Point positionin x, y, z coordinates.
    
		"""
		pass

	def isa(self,type=None, filter=None, **kwds):
		"""
		Determines the object matches the specified settings or not.

    Args:
      type (Part, Assembly, Contact, ..) :  Specify type of the object.
      filter (method) : Return value of specified callback method.
      **kwds : Additional keyword arguments to match attributes.
    
		"""
		pass

	@property
	def ishole(self):
		pass
	@ishole.setter
	def ishole(self):
		pass

	def isperiodic(self):
		"""
		Returns True if it's a periodic area, False otherwise.
		"""
		pass

	def linearPattern(self,input, direction1, direction2=(0, 0, 0), bothDirection=False, spacing1="0.0", count1=3, spacing2="0.0", count2=3, instances=False, symmetry1=False, symmetry2=False, reverseDir1=False, reverseDir2=False, result="NEW_PART", mergeWithAllParts=True, mergeParts=None, copiesToSkip=None, seedOnly=False):
		"""
		Linear Pattern parts or faces along a direction.

  Args:
    input (list[Part] | list[FeatureArea]): Parts or Features to create linear
      pattern.
    direction1 (math.Vector | FeatureCurve | Axis): Direction can be a 
      reference line, edge, or axis to which the pattern will be parallel.
    direction2 (math.Vector | FeatureCurve | Axis): Direction can be a 
      reference line, edge, or axis to which the pattern will be parallel.
    bothDirection (bool): If True, sets in both direction otherwise single
      direction.
    spacing1 (float): Distance between two copies.
    count1 (int): Number of copies.
    spacing2 (float): Distance between two copies.
    count2 (int): Number of copies.
    instances (bool): If True, any changes to part or face will apply to all
      instances.
    symmetry1 (bool): Symmetry in Direction 1.
    symmetry2 (bool): Symmetry in Direction 2.
    reverseDir1 (bool): Reverse the pattern direction in Direction 1.
    reverseDir2 (bool): Reverse the pattern direction in Direction 2.
    result (str): Result type of linear pattern.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeParts.
    mergeParts (list[Part]): Parts to be merged with linear pattern.
    copiesToSkip ((dict{Part: list[tuplex,y)]}): Set copies to skip. Here x and
      y are the indices in 2D space of copy , which needs to be skipped.
    seedOnly (bool): If True, pattern the entities only along the first row and
      first column.

  Returns:
  list[Part]: List of parts created.
  
		"""
		pass

	@property
	def location(self):
		pass
	@location.setter
	def location(self):
		pass

	def loft(self,profiles, loftAsSolid=True, guideCurves=None, arcLengthProfiles=False, arcLengthGuides=False, swapSurface=False, closed=False, resultType="NEW_PART", mergeWithAllParts=True, mergeParts=None, profileChain=False, guideCurvesTangent=False):
		"""
		Create a solid loft or a lofted surface from profiles and guide curves.

  Args:
    profiles (list[FeatureArea | FeatureCurve]): Faces, closed sketches or curves.
    loftAsSolid (bool): If true, sweep as solids otherwise sweep as surfaces.
    guideCurves(list[FeatureCurve]): Guide curves for the loft.
    arcLengthProfiles (bool): If True, Set Arc Length Parametrization on profiles.
    arcLengthGuides (bool): If True, Set Arc Length Parametrization on guides.
    swapSurface (bool): If True, interchange the profiles and rails to get
      preferred shape.
    closed (bool): If True, close the loft.
    resultType (str): Result type of loft operation.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeTargets.
    mergeParts (Part): Parts to be merged with loft operation.
    profileChain (bool): True, Allows to select profile's connected edges.
    guideCurvesTangent (bool): True, Allows to select  guideCurve's connected edges.

  Returns:
    Part|None: New part created if resultType is NEW_PART.
  
		"""
		pass

	@property
	def minBoundingBox(self):
		pass
	@minBoundingBox.setter
	def minBoundingBox(self):
		pass

	def moveFaces(self,features, position, duplicate=False):
		"""
		Translate, rotate, copy, or extend features.

  Args:
    features (list[FeatureArea]): The features to move.
    position (math.Matrix44): The position to move the features at.
    duplicate (bool): If True, copy the features at given position.
  
		"""
		pass

	def multiSweep(self,profiles, path, sweepAsSolid=True, arcLengthProfiles=False, arcLengthGuides=False, orientation="PERPENDICULAR", normalToSurface=None, resultType="NEW_PART", mergeWithAllParts=True, mergeParts=None):
		"""
		Sweep multiple profiles along a path to create a solid or surface.

  Args:
    profiles (list[FeatureArea | FeatureCurve]): Faces or closed sketches.
    path(list[FeatureCurve]): Path for the multiSweep.
    sweepAsSolid (bool): If true, sweep as solids otherwise sweep as surfaces.
    arcLengthProfiles (bool): If True, Set Arc Length Parametrization on profiles.
    arcLengthGuides (bool): If True, Set Arc Length Parametrization on path.
    orientation (str): Orientation for multiSweep.
      - PERPENDICULAR
      - PARALLEL
      - NORMAL_TO_SURFACE
    normalToSurface (list[FeatureArea]): Face to which sweep orientation will be
      normal.
    resultType (str): Result type of multiSweep operation.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeTargets.
    mergeParts (Part): Parts to be merged with sweep operation.

  Returns:
    Part|None: New part created if resultType is NEW_PART.
  
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	def offset(self,input, value, newPart=False):
		"""
		Offset surfaces or parts.

  Args:
    input (list[Part] | list[Feature])
    value (float | str): Desired offset distance. Negative value means inward direction.
      If value is a string it can be a Model Variable or a value with units.
    newPart (bool): If True, creates a new part.

  Returns:
    Part|None: New part created if newPart was True.
  
		"""
		pass

	@property
	def part(self):
		pass
	@part.setter
	def part(self):
		pass

	def partition(self,entity, thickness="1 mm", reverseDirection=False, minSize="0", maxSize=1):
		"""
		Divides a solid part into design and non-design regions by selecting a
  hole, pocket, or face to offset.

  Args:
    entity (Part | Assembly | [[Feature]]): Part/Assembly from which you want to
      plug the holes or a feature to be partitioned. If it is a feature then it
      should be list of feature list, where the features in internal feature
      list are related to each other.
    thickness (float): The partition thickness consider in mm.
    reverseDirection (bool): Switch the direction of the offset for the
      partition.
    minSize (float): Minimum size of partition to find features.
    maxSize (float): Maximum size of partition to find features.

  Returns:
    Part: New part created.
  
		"""
		pass

	def patternAlongPath(self,input, path, count=3, equalSpacing=False, spacing=0.01, instances=False, method="TRANSFORM", orientation="MAINTAIN_SEED_ORIENTATION", pathReverse=False, result="NEW_PART", mergeWithAllParts=True, mergeParts=None, copiesToSkip=None):
		"""
		Pattern parts or faces along curve.

   Args:
    input (list[Part] | list[FeatureArea]): Parts or Features to create pattern
      along the curve.
    path (list[FeatureCurve]): Path for pattern.
    count (int): Number of copies.
    equalSpacing (bool): If True, equally space the copies.
    spacing (float): Distance between two copies.
    instances (bool): If True, any changes to part or face will apply to all instances.
    method (str): Pattern method.
      - TRANSFORM
      - OFFSET
    orientation (str): Pattern Orientation.
      - TANGENT_TO_CURVE
      - MAINTAIN_SEED_ORIENTATION
    pathReverse (bool): Reverse the path of pattern.
    result (str): Result type of pattern along path.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeParts.
    mergeParts (list[Part]): Parts to be merged with pattern along path.
    copiesToSkip (dict{Part: list[indicesToSkip]}): Set copies to skip. It's
      basically a dictionary which contains Part as a key and list of indices to
      skip as values.

  Returns:
  list[Part | Feature]: List of parts/features created.
  
		"""
		pass

	def projection(self,feature, parts, extendEdges=True):
		"""
		Creates projection of a feature from one part to another part.

  Args:
    feature (Feature): Feature that needs to be projected on Part.
    parts (list[Part]): Parts on which feature projection to be.
    extendEdges (bool): If True, extends the edge.
  
		"""
		pass

	def pushPull(self,feature, depth, newPart=False, resultType=None):
		"""
		Pushes or pulls a face or an edge to a specified distance.

  Args:
    feature (Feature): Feature to push or pull.
    depth (float | str): The precise distance. 
      A positive value extends, whereas a negative value contracts.
    newPart (bool): If True, creates a new Part as a result of pushPull operation.
    resultType (str): Result type of pushPull operation. This option is valid
      only for pushPull a sketch on face.
      - NEW_PART
      - ADD
      - REMOVE
      - REPLACE

  Returns:
    Part: If New Part created, otherwise return None.
  
		"""
		pass

	def revolve2(self,profiles, axis, direction="SINGLE", resultType="NEW_PART", mergeTargets=None, flipAxis=False, angle1="0", angle2="0"):
		"""
		New Revolve - Revolve a face, sketch, line, or 2D edge about an axis.

  Args:
    profiles (FeatureArea | FeatureCurve): A face, line, or 2D edge.
    axis (FeatureLinear | FeatureCircular | Axis): An edge, line, cylindrical 
    hole or an Axis.

      Selecting an edge on another part projects the axis of revolution to the
      planar face that will be rotated.
    direction (str): Valid values are: SINGLE, BOTH and SYMMETRY.
    resultType (str): Valid values are: COMBINE, SUBTRACT, INTERSECT and NEW_PART.
    mergeTargets (list[Feature]): Explict merge targets for Result Type.
    flipAxis (bool): If True, axis will be flipped.
    angle1 (float): The angle of revolution.
    angle2 (float): The angle of revolution when direction is Both.

  Returns:
    Part|None: New part created if resultType is NEW_PART.
  
		"""
		pass

	def shell(self,feature, thickness=1):
		"""
		Removes material and create thin walls to generate a shelled part.

  Args:
    feature (FeatureArea): Feature to create a shelled part from.
    thickness (float): Shell thickness.
  
		"""
		pass

	def simplifyHoles(self,entity, minSize="0", maxSize=None):
		"""
		Finds and removes holes and pockets, and find raised areas such as lettering.

  Args:
    entity (Part | Assembly | Feature): Part/Assembly from which you want to 
      remove the holes from or FeatureCircular which needs to be removed.
    minSize (float): Minimum size of hole.
    maxSize (float): Maximum size of hole.
  
		"""
		pass

	def simplifyPlugs(self,entity, minSize="0", maxSize=None):
		"""
		Finds holes and pockets, and plug them by filling the area with a new part

  Args:
    entity (Part | Assembly | Feature): Part/Assembly from which you want to plug 
      the holes or a Circular feature that needs to be plugged.
    minSize (float): Minimum size of plug.
    maxSize (float): Maximum size of plug.
  
		"""
		pass

	def simplifyRounds(self,entity, roundType="ALL", minSize="0", maxSize=None):
		"""
		Finds and removes both round (convex) and fillet (concave) surfaces.

  Args:
    entity (Part | Assembly | Feature): Part/Assembly from which you want to 
      remove the fillets, chamfers from or a Feature to be removed.
    roundType (str): Valid values are: ROUNDS, FILLETS, CHAMFERS and ALL.
    minSize (float): Minimum size of round.
    maxSize (float): Maximum size of round.
  
		"""
		pass

	def sweep(self,profiles, path, solidProfile=None, sweepAsSolid=True, profileOrientation=True, propagate=True, pathIgnoredFeatures=None, guideCurves=None, pathDirection="DIRECTION_1", twistType="NO_TWIST", twistAngle="0", twistTurns="0", twistAngleDir2="0", twistTurnsDir2="0", resultType="NEW_PART", mergeWithAllParts=True, mergeParts=None, twist1Reverse=False, twist2Reverse=False, guideScale="UNIFORM"):
		"""
		Sweep a profile along a path to create a solid or 3D surface.

  Args:
    profiles (FeatureArea | FeatureCurve): A face or a closed sketch.
    path(list[FeatureCurve]): Path for the sweep.
    solidProfile (Part): Sweep profile as solid. Only applicable for solid cylinder.
    sweepAsSolid (bool): If true, sweep as solids otherwise sweep as surfaces.
    profileOrientation (bool): If true, sweep orientation will be normal to the
      path otherwise parallel.
    propagate (bool): If true, all the tangent edges of the input path is also selected.
    pathIgnoredFeatures (list[FeatureCurve]): Edge to be ignored when propagate is True.
    guideCurves (list[FeatureCurve]): Guide curves for the sweep. No guide curves are set by default.
    pathDirection (str): Sweep direction.
      - DIRECTION_1
      - DIRECTION_2
      - BOTH
    twistType (str): Twist type.
      - NO_TWIST
      - ANGLE_TWIST
      - NO_OF_TURNS
    twistAngle (float): Twist angle in DIRECTION_1.
    twistTurns (float): Number of twist turns in DIRECTION_1.
    twistAngleDir2 (float): Twist angle in DIRECTION_2. Applicable only when
      pathDirection is "BOTH".
    twistTurnsDir2 (float): Number of twist turns in DIRECTION_2. Applicable
      only when pathDirection is "BOTH".
    resultType (str): Result type of sweep operation.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeTargets.
    mergeParts (Part): Parts to be merged with sweep operation.
    twist1Reverse (bool): If True, Reverse the twist in DIRECTION_1 or DIRECTION_2.
    twist2Reverse (bool): If True, Reverse the twist in DIRECTION_2. Applicable
      only when pathDirection is "BOTH".
    guideScale (str): Guide scale option. Applicable only when guideCurves is provided.
      - UNIFORM
      - LATERAL

  Returns:
    Part|None: New part created if resultType is NEW_PART.
  
		"""
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

class FeatureCurve:
	def __init__(self,*args):
		"""
Features that are curves.

  They are not created through the API but can be retrieved from a part.
  
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	@property
	def cg(self):
		pass
	@cg.setter
	def cg(self):
		pass

	def chamferByAngle(self,feature, angle=45, dist=0.003):
		"""
		Creates chamfer on a Linear/Planar feature.

  Args:
    feature (Feature): Feature that needs to be chamfer.
    angle (float): Chamfer angle from the edge.
    dist (float): Chamfer distance from the edge.
  
		"""
		pass

	def chamferByDistance(self,feature, dist1=0.003, dist2=0.003):
		"""
		Creates chamfer on a linear or planar feature.

  Args:
    feature (Feature): Feature that needs to be chamfer.
    dist1 (float): Chamfer distance from the edge.
    dist2 (float): Chamfer distance from the edge.
  
		"""
		pass

	def circularPattern(self,input, axis, angle=60, count=3, equalSpacing=False, instances=False, symmetry=False, axisReverse=False, result="NEW_PART", mergeWithAllParts=True, mergeParts=None, copiesToSkip=None):
		"""
		Circular Pattern parts or faces around an axis.

  Args:
    input (list[Part] | list[FeatureArea]): Parts or Features to create circular
      pattern.
    axis (math.Vector | FeatureCurve | Axis): Axis is a reference line, edge,
      or axis to which the pattern will be parallel.
    angle (float): Angle within which the copies are equally spaced.
    count (int): Number of copies.
    equalSpacing (bool): If True, equally space the copies within a specified
      Angle.
    instances (bool): If True, any changes to part or face will apply to all
      instances.
    symmetry (bool): Symmetry in Direction 1.
    axisReverse (bool): Reverse the axis in Direction 1.
    result (str): Result type of circular pattern.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeParts.
    mergeParts (list[Part]): Parts to be merged with circular pattern.
    copiesToSkip (dict{Part: list[indicesToSkip]}): Set copies to skip. It's
      basically a dictionary which contains Part as a key and list of indices to
      skip as values.

  Returns:
  list[Part]: List of parts created.
  
		"""
		pass

	@property
	def connectedCurves(self):
		pass
	@connectedCurves.setter
	def connectedCurves(self):
		pass

	@property
	def connectedFaces(self):
		pass
	@connectedFaces.setter
	def connectedFaces(self):
		pass

	@property
	def connectedPoints(self):
		pass
	@connectedPoints.setter
	def connectedPoints(self):
		pass

	def createPipe(self,path, section="CIRCLE", size=0.01, width=0.01, thickness="0.0", angle=None, ignoredFeatures=None, propagate=False, resultType="COMBINE"):
		"""
		 Create Pipe for FeatureCurve.

  Args:
    path (list[FeatureCurve])
    section (str): The Pipe profile type. Valid choices are: CIRCLE, SQUARE, TRIANGLE
      and RECTANGLE.
    size (float | str): Length of the pipe.
      If value is a string it can be a Model Variable or a value with units.
    width (float): Width of the pipe, only applicable for Rectangular profile.
    thickness (float | str): Pipe thickness. 
      If not set or set to zero, it will be solid pipe.
      If value is a string it can be a Model Variable or a value with units.
    angle (float): Angle in radians. Only for xy alignment.
    ignoredFeatures: Ignored Features. Not mandatory. In propagated cases,
      if we need to ignore certain curves.
    propagate (bool): if True enables propagate option, otherwise disabled.
    resultType (str): Valid values are: COMBINE, SUBTRACT, INTERSECT and NEW_PART.

  Returns:
    Part: New part created.
  
		"""
		pass

	def divideCurve(self,curve, divisionPoints, uniformDivision=False):
		"""
		Divide a curve by inserting points along the curve.

    Args:
      curve (FeatureCurve): Curve to divide.
      divisionPoints((listlist[float], bool)): List of divisionPoints (length
        ratio or length along the curve) and the bool value depicts position
        ratio. If True, Divide the curve on length ratio otherwise
        division occurs at length along the curve.
      uniformDivision (bool): If True, Curve is uniformly divided.

    Returns:
      Part: New part created.
    
		"""
		pass

	def edgeFillet(self,feature, radius="3 mm", continuity="TANGENT", tangentPropagation=True):
		"""
		Creates fillet on a Linear feature.

  Args:
    feature (Feature): feature that needs to fillet.
    radius (float | str): Radius of the fillet.
    continuity (str): Valid values are: TANGENT and CURVATURE.
    tangentPropagation (bool): If True, selecting an edge will also select all
      of its tangent edges.
  
		"""
		pass

	def extendCurve(self,curve, extensionTypeAndDistance, shape="LINEAR", extendEnds="START", extendAsNewPart=False):
		"""
		Extend a curve and modify the shape of the extension.

    Args:
      curve (FeatureCurve): Extracted Curve to extend.
      extensionTypeAndDistance (list[str, float] | list[str, Feature | Plane]):
        Extension type as string and Distance as float to extend. For
        UP_TO_FEATURE extension type second argument should be either a Feature
        or System Plane.
        Valid extension types are:
          - EXTENSION_DISTANCE
          - INCREMENT_FACTOR
          - TOTAL_LENGTH
          - UP_TO_FEATURE
      shape (str): Shape of extend curve.
        - LINEAR
        - SOFT
        - REFLECTIVE
        - NATURAL
        - ARC
      extendEnds (str): To reverse the curve extension direction.
        - START
        - END
      extendAsNewPart (bool): Create a new part if True, otherwise merge in
        original part.

    Returns:
      Part: New part created.
    
		"""
		pass

	def extendSurface(self,edgesToExtend=None, allEdgesToExtend=False, extensionType="LINEAR", extent="EXTENSION_LENGTH", distance=0.01, extendUptoSurface=None, extendUptoPlane=None, createNewPart=False):
		"""
		Extend a surface along one or more edges.

  Args:
    edgesToExtend (list[FeatureCurve]): Edges of the surface to extend. Valid
      only if allEdgesToExtend is False.
    allEdgesToExtend (float): If True, it will consider all the edges of the
      surface and ignore edgesToExtend values.
    extensionType (str): Extension Type.
      - LINEAR
      - SOFT
      - REFLECTIVE
    extent (str): Extent of surface.
      - EXTENSION_LENGTH
      - UP_TO_PLANE
      - UP_TO_SURFACE
    distance (float): Extension distance of surface.
    extendUptoSurface (Part): System Plane up to which surface is extended. Only
      valid for UP_TO_SURFACE extent.
    extendUptoPlane (Plane): Plane up to which surface is extended. Only
      valid for UP_TO_PLANE extent.
    createNewPart (bool): If True, new part is created as a extended surface
      otherwise not.

  Returns:
    Part|None: New part created if createNewPart is True.
    
		"""
		pass

	def extract(self,features, maintainReference=True):
		"""
		Extracts geometry features and transfer them into a new part.

  Args:
    features (list[Feature]): Feature to be extracted.
    maintainReference (bool): If true, set reference associativity otherwise not.

  Returns:
    Part: New part created.
  
		"""
		pass

	def faceCurve(self,face, method="POINT", uRatio=True, vRatio=True, ignoreHoles=True, uCurvesCount=5, vCurvesCount=5, uParmRatioForPointMode="0", vParmRatioForPointMode="0", vertexFeature=None, vertexPoint=None):
		"""
		Extract curves from a face in the U or V direction. This is useful for
  creating trim curves that run along a face.

  Args:
    face (FeatureArea): Face on which extract curves.
    method (str): Method for face curve.
      - POINT
      - VERTEX
      - MESH
    uRatio (bool): If True, create U curves.
    vRatio (bool): If True, create V curves.
    ignoreHoles (bool): If True, ignore the holes in face curve.
    uCurvesCount (Int): Set U curves count to create for method type MESH.
    vCurvesCount (Int): Set V curves count to create for method type MESH.
    uParmRatioForPointMode (Float): Set U Param for method type POINT,
      param should be between 0 and 1.
    vParmRatioForPointMode (Float): Set V Param for method type POINT,
      param should be between 0 and 1.
    vertexFeature (FeaturePoint): Feature point to extract iso-param curve for
      method type VERTEX.
    vertexPoint (math.Point): Point to create face curves for method
      type POINT. Point must lie on the face.

  Returns:
    Part: New part created.
    
		"""
		pass

	def findClosestPoint(self,referencePoint):
		"""
		Returns the point on feature that nearest to the specified point.
    
    Args:
      referencePoint (Point) : Reference point to find closest point on feature.
    
    Returns:
      Point : The closest point of the feature from specified point.
    
		"""
		pass

	def getClass(self,classname):
		pass

	def getConnectionPoints(self,uslices=2, vslices=None):
		"""
		Return a list of points that can be used to visualize how the feature
    is connected (spider points).

    Args:
      uslices (int) : Number of slices in u-direction.
      vslices (int) : Number of slices in v-direction.

    Returns:
      list[Point] : Points that can be used to visualize how the 
      feature is connected.
    
		"""
		pass

	def helixCurve(self,profile, type="TURNS_AND_HEIGHT", numTurns=2, pitch=0.003, height=0.01, startAngle="0", curveHand="RIGHT", heightReverse=False, lockDiameterRatio=True, topDiameter="0"):
		"""
		Create a solid loft or a lofted surface from profiles and guide curves.

    Args:
      profile (FeatureCircular): Circular sketch profile.
      type (str): Helix Curve Type.
        - TURNS_AND_HEIGHT
        - TURNS_AND_PITCH
        - HEIGHT_AND_PITCH
      numTurns(float): Number of turns in helix curve.
      pitch (float): Pitch distance of helix curve.
      height (float): Height of helix curve.
      startAngle (float): Start angle of helix curve.
      curveHand (str): Helix curve sweep direction.
        - LEFT
        - RIGHT
      heightReverse (bool): If True, Reverse the height in other direction of
        helix curve.
      lockDiameterRatio (bool): If True, Set lock diameter ratio of helix curve.
      topDiameter (float): Top Diameter of helix curve.

    Returns:
      Part: New part created.
    
		"""
		pass

	def isTouching(self,point):
		"""
		Determines the point is on the curve or not. 

    Args:
      point (Point) : Point position x,y,z.
    
		"""
		pass

	def isa(self,type=None, filter=None, **kwds):
		"""
		Determines the object matches the specified settings or not.

    Args:
      type (Part, Assembly, Contact, ..) :  Specify type of the object.
      filter (method) : Return value of specified callback method.
      **kwds : Additional keyword arguments to match attributes.
    
		"""
		pass

	@property
	def ishole(self):
		pass
	@ishole.setter
	def ishole(self):
		pass

	@property
	def length(self):
		pass
	@length.setter
	def length(self):
		pass

	def linearPattern(self,input, direction1, direction2=(0, 0, 0), bothDirection=False, spacing1="0.0", count1=3, spacing2="0.0", count2=3, instances=False, symmetry1=False, symmetry2=False, reverseDir1=False, reverseDir2=False, result="NEW_PART", mergeWithAllParts=True, mergeParts=None, copiesToSkip=None, seedOnly=False):
		"""
		Linear Pattern parts or faces along a direction.

  Args:
    input (list[Part] | list[FeatureArea]): Parts or Features to create linear
      pattern.
    direction1 (math.Vector | FeatureCurve | Axis): Direction can be a 
      reference line, edge, or axis to which the pattern will be parallel.
    direction2 (math.Vector | FeatureCurve | Axis): Direction can be a 
      reference line, edge, or axis to which the pattern will be parallel.
    bothDirection (bool): If True, sets in both direction otherwise single
      direction.
    spacing1 (float): Distance between two copies.
    count1 (int): Number of copies.
    spacing2 (float): Distance between two copies.
    count2 (int): Number of copies.
    instances (bool): If True, any changes to part or face will apply to all
      instances.
    symmetry1 (bool): Symmetry in Direction 1.
    symmetry2 (bool): Symmetry in Direction 2.
    reverseDir1 (bool): Reverse the pattern direction in Direction 1.
    reverseDir2 (bool): Reverse the pattern direction in Direction 2.
    result (str): Result type of linear pattern.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeParts.
    mergeParts (list[Part]): Parts to be merged with linear pattern.
    copiesToSkip ((dict{Part: list[tuplex,y)]}): Set copies to skip. Here x and
      y are the indices in 2D space of copy , which needs to be skipped.
    seedOnly (bool): If True, pattern the entities only along the first row and
      first column.

  Returns:
  list[Part]: List of parts created.
  
		"""
		pass

	@property
	def location(self):
		pass
	@location.setter
	def location(self):
		pass

	def loft(self,profiles, loftAsSolid=True, guideCurves=None, arcLengthProfiles=False, arcLengthGuides=False, swapSurface=False, closed=False, resultType="NEW_PART", mergeWithAllParts=True, mergeParts=None, profileChain=False, guideCurvesTangent=False):
		"""
		Create a solid loft or a lofted surface from profiles and guide curves.

  Args:
    profiles (list[FeatureArea | FeatureCurve]): Faces, closed sketches or curves.
    loftAsSolid (bool): If true, sweep as solids otherwise sweep as surfaces.
    guideCurves(list[FeatureCurve]): Guide curves for the loft.
    arcLengthProfiles (bool): If True, Set Arc Length Parametrization on profiles.
    arcLengthGuides (bool): If True, Set Arc Length Parametrization on guides.
    swapSurface (bool): If True, interchange the profiles and rails to get
      preferred shape.
    closed (bool): If True, close the loft.
    resultType (str): Result type of loft operation.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeTargets.
    mergeParts (Part): Parts to be merged with loft operation.
    profileChain (bool): True, Allows to select profile's connected edges.
    guideCurvesTangent (bool): True, Allows to select  guideCurve's connected edges.

  Returns:
    Part|None: New part created if resultType is NEW_PART.
  
		"""
		pass

	@property
	def minBoundingBox(self):
		pass
	@minBoundingBox.setter
	def minBoundingBox(self):
		pass

	def moveFaces(self,features, position, duplicate=False):
		"""
		Translate, rotate, copy, or extend features.

  Args:
    features (list[FeatureArea]): The features to move.
    position (math.Matrix44): The position to move the features at.
    duplicate (bool): If True, copy the features at given position.
  
		"""
		pass

	def multiSweep(self,profiles, path, sweepAsSolid=True, arcLengthProfiles=False, arcLengthGuides=False, orientation="PERPENDICULAR", normalToSurface=None, resultType="NEW_PART", mergeWithAllParts=True, mergeParts=None):
		"""
		Sweep multiple profiles along a path to create a solid or surface.

  Args:
    profiles (list[FeatureArea | FeatureCurve]): Faces or closed sketches.
    path(list[FeatureCurve]): Path for the multiSweep.
    sweepAsSolid (bool): If true, sweep as solids otherwise sweep as surfaces.
    arcLengthProfiles (bool): If True, Set Arc Length Parametrization on profiles.
    arcLengthGuides (bool): If True, Set Arc Length Parametrization on path.
    orientation (str): Orientation for multiSweep.
      - PERPENDICULAR
      - PARALLEL
      - NORMAL_TO_SURFACE
    normalToSurface (list[FeatureArea]): Face to which sweep orientation will be
      normal.
    resultType (str): Result type of multiSweep operation.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeTargets.
    mergeParts (Part): Parts to be merged with sweep operation.

  Returns:
    Part|None: New part created if resultType is NEW_PART.
  
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	def offset(self,input, value, newPart=False):
		"""
		Offset surfaces or parts.

  Args:
    input (list[Part] | list[Feature])
    value (float | str): Desired offset distance. Negative value means inward direction.
      If value is a string it can be a Model Variable or a value with units.
    newPart (bool): If True, creates a new part.

  Returns:
    Part|None: New part created if newPart was True.
  
		"""
		pass

	def offsetCurves(self,curve, offsetDistance=0.01, extensionType="NATURAL", symmetry=False, endOptions="OPEN", elevationType="NONE", elevationDistance="0.0"):
		"""
		Create a copy of one or more curves at a specifies distance from the source
  curves This tool can be used on both 2D and 3D curves.

  Args:
    curve (FeatureCurve): Curve to create offset curve.
    offsetDistance (float): Offset distance form actual curve.
    extensionType (str): Extension Type for offset curve.
      - NATURAL
      - ROUND
      - LINEAR
    symmetry (bool): If True, offset curves are created in both direction.
    endOptions (str): End Options.
      - OPEN
      - CLOSED_AND_STRAIGHT_ENDS
      - CLOSED_AND_ROUNDED
    elevationType (str): Elevation Type.
      - NONE
      - NORMAL
      - CUSTOM
    elevationDistance (float): Elevation distance for the offset curve.

  Returns:
    Part: New part created.
    
		"""
		pass

	@property
	def part(self):
		pass
	@part.setter
	def part(self):
		pass

	def patch(self,features):
		"""
		Creates patches to fill in specified missing surfaces.

  Args:
    features (list[Feature]): Features to be patched.

  Returns:
    list[Part]: New parts created.
  
		"""
		pass

	def patternAlongPath(self,input, path, count=3, equalSpacing=False, spacing=0.01, instances=False, method="TRANSFORM", orientation="MAINTAIN_SEED_ORIENTATION", pathReverse=False, result="NEW_PART", mergeWithAllParts=True, mergeParts=None, copiesToSkip=None):
		"""
		Pattern parts or faces along curve.

   Args:
    input (list[Part] | list[FeatureArea]): Parts or Features to create pattern
      along the curve.
    path (list[FeatureCurve]): Path for pattern.
    count (int): Number of copies.
    equalSpacing (bool): If True, equally space the copies.
    spacing (float): Distance between two copies.
    instances (bool): If True, any changes to part or face will apply to all instances.
    method (str): Pattern method.
      - TRANSFORM
      - OFFSET
    orientation (str): Pattern Orientation.
      - TANGENT_TO_CURVE
      - MAINTAIN_SEED_ORIENTATION
    pathReverse (bool): Reverse the path of pattern.
    result (str): Result type of pattern along path.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeParts.
    mergeParts (list[Part]): Parts to be merged with pattern along path.
    copiesToSkip (dict{Part: list[indicesToSkip]}): Set copies to skip. It's
      basically a dictionary which contains Part as a key and list of indices to
      skip as values.

  Returns:
  list[Part | Feature]: List of parts/features created.
  
		"""
		pass

	@property
	def polyline(self):
		pass
	@polyline.setter
	def polyline(self):
		pass

	def projection(self,feature, parts, extendEdges=True):
		"""
		Creates projection of a feature from one part to another part.

  Args:
    feature (Feature): Feature that needs to be projected on Part.
    parts (list[Part]): Parts on which feature projection to be.
    extendEdges (bool): If True, extends the edge.
  
		"""
		pass

	def pushPull(self,feature, depth, newPart=False, resultType=None):
		"""
		Pushes or pulls a face or an edge to a specified distance.

  Args:
    feature (Feature): Feature to push or pull.
    depth (float | str): The precise distance. 
      A positive value extends, whereas a negative value contracts.
    newPart (bool): If True, creates a new Part as a result of pushPull operation.
    resultType (str): Result type of pushPull operation. This option is valid
      only for pushPull a sketch on face.
      - NEW_PART
      - ADD
      - REMOVE
      - REPLACE

  Returns:
    Part: If New Part created, otherwise return None.
  
		"""
		pass

	def revolve2(self,profiles, axis, direction="SINGLE", resultType="NEW_PART", mergeTargets=None, flipAxis=False, angle1="0", angle2="0"):
		"""
		New Revolve - Revolve a face, sketch, line, or 2D edge about an axis.

  Args:
    profiles (FeatureArea | FeatureCurve): A face, line, or 2D edge.
    axis (FeatureLinear | FeatureCircular | Axis): An edge, line, cylindrical 
    hole or an Axis.

      Selecting an edge on another part projects the axis of revolution to the
      planar face that will be rotated.
    direction (str): Valid values are: SINGLE, BOTH and SYMMETRY.
    resultType (str): Valid values are: COMBINE, SUBTRACT, INTERSECT and NEW_PART.
    mergeTargets (list[Feature]): Explict merge targets for Result Type.
    flipAxis (bool): If True, axis will be flipped.
    angle1 (float): The angle of revolution.
    angle2 (float): The angle of revolution when direction is Both.

  Returns:
    Part|None: New part created if resultType is NEW_PART.
  
		"""
		pass

	def sweep(self,profiles, path, solidProfile=None, sweepAsSolid=True, profileOrientation=True, propagate=True, pathIgnoredFeatures=None, guideCurves=None, pathDirection="DIRECTION_1", twistType="NO_TWIST", twistAngle="0", twistTurns="0", twistAngleDir2="0", twistTurnsDir2="0", resultType="NEW_PART", mergeWithAllParts=True, mergeParts=None, twist1Reverse=False, twist2Reverse=False, guideScale="UNIFORM"):
		"""
		Sweep a profile along a path to create a solid or 3D surface.

  Args:
    profiles (FeatureArea | FeatureCurve): A face or a closed sketch.
    path(list[FeatureCurve]): Path for the sweep.
    solidProfile (Part): Sweep profile as solid. Only applicable for solid cylinder.
    sweepAsSolid (bool): If true, sweep as solids otherwise sweep as surfaces.
    profileOrientation (bool): If true, sweep orientation will be normal to the
      path otherwise parallel.
    propagate (bool): If true, all the tangent edges of the input path is also selected.
    pathIgnoredFeatures (list[FeatureCurve]): Edge to be ignored when propagate is True.
    guideCurves (list[FeatureCurve]): Guide curves for the sweep. No guide curves are set by default.
    pathDirection (str): Sweep direction.
      - DIRECTION_1
      - DIRECTION_2
      - BOTH
    twistType (str): Twist type.
      - NO_TWIST
      - ANGLE_TWIST
      - NO_OF_TURNS
    twistAngle (float): Twist angle in DIRECTION_1.
    twistTurns (float): Number of twist turns in DIRECTION_1.
    twistAngleDir2 (float): Twist angle in DIRECTION_2. Applicable only when
      pathDirection is "BOTH".
    twistTurnsDir2 (float): Number of twist turns in DIRECTION_2. Applicable
      only when pathDirection is "BOTH".
    resultType (str): Result type of sweep operation.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeTargets.
    mergeParts (Part): Parts to be merged with sweep operation.
    twist1Reverse (bool): If True, Reverse the twist in DIRECTION_1 or DIRECTION_2.
    twist2Reverse (bool): If True, Reverse the twist in DIRECTION_2. Applicable
      only when pathDirection is "BOTH".
    guideScale (str): Guide scale option. Applicable only when guideCurves is provided.
      - UNIFORM
      - LATERAL

  Returns:
    Part|None: New part created if resultType is NEW_PART.
  
		"""
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

class FeatureCurveOther:
	def __init__(self,*args):
		"""
FeatureCurves that are not instance of FeatureLinear or FeatureCircular.

  Used to filter FeatureCurves.
  
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	@property
	def cg(self):
		pass
	@cg.setter
	def cg(self):
		pass

	def chamferByAngle(self,feature, angle=45, dist=0.003):
		"""
		Creates chamfer on a Linear/Planar feature.

  Args:
    feature (Feature): Feature that needs to be chamfer.
    angle (float): Chamfer angle from the edge.
    dist (float): Chamfer distance from the edge.
  
		"""
		pass

	def chamferByDistance(self,feature, dist1=0.003, dist2=0.003):
		"""
		Creates chamfer on a linear or planar feature.

  Args:
    feature (Feature): Feature that needs to be chamfer.
    dist1 (float): Chamfer distance from the edge.
    dist2 (float): Chamfer distance from the edge.
  
		"""
		pass

	def circularPattern(self,input, axis, angle=60, count=3, equalSpacing=False, instances=False, symmetry=False, axisReverse=False, result="NEW_PART", mergeWithAllParts=True, mergeParts=None, copiesToSkip=None):
		"""
		Circular Pattern parts or faces around an axis.

  Args:
    input (list[Part] | list[FeatureArea]): Parts or Features to create circular
      pattern.
    axis (math.Vector | FeatureCurve | Axis): Axis is a reference line, edge,
      or axis to which the pattern will be parallel.
    angle (float): Angle within which the copies are equally spaced.
    count (int): Number of copies.
    equalSpacing (bool): If True, equally space the copies within a specified
      Angle.
    instances (bool): If True, any changes to part or face will apply to all
      instances.
    symmetry (bool): Symmetry in Direction 1.
    axisReverse (bool): Reverse the axis in Direction 1.
    result (str): Result type of circular pattern.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeParts.
    mergeParts (list[Part]): Parts to be merged with circular pattern.
    copiesToSkip (dict{Part: list[indicesToSkip]}): Set copies to skip. It's
      basically a dictionary which contains Part as a key and list of indices to
      skip as values.

  Returns:
  list[Part]: List of parts created.
  
		"""
		pass

	@property
	def connectedCurves(self):
		pass
	@connectedCurves.setter
	def connectedCurves(self):
		pass

	@property
	def connectedFaces(self):
		pass
	@connectedFaces.setter
	def connectedFaces(self):
		pass

	@property
	def connectedPoints(self):
		pass
	@connectedPoints.setter
	def connectedPoints(self):
		pass

	def createPipe(self,path, section="CIRCLE", size=0.01, width=0.01, thickness="0.0", angle=None, ignoredFeatures=None, propagate=False, resultType="COMBINE"):
		"""
		 Create Pipe for FeatureCurve.

  Args:
    path (list[FeatureCurve])
    section (str): The Pipe profile type. Valid choices are: CIRCLE, SQUARE, TRIANGLE
      and RECTANGLE.
    size (float | str): Length of the pipe.
      If value is a string it can be a Model Variable or a value with units.
    width (float): Width of the pipe, only applicable for Rectangular profile.
    thickness (float | str): Pipe thickness. 
      If not set or set to zero, it will be solid pipe.
      If value is a string it can be a Model Variable or a value with units.
    angle (float): Angle in radians. Only for xy alignment.
    ignoredFeatures: Ignored Features. Not mandatory. In propagated cases,
      if we need to ignore certain curves.
    propagate (bool): if True enables propagate option, otherwise disabled.
    resultType (str): Valid values are: COMBINE, SUBTRACT, INTERSECT and NEW_PART.

  Returns:
    Part: New part created.
  
		"""
		pass

	def divideCurve(self,curve, divisionPoints, uniformDivision=False):
		"""
		Divide a curve by inserting points along the curve.

    Args:
      curve (FeatureCurve): Curve to divide.
      divisionPoints((listlist[float], bool)): List of divisionPoints (length
        ratio or length along the curve) and the bool value depicts position
        ratio. If True, Divide the curve on length ratio otherwise
        division occurs at length along the curve.
      uniformDivision (bool): If True, Curve is uniformly divided.

    Returns:
      Part: New part created.
    
		"""
		pass

	def edgeFillet(self,feature, radius="3 mm", continuity="TANGENT", tangentPropagation=True):
		"""
		Creates fillet on a Linear feature.

  Args:
    feature (Feature): feature that needs to fillet.
    radius (float | str): Radius of the fillet.
    continuity (str): Valid values are: TANGENT and CURVATURE.
    tangentPropagation (bool): If True, selecting an edge will also select all
      of its tangent edges.
  
		"""
		pass

	def extendCurve(self,curve, extensionTypeAndDistance, shape="LINEAR", extendEnds="START", extendAsNewPart=False):
		"""
		Extend a curve and modify the shape of the extension.

    Args:
      curve (FeatureCurve): Extracted Curve to extend.
      extensionTypeAndDistance (list[str, float] | list[str, Feature | Plane]):
        Extension type as string and Distance as float to extend. For
        UP_TO_FEATURE extension type second argument should be either a Feature
        or System Plane.
        Valid extension types are:
          - EXTENSION_DISTANCE
          - INCREMENT_FACTOR
          - TOTAL_LENGTH
          - UP_TO_FEATURE
      shape (str): Shape of extend curve.
        - LINEAR
        - SOFT
        - REFLECTIVE
        - NATURAL
        - ARC
      extendEnds (str): To reverse the curve extension direction.
        - START
        - END
      extendAsNewPart (bool): Create a new part if True, otherwise merge in
        original part.

    Returns:
      Part: New part created.
    
		"""
		pass

	def extendSurface(self,edgesToExtend=None, allEdgesToExtend=False, extensionType="LINEAR", extent="EXTENSION_LENGTH", distance=0.01, extendUptoSurface=None, extendUptoPlane=None, createNewPart=False):
		"""
		Extend a surface along one or more edges.

  Args:
    edgesToExtend (list[FeatureCurve]): Edges of the surface to extend. Valid
      only if allEdgesToExtend is False.
    allEdgesToExtend (float): If True, it will consider all the edges of the
      surface and ignore edgesToExtend values.
    extensionType (str): Extension Type.
      - LINEAR
      - SOFT
      - REFLECTIVE
    extent (str): Extent of surface.
      - EXTENSION_LENGTH
      - UP_TO_PLANE
      - UP_TO_SURFACE
    distance (float): Extension distance of surface.
    extendUptoSurface (Part): System Plane up to which surface is extended. Only
      valid for UP_TO_SURFACE extent.
    extendUptoPlane (Plane): Plane up to which surface is extended. Only
      valid for UP_TO_PLANE extent.
    createNewPart (bool): If True, new part is created as a extended surface
      otherwise not.

  Returns:
    Part|None: New part created if createNewPart is True.
    
		"""
		pass

	def extract(self,features, maintainReference=True):
		"""
		Extracts geometry features and transfer them into a new part.

  Args:
    features (list[Feature]): Feature to be extracted.
    maintainReference (bool): If true, set reference associativity otherwise not.

  Returns:
    Part: New part created.
  
		"""
		pass

	def faceCurve(self,face, method="POINT", uRatio=True, vRatio=True, ignoreHoles=True, uCurvesCount=5, vCurvesCount=5, uParmRatioForPointMode="0", vParmRatioForPointMode="0", vertexFeature=None, vertexPoint=None):
		"""
		Extract curves from a face in the U or V direction. This is useful for
  creating trim curves that run along a face.

  Args:
    face (FeatureArea): Face on which extract curves.
    method (str): Method for face curve.
      - POINT
      - VERTEX
      - MESH
    uRatio (bool): If True, create U curves.
    vRatio (bool): If True, create V curves.
    ignoreHoles (bool): If True, ignore the holes in face curve.
    uCurvesCount (Int): Set U curves count to create for method type MESH.
    vCurvesCount (Int): Set V curves count to create for method type MESH.
    uParmRatioForPointMode (Float): Set U Param for method type POINT,
      param should be between 0 and 1.
    vParmRatioForPointMode (Float): Set V Param for method type POINT,
      param should be between 0 and 1.
    vertexFeature (FeaturePoint): Feature point to extract iso-param curve for
      method type VERTEX.
    vertexPoint (math.Point): Point to create face curves for method
      type POINT. Point must lie on the face.

  Returns:
    Part: New part created.
    
		"""
		pass

	def findClosestPoint(self,referencePoint):
		"""
		Returns the point on feature that nearest to the specified point.
    
    Args:
      referencePoint (Point) : Reference point to find closest point on feature.
    
    Returns:
      Point : The closest point of the feature from specified point.
    
		"""
		pass

	def getClass(self,classname):
		pass

	def getConnectionPoints(self,uslices=2, vslices=None):
		"""
		Return a list of points that can be used to visualize how the feature
    is connected (spider points).

    Args:
      uslices (int) : Number of slices in u-direction.
      vslices (int) : Number of slices in v-direction.

    Returns:
      list[Point] : Points that can be used to visualize how the 
      feature is connected.
    
		"""
		pass

	def helixCurve(self,profile, type="TURNS_AND_HEIGHT", numTurns=2, pitch=0.003, height=0.01, startAngle="0", curveHand="RIGHT", heightReverse=False, lockDiameterRatio=True, topDiameter="0"):
		"""
		Create a solid loft or a lofted surface from profiles and guide curves.

    Args:
      profile (FeatureCircular): Circular sketch profile.
      type (str): Helix Curve Type.
        - TURNS_AND_HEIGHT
        - TURNS_AND_PITCH
        - HEIGHT_AND_PITCH
      numTurns(float): Number of turns in helix curve.
      pitch (float): Pitch distance of helix curve.
      height (float): Height of helix curve.
      startAngle (float): Start angle of helix curve.
      curveHand (str): Helix curve sweep direction.
        - LEFT
        - RIGHT
      heightReverse (bool): If True, Reverse the height in other direction of
        helix curve.
      lockDiameterRatio (bool): If True, Set lock diameter ratio of helix curve.
      topDiameter (float): Top Diameter of helix curve.

    Returns:
      Part: New part created.
    
		"""
		pass

	def isTouching(self,point):
		"""
		Determines the point is on the curve or not. 

    Args:
      point (Point) : Point position x,y,z.
    
		"""
		pass

	def isa(self,type=None, filter=None, **kwds):
		"""
		Determines the object matches the specified settings or not.

    Args:
      type (Part, Assembly, Contact, ..) :  Specify type of the object.
      filter (method) : Return value of specified callback method.
      **kwds : Additional keyword arguments to match attributes.
    
		"""
		pass

	@property
	def ishole(self):
		pass
	@ishole.setter
	def ishole(self):
		pass

	@property
	def length(self):
		pass
	@length.setter
	def length(self):
		pass

	def linearPattern(self,input, direction1, direction2=(0, 0, 0), bothDirection=False, spacing1="0.0", count1=3, spacing2="0.0", count2=3, instances=False, symmetry1=False, symmetry2=False, reverseDir1=False, reverseDir2=False, result="NEW_PART", mergeWithAllParts=True, mergeParts=None, copiesToSkip=None, seedOnly=False):
		"""
		Linear Pattern parts or faces along a direction.

  Args:
    input (list[Part] | list[FeatureArea]): Parts or Features to create linear
      pattern.
    direction1 (math.Vector | FeatureCurve | Axis): Direction can be a 
      reference line, edge, or axis to which the pattern will be parallel.
    direction2 (math.Vector | FeatureCurve | Axis): Direction can be a 
      reference line, edge, or axis to which the pattern will be parallel.
    bothDirection (bool): If True, sets in both direction otherwise single
      direction.
    spacing1 (float): Distance between two copies.
    count1 (int): Number of copies.
    spacing2 (float): Distance between two copies.
    count2 (int): Number of copies.
    instances (bool): If True, any changes to part or face will apply to all
      instances.
    symmetry1 (bool): Symmetry in Direction 1.
    symmetry2 (bool): Symmetry in Direction 2.
    reverseDir1 (bool): Reverse the pattern direction in Direction 1.
    reverseDir2 (bool): Reverse the pattern direction in Direction 2.
    result (str): Result type of linear pattern.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeParts.
    mergeParts (list[Part]): Parts to be merged with linear pattern.
    copiesToSkip ((dict{Part: list[tuplex,y)]}): Set copies to skip. Here x and
      y are the indices in 2D space of copy , which needs to be skipped.
    seedOnly (bool): If True, pattern the entities only along the first row and
      first column.

  Returns:
  list[Part]: List of parts created.
  
		"""
		pass

	@property
	def location(self):
		pass
	@location.setter
	def location(self):
		pass

	def loft(self,profiles, loftAsSolid=True, guideCurves=None, arcLengthProfiles=False, arcLengthGuides=False, swapSurface=False, closed=False, resultType="NEW_PART", mergeWithAllParts=True, mergeParts=None, profileChain=False, guideCurvesTangent=False):
		"""
		Create a solid loft or a lofted surface from profiles and guide curves.

  Args:
    profiles (list[FeatureArea | FeatureCurve]): Faces, closed sketches or curves.
    loftAsSolid (bool): If true, sweep as solids otherwise sweep as surfaces.
    guideCurves(list[FeatureCurve]): Guide curves for the loft.
    arcLengthProfiles (bool): If True, Set Arc Length Parametrization on profiles.
    arcLengthGuides (bool): If True, Set Arc Length Parametrization on guides.
    swapSurface (bool): If True, interchange the profiles and rails to get
      preferred shape.
    closed (bool): If True, close the loft.
    resultType (str): Result type of loft operation.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeTargets.
    mergeParts (Part): Parts to be merged with loft operation.
    profileChain (bool): True, Allows to select profile's connected edges.
    guideCurvesTangent (bool): True, Allows to select  guideCurve's connected edges.

  Returns:
    Part|None: New part created if resultType is NEW_PART.
  
		"""
		pass

	@property
	def minBoundingBox(self):
		pass
	@minBoundingBox.setter
	def minBoundingBox(self):
		pass

	def moveFaces(self,features, position, duplicate=False):
		"""
		Translate, rotate, copy, or extend features.

  Args:
    features (list[FeatureArea]): The features to move.
    position (math.Matrix44): The position to move the features at.
    duplicate (bool): If True, copy the features at given position.
  
		"""
		pass

	def multiSweep(self,profiles, path, sweepAsSolid=True, arcLengthProfiles=False, arcLengthGuides=False, orientation="PERPENDICULAR", normalToSurface=None, resultType="NEW_PART", mergeWithAllParts=True, mergeParts=None):
		"""
		Sweep multiple profiles along a path to create a solid or surface.

  Args:
    profiles (list[FeatureArea | FeatureCurve]): Faces or closed sketches.
    path(list[FeatureCurve]): Path for the multiSweep.
    sweepAsSolid (bool): If true, sweep as solids otherwise sweep as surfaces.
    arcLengthProfiles (bool): If True, Set Arc Length Parametrization on profiles.
    arcLengthGuides (bool): If True, Set Arc Length Parametrization on path.
    orientation (str): Orientation for multiSweep.
      - PERPENDICULAR
      - PARALLEL
      - NORMAL_TO_SURFACE
    normalToSurface (list[FeatureArea]): Face to which sweep orientation will be
      normal.
    resultType (str): Result type of multiSweep operation.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeTargets.
    mergeParts (Part): Parts to be merged with sweep operation.

  Returns:
    Part|None: New part created if resultType is NEW_PART.
  
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	def offset(self,input, value, newPart=False):
		"""
		Offset surfaces or parts.

  Args:
    input (list[Part] | list[Feature])
    value (float | str): Desired offset distance. Negative value means inward direction.
      If value is a string it can be a Model Variable or a value with units.
    newPart (bool): If True, creates a new part.

  Returns:
    Part|None: New part created if newPart was True.
  
		"""
		pass

	def offsetCurves(self,curve, offsetDistance=0.01, extensionType="NATURAL", symmetry=False, endOptions="OPEN", elevationType="NONE", elevationDistance="0.0"):
		"""
		Create a copy of one or more curves at a specifies distance from the source
  curves This tool can be used on both 2D and 3D curves.

  Args:
    curve (FeatureCurve): Curve to create offset curve.
    offsetDistance (float): Offset distance form actual curve.
    extensionType (str): Extension Type for offset curve.
      - NATURAL
      - ROUND
      - LINEAR
    symmetry (bool): If True, offset curves are created in both direction.
    endOptions (str): End Options.
      - OPEN
      - CLOSED_AND_STRAIGHT_ENDS
      - CLOSED_AND_ROUNDED
    elevationType (str): Elevation Type.
      - NONE
      - NORMAL
      - CUSTOM
    elevationDistance (float): Elevation distance for the offset curve.

  Returns:
    Part: New part created.
    
		"""
		pass

	@property
	def part(self):
		pass
	@part.setter
	def part(self):
		pass

	def patch(self,features):
		"""
		Creates patches to fill in specified missing surfaces.

  Args:
    features (list[Feature]): Features to be patched.

  Returns:
    list[Part]: New parts created.
  
		"""
		pass

	def patternAlongPath(self,input, path, count=3, equalSpacing=False, spacing=0.01, instances=False, method="TRANSFORM", orientation="MAINTAIN_SEED_ORIENTATION", pathReverse=False, result="NEW_PART", mergeWithAllParts=True, mergeParts=None, copiesToSkip=None):
		"""
		Pattern parts or faces along curve.

   Args:
    input (list[Part] | list[FeatureArea]): Parts or Features to create pattern
      along the curve.
    path (list[FeatureCurve]): Path for pattern.
    count (int): Number of copies.
    equalSpacing (bool): If True, equally space the copies.
    spacing (float): Distance between two copies.
    instances (bool): If True, any changes to part or face will apply to all instances.
    method (str): Pattern method.
      - TRANSFORM
      - OFFSET
    orientation (str): Pattern Orientation.
      - TANGENT_TO_CURVE
      - MAINTAIN_SEED_ORIENTATION
    pathReverse (bool): Reverse the path of pattern.
    result (str): Result type of pattern along path.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeParts.
    mergeParts (list[Part]): Parts to be merged with pattern along path.
    copiesToSkip (dict{Part: list[indicesToSkip]}): Set copies to skip. It's
      basically a dictionary which contains Part as a key and list of indices to
      skip as values.

  Returns:
  list[Part | Feature]: List of parts/features created.
  
		"""
		pass

	@property
	def polyline(self):
		pass
	@polyline.setter
	def polyline(self):
		pass

	def projection(self,feature, parts, extendEdges=True):
		"""
		Creates projection of a feature from one part to another part.

  Args:
    feature (Feature): Feature that needs to be projected on Part.
    parts (list[Part]): Parts on which feature projection to be.
    extendEdges (bool): If True, extends the edge.
  
		"""
		pass

	def pushPull(self,feature, depth, newPart=False, resultType=None):
		"""
		Pushes or pulls a face or an edge to a specified distance.

  Args:
    feature (Feature): Feature to push or pull.
    depth (float | str): The precise distance. 
      A positive value extends, whereas a negative value contracts.
    newPart (bool): If True, creates a new Part as a result of pushPull operation.
    resultType (str): Result type of pushPull operation. This option is valid
      only for pushPull a sketch on face.
      - NEW_PART
      - ADD
      - REMOVE
      - REPLACE

  Returns:
    Part: If New Part created, otherwise return None.
  
		"""
		pass

	def revolve2(self,profiles, axis, direction="SINGLE", resultType="NEW_PART", mergeTargets=None, flipAxis=False, angle1="0", angle2="0"):
		"""
		New Revolve - Revolve a face, sketch, line, or 2D edge about an axis.

  Args:
    profiles (FeatureArea | FeatureCurve): A face, line, or 2D edge.
    axis (FeatureLinear | FeatureCircular | Axis): An edge, line, cylindrical 
    hole or an Axis.

      Selecting an edge on another part projects the axis of revolution to the
      planar face that will be rotated.
    direction (str): Valid values are: SINGLE, BOTH and SYMMETRY.
    resultType (str): Valid values are: COMBINE, SUBTRACT, INTERSECT and NEW_PART.
    mergeTargets (list[Feature]): Explict merge targets for Result Type.
    flipAxis (bool): If True, axis will be flipped.
    angle1 (float): The angle of revolution.
    angle2 (float): The angle of revolution when direction is Both.

  Returns:
    Part|None: New part created if resultType is NEW_PART.
  
		"""
		pass

	def sweep(self,profiles, path, solidProfile=None, sweepAsSolid=True, profileOrientation=True, propagate=True, pathIgnoredFeatures=None, guideCurves=None, pathDirection="DIRECTION_1", twistType="NO_TWIST", twistAngle="0", twistTurns="0", twistAngleDir2="0", twistTurnsDir2="0", resultType="NEW_PART", mergeWithAllParts=True, mergeParts=None, twist1Reverse=False, twist2Reverse=False, guideScale="UNIFORM"):
		"""
		Sweep a profile along a path to create a solid or 3D surface.

  Args:
    profiles (FeatureArea | FeatureCurve): A face or a closed sketch.
    path(list[FeatureCurve]): Path for the sweep.
    solidProfile (Part): Sweep profile as solid. Only applicable for solid cylinder.
    sweepAsSolid (bool): If true, sweep as solids otherwise sweep as surfaces.
    profileOrientation (bool): If true, sweep orientation will be normal to the
      path otherwise parallel.
    propagate (bool): If true, all the tangent edges of the input path is also selected.
    pathIgnoredFeatures (list[FeatureCurve]): Edge to be ignored when propagate is True.
    guideCurves (list[FeatureCurve]): Guide curves for the sweep. No guide curves are set by default.
    pathDirection (str): Sweep direction.
      - DIRECTION_1
      - DIRECTION_2
      - BOTH
    twistType (str): Twist type.
      - NO_TWIST
      - ANGLE_TWIST
      - NO_OF_TURNS
    twistAngle (float): Twist angle in DIRECTION_1.
    twistTurns (float): Number of twist turns in DIRECTION_1.
    twistAngleDir2 (float): Twist angle in DIRECTION_2. Applicable only when
      pathDirection is "BOTH".
    twistTurnsDir2 (float): Number of twist turns in DIRECTION_2. Applicable
      only when pathDirection is "BOTH".
    resultType (str): Result type of sweep operation.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeTargets.
    mergeParts (Part): Parts to be merged with sweep operation.
    twist1Reverse (bool): If True, Reverse the twist in DIRECTION_1 or DIRECTION_2.
    twist2Reverse (bool): If True, Reverse the twist in DIRECTION_2. Applicable
      only when pathDirection is "BOTH".
    guideScale (str): Guide scale option. Applicable only when guideCurves is provided.
      - UNIFORM
      - LATERAL

  Returns:
    Part|None: New part created if resultType is NEW_PART.
  
		"""
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

class FeatureCylindrical:
	def __init__(self,*args):
		"""
Feature that is a cylindrical face.
  Represent the cylindrical areas of a part, i.e, the surface of a hole or a
  cylinder. 
  
  They are not created through the API but can be retrieved from a part.
  
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	@property
	def area(self):
		pass
	@area.setter
	def area(self):
		pass

	@property
	def axis(self):
		pass
	@axis.setter
	def axis(self):
		pass

	@property
	def cg(self):
		pass
	@cg.setter
	def cg(self):
		pass

	def chamferByAngle(self,feature, angle=45, dist=0.003):
		"""
		Creates chamfer on a Linear/Planar feature.

  Args:
    feature (Feature): Feature that needs to be chamfer.
    angle (float): Chamfer angle from the edge.
    dist (float): Chamfer distance from the edge.
  
		"""
		pass

	def chamferByDistance(self,feature, dist1=0.003, dist2=0.003):
		"""
		Creates chamfer on a linear or planar feature.

  Args:
    feature (Feature): Feature that needs to be chamfer.
    dist1 (float): Chamfer distance from the edge.
    dist2 (float): Chamfer distance from the edge.
  
		"""
		pass

	def circularPattern(self,input, axis, angle=60, count=3, equalSpacing=False, instances=False, symmetry=False, axisReverse=False, result="NEW_PART", mergeWithAllParts=True, mergeParts=None, copiesToSkip=None):
		"""
		Circular Pattern parts or faces around an axis.

  Args:
    input (list[Part] | list[FeatureArea]): Parts or Features to create circular
      pattern.
    axis (math.Vector | FeatureCurve | Axis): Axis is a reference line, edge,
      or axis to which the pattern will be parallel.
    angle (float): Angle within which the copies are equally spaced.
    count (int): Number of copies.
    equalSpacing (bool): If True, equally space the copies within a specified
      Angle.
    instances (bool): If True, any changes to part or face will apply to all
      instances.
    symmetry (bool): Symmetry in Direction 1.
    axisReverse (bool): Reverse the axis in Direction 1.
    result (str): Result type of circular pattern.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeParts.
    mergeParts (list[Part]): Parts to be merged with circular pattern.
    copiesToSkip (dict{Part: list[indicesToSkip]}): Set copies to skip. It's
      basically a dictionary which contains Part as a key and list of indices to
      skip as values.

  Returns:
  list[Part]: List of parts created.
  
		"""
		pass

	@property
	def connectedCurves(self):
		pass
	@connectedCurves.setter
	def connectedCurves(self):
		pass

	@property
	def connectedFaces(self):
		pass
	@connectedFaces.setter
	def connectedFaces(self):
		pass

	@property
	def connectedPoints(self):
		pass
	@connectedPoints.setter
	def connectedPoints(self):
		pass

	def deleteFaces(self,features):
		"""
		Deletes the specified faces from the part.

  Args:
    features (list[Feature]): Features to be removed.
  
		"""
		pass

	def divideCurve(self,curve, divisionPoints, uniformDivision=False):
		"""
		Divide a curve by inserting points along the curve.

    Args:
      curve (FeatureCurve): Curve to divide.
      divisionPoints((listlist[float], bool)): List of divisionPoints (length
        ratio or length along the curve) and the bool value depicts position
        ratio. If True, Divide the curve on length ratio otherwise
        division occurs at length along the curve.
      uniformDivision (bool): If True, Curve is uniformly divided.

    Returns:
      Part: New part created.
    
		"""
		pass

	def draft(self,features, direction, neutralPlane, angle1=3.0, angle2=3.0, flipDrawDirection1=False, flipDrawDirection2=False):
		"""
		Add draft to one or more faces of a part when designing a product that is
     manufactured using injection molding.

  Args:
    features (list[FeatureArea]): Faces to Draft.
    direction (str): The Draft direction. Valid values are: SINGLE, BOTH and SYMMETRY.
    neutralPlane (FeaturePlanar, Plane): A reference plane or an existing face
     in the model. neutralPlane can not be same as draft feature.
    angle1 (float): The angle1 of draft.
    angle2 (float): The angle2 of draft. This is applicable for BOTH or SYMMETRY value for direction.
    flipDrawDirection1 (bool): If True, flips the draw direction of draft in single direction.
    flipDrawDirection2 (bool): If True, flips the draw direction of draft.
      Applicable for BOTH direction.
  
		"""
		pass

	def edgeFillet(self,feature, radius="3 mm", continuity="TANGENT", tangentPropagation=True):
		"""
		Creates fillet on a Linear feature.

  Args:
    feature (Feature): feature that needs to fillet.
    radius (float | str): Radius of the fillet.
    continuity (str): Valid values are: TANGENT and CURVATURE.
    tangentPropagation (bool): If True, selecting an edge will also select all
      of its tangent edges.
  
		"""
		pass

	def extendCurve(self,curve, extensionTypeAndDistance, shape="LINEAR", extendEnds="START", extendAsNewPart=False):
		"""
		Extend a curve and modify the shape of the extension.

    Args:
      curve (FeatureCurve): Extracted Curve to extend.
      extensionTypeAndDistance (list[str, float] | list[str, Feature | Plane]):
        Extension type as string and Distance as float to extend. For
        UP_TO_FEATURE extension type second argument should be either a Feature
        or System Plane.
        Valid extension types are:
          - EXTENSION_DISTANCE
          - INCREMENT_FACTOR
          - TOTAL_LENGTH
          - UP_TO_FEATURE
      shape (str): Shape of extend curve.
        - LINEAR
        - SOFT
        - REFLECTIVE
        - NATURAL
        - ARC
      extendEnds (str): To reverse the curve extension direction.
        - START
        - END
      extendAsNewPart (bool): Create a new part if True, otherwise merge in
        original part.

    Returns:
      Part: New part created.
    
		"""
		pass

	def extract(self,features, maintainReference=True):
		"""
		Extracts geometry features and transfer them into a new part.

  Args:
    features (list[Feature]): Feature to be extracted.
    maintainReference (bool): If true, set reference associativity otherwise not.

  Returns:
    Part: New part created.
  
		"""
		pass

	def faceCurve(self,face, method="POINT", uRatio=True, vRatio=True, ignoreHoles=True, uCurvesCount=5, vCurvesCount=5, uParmRatioForPointMode="0", vParmRatioForPointMode="0", vertexFeature=None, vertexPoint=None):
		"""
		Extract curves from a face in the U or V direction. This is useful for
  creating trim curves that run along a face.

  Args:
    face (FeatureArea): Face on which extract curves.
    method (str): Method for face curve.
      - POINT
      - VERTEX
      - MESH
    uRatio (bool): If True, create U curves.
    vRatio (bool): If True, create V curves.
    ignoreHoles (bool): If True, ignore the holes in face curve.
    uCurvesCount (Int): Set U curves count to create for method type MESH.
    vCurvesCount (Int): Set V curves count to create for method type MESH.
    uParmRatioForPointMode (Float): Set U Param for method type POINT,
      param should be between 0 and 1.
    vParmRatioForPointMode (Float): Set V Param for method type POINT,
      param should be between 0 and 1.
    vertexFeature (FeaturePoint): Feature point to extract iso-param curve for
      method type VERTEX.
    vertexPoint (math.Point): Point to create face curves for method
      type POINT. Point must lie on the face.

  Returns:
    Part: New part created.
    
		"""
		pass

	def findClosestPoint(self,referencePoint):
		"""
		Returns the point on feature that nearest to the specified point.
    
    Args:
      referencePoint (Point) : Reference point to find closest point on feature.
    
    Returns:
      Point : The closest point of the feature from specified point.
    
		"""
		pass

	def getClass(self,classname):
		pass

	def getConnectionPoints(self,uslices=2, vslices=2):
		"""
		Returns a list of points that can be used to visualize how the feature 
    is connected (spider points).

    Args:
      uslices (int) : Number of slices in u-direction.
      vslices (int) : Number of slices in v-direction

    Returns:
      list[Point] : List of points that can be used to visualize 
        how the feature is connected.
    
		"""
		pass

	def getCurvature(self,point):
		"""
		Returns the directions and curvatures at the given point position

    Args:
      point (Point) : Point position at which directions and curvatures are computed.
    
		"""
		pass

	def getNormal(self,point):
		"""
		Return vector perpendicular to surface at a point.

    Args:
      point (Point) : Point position at which normal is computed.
    
		"""
		pass

	@property
	def height(self):
		pass
	@height.setter
	def height(self):
		pass

	def helixCurve(self,profile, type="TURNS_AND_HEIGHT", numTurns=2, pitch=0.003, height=0.01, startAngle="0", curveHand="RIGHT", heightReverse=False, lockDiameterRatio=True, topDiameter="0"):
		"""
		Create a solid loft or a lofted surface from profiles and guide curves.

    Args:
      profile (FeatureCircular): Circular sketch profile.
      type (str): Helix Curve Type.
        - TURNS_AND_HEIGHT
        - TURNS_AND_PITCH
        - HEIGHT_AND_PITCH
      numTurns(float): Number of turns in helix curve.
      pitch (float): Pitch distance of helix curve.
      height (float): Height of helix curve.
      startAngle (float): Start angle of helix curve.
      curveHand (str): Helix curve sweep direction.
        - LEFT
        - RIGHT
      heightReverse (bool): If True, Reverse the height in other direction of
        helix curve.
      lockDiameterRatio (bool): If True, Set lock diameter ratio of helix curve.
      topDiameter (float): Top Diameter of helix curve.

    Returns:
      Part: New part created.
    
		"""
		pass

	def isTouching(self,point):
		"""
		Determines the point is on the surface or not.

    Args:
      point (Point) : Point positionin x, y, z coordinates.
    
		"""
		pass

	def isa(self,type=None, filter=None, **kwds):
		"""
		Determines the object matches the specified settings or not.

    Args:
      type (Part, Assembly, Contact, ..) :  Specify type of the object.
      filter (method) : Return value of specified callback method.
      **kwds : Additional keyword arguments to match attributes.
    
		"""
		pass

	@property
	def ishole(self):
		pass
	@ishole.setter
	def ishole(self):
		pass

	def isperiodic(self):
		"""
		Returns True if it's a periodic area, False otherwise.
		"""
		pass

	def linearPattern(self,input, direction1, direction2=(0, 0, 0), bothDirection=False, spacing1="0.0", count1=3, spacing2="0.0", count2=3, instances=False, symmetry1=False, symmetry2=False, reverseDir1=False, reverseDir2=False, result="NEW_PART", mergeWithAllParts=True, mergeParts=None, copiesToSkip=None, seedOnly=False):
		"""
		Linear Pattern parts or faces along a direction.

  Args:
    input (list[Part] | list[FeatureArea]): Parts or Features to create linear
      pattern.
    direction1 (math.Vector | FeatureCurve | Axis): Direction can be a 
      reference line, edge, or axis to which the pattern will be parallel.
    direction2 (math.Vector | FeatureCurve | Axis): Direction can be a 
      reference line, edge, or axis to which the pattern will be parallel.
    bothDirection (bool): If True, sets in both direction otherwise single
      direction.
    spacing1 (float): Distance between two copies.
    count1 (int): Number of copies.
    spacing2 (float): Distance between two copies.
    count2 (int): Number of copies.
    instances (bool): If True, any changes to part or face will apply to all
      instances.
    symmetry1 (bool): Symmetry in Direction 1.
    symmetry2 (bool): Symmetry in Direction 2.
    reverseDir1 (bool): Reverse the pattern direction in Direction 1.
    reverseDir2 (bool): Reverse the pattern direction in Direction 2.
    result (str): Result type of linear pattern.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeParts.
    mergeParts (list[Part]): Parts to be merged with linear pattern.
    copiesToSkip ((dict{Part: list[tuplex,y)]}): Set copies to skip. Here x and
      y are the indices in 2D space of copy , which needs to be skipped.
    seedOnly (bool): If True, pattern the entities only along the first row and
      first column.

  Returns:
  list[Part]: List of parts created.
  
		"""
		pass

	@property
	def location(self):
		pass
	@location.setter
	def location(self):
		pass

	def loft(self,profiles, loftAsSolid=True, guideCurves=None, arcLengthProfiles=False, arcLengthGuides=False, swapSurface=False, closed=False, resultType="NEW_PART", mergeWithAllParts=True, mergeParts=None, profileChain=False, guideCurvesTangent=False):
		"""
		Create a solid loft or a lofted surface from profiles and guide curves.

  Args:
    profiles (list[FeatureArea | FeatureCurve]): Faces, closed sketches or curves.
    loftAsSolid (bool): If true, sweep as solids otherwise sweep as surfaces.
    guideCurves(list[FeatureCurve]): Guide curves for the loft.
    arcLengthProfiles (bool): If True, Set Arc Length Parametrization on profiles.
    arcLengthGuides (bool): If True, Set Arc Length Parametrization on guides.
    swapSurface (bool): If True, interchange the profiles and rails to get
      preferred shape.
    closed (bool): If True, close the loft.
    resultType (str): Result type of loft operation.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeTargets.
    mergeParts (Part): Parts to be merged with loft operation.
    profileChain (bool): True, Allows to select profile's connected edges.
    guideCurvesTangent (bool): True, Allows to select  guideCurve's connected edges.

  Returns:
    Part|None: New part created if resultType is NEW_PART.
  
		"""
		pass

	@property
	def minBoundingBox(self):
		pass
	@minBoundingBox.setter
	def minBoundingBox(self):
		pass

	def moveFaces(self,features, position, duplicate=False):
		"""
		Translate, rotate, copy, or extend features.

  Args:
    features (list[FeatureArea]): The features to move.
    position (math.Matrix44): The position to move the features at.
    duplicate (bool): If True, copy the features at given position.
  
		"""
		pass

	def multiSweep(self,profiles, path, sweepAsSolid=True, arcLengthProfiles=False, arcLengthGuides=False, orientation="PERPENDICULAR", normalToSurface=None, resultType="NEW_PART", mergeWithAllParts=True, mergeParts=None):
		"""
		Sweep multiple profiles along a path to create a solid or surface.

  Args:
    profiles (list[FeatureArea | FeatureCurve]): Faces or closed sketches.
    path(list[FeatureCurve]): Path for the multiSweep.
    sweepAsSolid (bool): If true, sweep as solids otherwise sweep as surfaces.
    arcLengthProfiles (bool): If True, Set Arc Length Parametrization on profiles.
    arcLengthGuides (bool): If True, Set Arc Length Parametrization on path.
    orientation (str): Orientation for multiSweep.
      - PERPENDICULAR
      - PARALLEL
      - NORMAL_TO_SURFACE
    normalToSurface (list[FeatureArea]): Face to which sweep orientation will be
      normal.
    resultType (str): Result type of multiSweep operation.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeTargets.
    mergeParts (Part): Parts to be merged with sweep operation.

  Returns:
    Part|None: New part created if resultType is NEW_PART.
  
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	def offset(self,input, value, newPart=False):
		"""
		Offset surfaces or parts.

  Args:
    input (list[Part] | list[Feature])
    value (float | str): Desired offset distance. Negative value means inward direction.
      If value is a string it can be a Model Variable or a value with units.
    newPart (bool): If True, creates a new part.

  Returns:
    Part|None: New part created if newPart was True.
  
		"""
		pass

	@property
	def part(self):
		pass
	@part.setter
	def part(self):
		pass

	def partition(self,entity, thickness="1 mm", reverseDirection=False, minSize="0", maxSize=1):
		"""
		Divides a solid part into design and non-design regions by selecting a
  hole, pocket, or face to offset.

  Args:
    entity (Part | Assembly | [[Feature]]): Part/Assembly from which you want to
      plug the holes or a feature to be partitioned. If it is a feature then it
      should be list of feature list, where the features in internal feature
      list are related to each other.
    thickness (float): The partition thickness consider in mm.
    reverseDirection (bool): Switch the direction of the offset for the
      partition.
    minSize (float): Minimum size of partition to find features.
    maxSize (float): Maximum size of partition to find features.

  Returns:
    Part: New part created.
  
		"""
		pass

	def patternAlongPath(self,input, path, count=3, equalSpacing=False, spacing=0.01, instances=False, method="TRANSFORM", orientation="MAINTAIN_SEED_ORIENTATION", pathReverse=False, result="NEW_PART", mergeWithAllParts=True, mergeParts=None, copiesToSkip=None):
		"""
		Pattern parts or faces along curve.

   Args:
    input (list[Part] | list[FeatureArea]): Parts or Features to create pattern
      along the curve.
    path (list[FeatureCurve]): Path for pattern.
    count (int): Number of copies.
    equalSpacing (bool): If True, equally space the copies.
    spacing (float): Distance between two copies.
    instances (bool): If True, any changes to part or face will apply to all instances.
    method (str): Pattern method.
      - TRANSFORM
      - OFFSET
    orientation (str): Pattern Orientation.
      - TANGENT_TO_CURVE
      - MAINTAIN_SEED_ORIENTATION
    pathReverse (bool): Reverse the path of pattern.
    result (str): Result type of pattern along path.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeParts.
    mergeParts (list[Part]): Parts to be merged with pattern along path.
    copiesToSkip (dict{Part: list[indicesToSkip]}): Set copies to skip. It's
      basically a dictionary which contains Part as a key and list of indices to
      skip as values.

  Returns:
  list[Part | Feature]: List of parts/features created.
  
		"""
		pass

	def projection(self,feature, parts, extendEdges=True):
		"""
		Creates projection of a feature from one part to another part.

  Args:
    feature (Feature): Feature that needs to be projected on Part.
    parts (list[Part]): Parts on which feature projection to be.
    extendEdges (bool): If True, extends the edge.
  
		"""
		pass

	def pushPull(self,feature, depth, newPart=False, resultType=None):
		"""
		Pushes or pulls a face or an edge to a specified distance.

  Args:
    feature (Feature): Feature to push or pull.
    depth (float | str): The precise distance. 
      A positive value extends, whereas a negative value contracts.
    newPart (bool): If True, creates a new Part as a result of pushPull operation.
    resultType (str): Result type of pushPull operation. This option is valid
      only for pushPull a sketch on face.
      - NEW_PART
      - ADD
      - REMOVE
      - REPLACE

  Returns:
    Part: If New Part created, otherwise return None.
  
		"""
		pass

	@property
	def radius(self):
		pass
	@radius.setter
	def radius(self):
		pass

	def revolve2(self,profiles, axis, direction="SINGLE", resultType="NEW_PART", mergeTargets=None, flipAxis=False, angle1="0", angle2="0"):
		"""
		New Revolve - Revolve a face, sketch, line, or 2D edge about an axis.

  Args:
    profiles (FeatureArea | FeatureCurve): A face, line, or 2D edge.
    axis (FeatureLinear | FeatureCircular | Axis): An edge, line, cylindrical 
    hole or an Axis.

      Selecting an edge on another part projects the axis of revolution to the
      planar face that will be rotated.
    direction (str): Valid values are: SINGLE, BOTH and SYMMETRY.
    resultType (str): Valid values are: COMBINE, SUBTRACT, INTERSECT and NEW_PART.
    mergeTargets (list[Feature]): Explict merge targets for Result Type.
    flipAxis (bool): If True, axis will be flipped.
    angle1 (float): The angle of revolution.
    angle2 (float): The angle of revolution when direction is Both.

  Returns:
    Part|None: New part created if resultType is NEW_PART.
  
		"""
		pass

	def shell(self,feature, thickness=1):
		"""
		Removes material and create thin walls to generate a shelled part.

  Args:
    feature (FeatureArea): Feature to create a shelled part from.
    thickness (float): Shell thickness.
  
		"""
		pass

	def simplifyHoles(self,entity, minSize="0", maxSize=None):
		"""
		Finds and removes holes and pockets, and find raised areas such as lettering.

  Args:
    entity (Part | Assembly | Feature): Part/Assembly from which you want to 
      remove the holes from or FeatureCircular which needs to be removed.
    minSize (float): Minimum size of hole.
    maxSize (float): Maximum size of hole.
  
		"""
		pass

	def simplifyPlugs(self,entity, minSize="0", maxSize=None):
		"""
		Finds holes and pockets, and plug them by filling the area with a new part

  Args:
    entity (Part | Assembly | Feature): Part/Assembly from which you want to plug 
      the holes or a Circular feature that needs to be plugged.
    minSize (float): Minimum size of plug.
    maxSize (float): Maximum size of plug.
  
		"""
		pass

	def simplifyRounds(self,entity, roundType="ALL", minSize="0", maxSize=None):
		"""
		Finds and removes both round (convex) and fillet (concave) surfaces.

  Args:
    entity (Part | Assembly | Feature): Part/Assembly from which you want to 
      remove the fillets, chamfers from or a Feature to be removed.
    roundType (str): Valid values are: ROUNDS, FILLETS, CHAMFERS and ALL.
    minSize (float): Minimum size of round.
    maxSize (float): Maximum size of round.
  
		"""
		pass

	def sweep(self,profiles, path, solidProfile=None, sweepAsSolid=True, profileOrientation=True, propagate=True, pathIgnoredFeatures=None, guideCurves=None, pathDirection="DIRECTION_1", twistType="NO_TWIST", twistAngle="0", twistTurns="0", twistAngleDir2="0", twistTurnsDir2="0", resultType="NEW_PART", mergeWithAllParts=True, mergeParts=None, twist1Reverse=False, twist2Reverse=False, guideScale="UNIFORM"):
		"""
		Sweep a profile along a path to create a solid or 3D surface.

  Args:
    profiles (FeatureArea | FeatureCurve): A face or a closed sketch.
    path(list[FeatureCurve]): Path for the sweep.
    solidProfile (Part): Sweep profile as solid. Only applicable for solid cylinder.
    sweepAsSolid (bool): If true, sweep as solids otherwise sweep as surfaces.
    profileOrientation (bool): If true, sweep orientation will be normal to the
      path otherwise parallel.
    propagate (bool): If true, all the tangent edges of the input path is also selected.
    pathIgnoredFeatures (list[FeatureCurve]): Edge to be ignored when propagate is True.
    guideCurves (list[FeatureCurve]): Guide curves for the sweep. No guide curves are set by default.
    pathDirection (str): Sweep direction.
      - DIRECTION_1
      - DIRECTION_2
      - BOTH
    twistType (str): Twist type.
      - NO_TWIST
      - ANGLE_TWIST
      - NO_OF_TURNS
    twistAngle (float): Twist angle in DIRECTION_1.
    twistTurns (float): Number of twist turns in DIRECTION_1.
    twistAngleDir2 (float): Twist angle in DIRECTION_2. Applicable only when
      pathDirection is "BOTH".
    twistTurnsDir2 (float): Number of twist turns in DIRECTION_2. Applicable
      only when pathDirection is "BOTH".
    resultType (str): Result type of sweep operation.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeTargets.
    mergeParts (Part): Parts to be merged with sweep operation.
    twist1Reverse (bool): If True, Reverse the twist in DIRECTION_1 or DIRECTION_2.
    twist2Reverse (bool): If True, Reverse the twist in DIRECTION_2. Applicable
      only when pathDirection is "BOTH".
    guideScale (str): Guide scale option. Applicable only when guideCurves is provided.
      - UNIFORM
      - LATERAL

  Returns:
    Part|None: New part created if resultType is NEW_PART.
  
		"""
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

class FeatureLinear:
	def __init__(self,*args):
		"""
Line features like a polygon edges.

  They are not created through the API but can be retrieved from a part.
  
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	@property
	def cg(self):
		pass
	@cg.setter
	def cg(self):
		pass

	def chamferByAngle(self,feature, angle=45, dist=0.003):
		"""
		Creates chamfer on a Linear/Planar feature.

  Args:
    feature (Feature): Feature that needs to be chamfer.
    angle (float): Chamfer angle from the edge.
    dist (float): Chamfer distance from the edge.
  
		"""
		pass

	def chamferByDistance(self,feature, dist1=0.003, dist2=0.003):
		"""
		Creates chamfer on a linear or planar feature.

  Args:
    feature (Feature): Feature that needs to be chamfer.
    dist1 (float): Chamfer distance from the edge.
    dist2 (float): Chamfer distance from the edge.
  
		"""
		pass

	def circularPattern(self,input, axis, angle=60, count=3, equalSpacing=False, instances=False, symmetry=False, axisReverse=False, result="NEW_PART", mergeWithAllParts=True, mergeParts=None, copiesToSkip=None):
		"""
		Circular Pattern parts or faces around an axis.

  Args:
    input (list[Part] | list[FeatureArea]): Parts or Features to create circular
      pattern.
    axis (math.Vector | FeatureCurve | Axis): Axis is a reference line, edge,
      or axis to which the pattern will be parallel.
    angle (float): Angle within which the copies are equally spaced.
    count (int): Number of copies.
    equalSpacing (bool): If True, equally space the copies within a specified
      Angle.
    instances (bool): If True, any changes to part or face will apply to all
      instances.
    symmetry (bool): Symmetry in Direction 1.
    axisReverse (bool): Reverse the axis in Direction 1.
    result (str): Result type of circular pattern.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeParts.
    mergeParts (list[Part]): Parts to be merged with circular pattern.
    copiesToSkip (dict{Part: list[indicesToSkip]}): Set copies to skip. It's
      basically a dictionary which contains Part as a key and list of indices to
      skip as values.

  Returns:
  list[Part]: List of parts created.
  
		"""
		pass

	@property
	def connectedCurves(self):
		pass
	@connectedCurves.setter
	def connectedCurves(self):
		pass

	@property
	def connectedFaces(self):
		pass
	@connectedFaces.setter
	def connectedFaces(self):
		pass

	@property
	def connectedPoints(self):
		pass
	@connectedPoints.setter
	def connectedPoints(self):
		pass

	def createPipe(self,path, section="CIRCLE", size=0.01, width=0.01, thickness="0.0", angle=None, ignoredFeatures=None, propagate=False, resultType="COMBINE"):
		"""
		 Create Pipe for FeatureCurve.

  Args:
    path (list[FeatureCurve])
    section (str): The Pipe profile type. Valid choices are: CIRCLE, SQUARE, TRIANGLE
      and RECTANGLE.
    size (float | str): Length of the pipe.
      If value is a string it can be a Model Variable or a value with units.
    width (float): Width of the pipe, only applicable for Rectangular profile.
    thickness (float | str): Pipe thickness. 
      If not set or set to zero, it will be solid pipe.
      If value is a string it can be a Model Variable or a value with units.
    angle (float): Angle in radians. Only for xy alignment.
    ignoredFeatures: Ignored Features. Not mandatory. In propagated cases,
      if we need to ignore certain curves.
    propagate (bool): if True enables propagate option, otherwise disabled.
    resultType (str): Valid values are: COMBINE, SUBTRACT, INTERSECT and NEW_PART.

  Returns:
    Part: New part created.
  
		"""
		pass

	def divideCurve(self,curve, divisionPoints, uniformDivision=False):
		"""
		Divide a curve by inserting points along the curve.

    Args:
      curve (FeatureCurve): Curve to divide.
      divisionPoints((listlist[float], bool)): List of divisionPoints (length
        ratio or length along the curve) and the bool value depicts position
        ratio. If True, Divide the curve on length ratio otherwise
        division occurs at length along the curve.
      uniformDivision (bool): If True, Curve is uniformly divided.

    Returns:
      Part: New part created.
    
		"""
		pass

	def edgeFillet(self,feature, radius="3 mm", continuity="TANGENT", tangentPropagation=True):
		"""
		Creates fillet on a Linear feature.

  Args:
    feature (Feature): feature that needs to fillet.
    radius (float | str): Radius of the fillet.
    continuity (str): Valid values are: TANGENT and CURVATURE.
    tangentPropagation (bool): If True, selecting an edge will also select all
      of its tangent edges.
  
		"""
		pass

	def extendCurve(self,curve, extensionTypeAndDistance, shape="LINEAR", extendEnds="START", extendAsNewPart=False):
		"""
		Extend a curve and modify the shape of the extension.

    Args:
      curve (FeatureCurve): Extracted Curve to extend.
      extensionTypeAndDistance (list[str, float] | list[str, Feature | Plane]):
        Extension type as string and Distance as float to extend. For
        UP_TO_FEATURE extension type second argument should be either a Feature
        or System Plane.
        Valid extension types are:
          - EXTENSION_DISTANCE
          - INCREMENT_FACTOR
          - TOTAL_LENGTH
          - UP_TO_FEATURE
      shape (str): Shape of extend curve.
        - LINEAR
        - SOFT
        - REFLECTIVE
        - NATURAL
        - ARC
      extendEnds (str): To reverse the curve extension direction.
        - START
        - END
      extendAsNewPart (bool): Create a new part if True, otherwise merge in
        original part.

    Returns:
      Part: New part created.
    
		"""
		pass

	def extendSurface(self,edgesToExtend=None, allEdgesToExtend=False, extensionType="LINEAR", extent="EXTENSION_LENGTH", distance=0.01, extendUptoSurface=None, extendUptoPlane=None, createNewPart=False):
		"""
		Extend a surface along one or more edges.

  Args:
    edgesToExtend (list[FeatureCurve]): Edges of the surface to extend. Valid
      only if allEdgesToExtend is False.
    allEdgesToExtend (float): If True, it will consider all the edges of the
      surface and ignore edgesToExtend values.
    extensionType (str): Extension Type.
      - LINEAR
      - SOFT
      - REFLECTIVE
    extent (str): Extent of surface.
      - EXTENSION_LENGTH
      - UP_TO_PLANE
      - UP_TO_SURFACE
    distance (float): Extension distance of surface.
    extendUptoSurface (Part): System Plane up to which surface is extended. Only
      valid for UP_TO_SURFACE extent.
    extendUptoPlane (Plane): Plane up to which surface is extended. Only
      valid for UP_TO_PLANE extent.
    createNewPart (bool): If True, new part is created as a extended surface
      otherwise not.

  Returns:
    Part|None: New part created if createNewPart is True.
    
		"""
		pass

	def extract(self,features, maintainReference=True):
		"""
		Extracts geometry features and transfer them into a new part.

  Args:
    features (list[Feature]): Feature to be extracted.
    maintainReference (bool): If true, set reference associativity otherwise not.

  Returns:
    Part: New part created.
  
		"""
		pass

	def faceCurve(self,face, method="POINT", uRatio=True, vRatio=True, ignoreHoles=True, uCurvesCount=5, vCurvesCount=5, uParmRatioForPointMode="0", vParmRatioForPointMode="0", vertexFeature=None, vertexPoint=None):
		"""
		Extract curves from a face in the U or V direction. This is useful for
  creating trim curves that run along a face.

  Args:
    face (FeatureArea): Face on which extract curves.
    method (str): Method for face curve.
      - POINT
      - VERTEX
      - MESH
    uRatio (bool): If True, create U curves.
    vRatio (bool): If True, create V curves.
    ignoreHoles (bool): If True, ignore the holes in face curve.
    uCurvesCount (Int): Set U curves count to create for method type MESH.
    vCurvesCount (Int): Set V curves count to create for method type MESH.
    uParmRatioForPointMode (Float): Set U Param for method type POINT,
      param should be between 0 and 1.
    vParmRatioForPointMode (Float): Set V Param for method type POINT,
      param should be between 0 and 1.
    vertexFeature (FeaturePoint): Feature point to extract iso-param curve for
      method type VERTEX.
    vertexPoint (math.Point): Point to create face curves for method
      type POINT. Point must lie on the face.

  Returns:
    Part: New part created.
    
		"""
		pass

	def findClosestPoint(self,referencePoint):
		"""
		Returns the point on feature that nearest to the specified point.
    
    Args:
      referencePoint (Point) : Reference point to find closest point on feature.
    
    Returns:
      Point : The closest point of the feature from specified point.
    
		"""
		pass

	def getClass(self,classname):
		pass

	def getConnectionPoints(self,uslices=2, vslices=None):
		"""
		Return a list of points that can be used to visualize how the feature
    is connected (spider points).

    Args:
      uslices (int) : Number of slices in u-direction.
      vslices (int) : Number of slices in v-direction.

    Returns:
      list[Point] : Points that can be used to visualize how the 
      feature is connected.
    
		"""
		pass

	def helixCurve(self,profile, type="TURNS_AND_HEIGHT", numTurns=2, pitch=0.003, height=0.01, startAngle="0", curveHand="RIGHT", heightReverse=False, lockDiameterRatio=True, topDiameter="0"):
		"""
		Create a solid loft or a lofted surface from profiles and guide curves.

    Args:
      profile (FeatureCircular): Circular sketch profile.
      type (str): Helix Curve Type.
        - TURNS_AND_HEIGHT
        - TURNS_AND_PITCH
        - HEIGHT_AND_PITCH
      numTurns(float): Number of turns in helix curve.
      pitch (float): Pitch distance of helix curve.
      height (float): Height of helix curve.
      startAngle (float): Start angle of helix curve.
      curveHand (str): Helix curve sweep direction.
        - LEFT
        - RIGHT
      heightReverse (bool): If True, Reverse the height in other direction of
        helix curve.
      lockDiameterRatio (bool): If True, Set lock diameter ratio of helix curve.
      topDiameter (float): Top Diameter of helix curve.

    Returns:
      Part: New part created.
    
		"""
		pass

	def isTouching(self,point):
		"""
		Determines the point is on the curve or not. 

    Args:
      point (Point) : Point position x,y,z.
    
		"""
		pass

	def isa(self,type=None, filter=None, **kwds):
		"""
		Determines the object matches the specified settings or not.

    Args:
      type (Part, Assembly, Contact, ..) :  Specify type of the object.
      filter (method) : Return value of specified callback method.
      **kwds : Additional keyword arguments to match attributes.
    
		"""
		pass

	@property
	def ishole(self):
		pass
	@ishole.setter
	def ishole(self):
		pass

	@property
	def length(self):
		pass
	@length.setter
	def length(self):
		pass

	def linearPattern(self,input, direction1, direction2=(0, 0, 0), bothDirection=False, spacing1="0.0", count1=3, spacing2="0.0", count2=3, instances=False, symmetry1=False, symmetry2=False, reverseDir1=False, reverseDir2=False, result="NEW_PART", mergeWithAllParts=True, mergeParts=None, copiesToSkip=None, seedOnly=False):
		"""
		Linear Pattern parts or faces along a direction.

  Args:
    input (list[Part] | list[FeatureArea]): Parts or Features to create linear
      pattern.
    direction1 (math.Vector | FeatureCurve | Axis): Direction can be a 
      reference line, edge, or axis to which the pattern will be parallel.
    direction2 (math.Vector | FeatureCurve | Axis): Direction can be a 
      reference line, edge, or axis to which the pattern will be parallel.
    bothDirection (bool): If True, sets in both direction otherwise single
      direction.
    spacing1 (float): Distance between two copies.
    count1 (int): Number of copies.
    spacing2 (float): Distance between two copies.
    count2 (int): Number of copies.
    instances (bool): If True, any changes to part or face will apply to all
      instances.
    symmetry1 (bool): Symmetry in Direction 1.
    symmetry2 (bool): Symmetry in Direction 2.
    reverseDir1 (bool): Reverse the pattern direction in Direction 1.
    reverseDir2 (bool): Reverse the pattern direction in Direction 2.
    result (str): Result type of linear pattern.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeParts.
    mergeParts (list[Part]): Parts to be merged with linear pattern.
    copiesToSkip ((dict{Part: list[tuplex,y)]}): Set copies to skip. Here x and
      y are the indices in 2D space of copy , which needs to be skipped.
    seedOnly (bool): If True, pattern the entities only along the first row and
      first column.

  Returns:
  list[Part]: List of parts created.
  
		"""
		pass

	@property
	def location(self):
		pass
	@location.setter
	def location(self):
		pass

	def loft(self,profiles, loftAsSolid=True, guideCurves=None, arcLengthProfiles=False, arcLengthGuides=False, swapSurface=False, closed=False, resultType="NEW_PART", mergeWithAllParts=True, mergeParts=None, profileChain=False, guideCurvesTangent=False):
		"""
		Create a solid loft or a lofted surface from profiles and guide curves.

  Args:
    profiles (list[FeatureArea | FeatureCurve]): Faces, closed sketches or curves.
    loftAsSolid (bool): If true, sweep as solids otherwise sweep as surfaces.
    guideCurves(list[FeatureCurve]): Guide curves for the loft.
    arcLengthProfiles (bool): If True, Set Arc Length Parametrization on profiles.
    arcLengthGuides (bool): If True, Set Arc Length Parametrization on guides.
    swapSurface (bool): If True, interchange the profiles and rails to get
      preferred shape.
    closed (bool): If True, close the loft.
    resultType (str): Result type of loft operation.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeTargets.
    mergeParts (Part): Parts to be merged with loft operation.
    profileChain (bool): True, Allows to select profile's connected edges.
    guideCurvesTangent (bool): True, Allows to select  guideCurve's connected edges.

  Returns:
    Part|None: New part created if resultType is NEW_PART.
  
		"""
		pass

	@property
	def minBoundingBox(self):
		pass
	@minBoundingBox.setter
	def minBoundingBox(self):
		pass

	def moveFaces(self,features, position, duplicate=False):
		"""
		Translate, rotate, copy, or extend features.

  Args:
    features (list[FeatureArea]): The features to move.
    position (math.Matrix44): The position to move the features at.
    duplicate (bool): If True, copy the features at given position.
  
		"""
		pass

	def multiSweep(self,profiles, path, sweepAsSolid=True, arcLengthProfiles=False, arcLengthGuides=False, orientation="PERPENDICULAR", normalToSurface=None, resultType="NEW_PART", mergeWithAllParts=True, mergeParts=None):
		"""
		Sweep multiple profiles along a path to create a solid or surface.

  Args:
    profiles (list[FeatureArea | FeatureCurve]): Faces or closed sketches.
    path(list[FeatureCurve]): Path for the multiSweep.
    sweepAsSolid (bool): If true, sweep as solids otherwise sweep as surfaces.
    arcLengthProfiles (bool): If True, Set Arc Length Parametrization on profiles.
    arcLengthGuides (bool): If True, Set Arc Length Parametrization on path.
    orientation (str): Orientation for multiSweep.
      - PERPENDICULAR
      - PARALLEL
      - NORMAL_TO_SURFACE
    normalToSurface (list[FeatureArea]): Face to which sweep orientation will be
      normal.
    resultType (str): Result type of multiSweep operation.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeTargets.
    mergeParts (Part): Parts to be merged with sweep operation.

  Returns:
    Part|None: New part created if resultType is NEW_PART.
  
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	def offset(self,input, value, newPart=False):
		"""
		Offset surfaces or parts.

  Args:
    input (list[Part] | list[Feature])
    value (float | str): Desired offset distance. Negative value means inward direction.
      If value is a string it can be a Model Variable or a value with units.
    newPart (bool): If True, creates a new part.

  Returns:
    Part|None: New part created if newPart was True.
  
		"""
		pass

	def offsetCurves(self,curve, offsetDistance=0.01, extensionType="NATURAL", symmetry=False, endOptions="OPEN", elevationType="NONE", elevationDistance="0.0"):
		"""
		Create a copy of one or more curves at a specifies distance from the source
  curves This tool can be used on both 2D and 3D curves.

  Args:
    curve (FeatureCurve): Curve to create offset curve.
    offsetDistance (float): Offset distance form actual curve.
    extensionType (str): Extension Type for offset curve.
      - NATURAL
      - ROUND
      - LINEAR
    symmetry (bool): If True, offset curves are created in both direction.
    endOptions (str): End Options.
      - OPEN
      - CLOSED_AND_STRAIGHT_ENDS
      - CLOSED_AND_ROUNDED
    elevationType (str): Elevation Type.
      - NONE
      - NORMAL
      - CUSTOM
    elevationDistance (float): Elevation distance for the offset curve.

  Returns:
    Part: New part created.
    
		"""
		pass

	@property
	def part(self):
		pass
	@part.setter
	def part(self):
		pass

	def patch(self,features):
		"""
		Creates patches to fill in specified missing surfaces.

  Args:
    features (list[Feature]): Features to be patched.

  Returns:
    list[Part]: New parts created.
  
		"""
		pass

	def patternAlongPath(self,input, path, count=3, equalSpacing=False, spacing=0.01, instances=False, method="TRANSFORM", orientation="MAINTAIN_SEED_ORIENTATION", pathReverse=False, result="NEW_PART", mergeWithAllParts=True, mergeParts=None, copiesToSkip=None):
		"""
		Pattern parts or faces along curve.

   Args:
    input (list[Part] | list[FeatureArea]): Parts or Features to create pattern
      along the curve.
    path (list[FeatureCurve]): Path for pattern.
    count (int): Number of copies.
    equalSpacing (bool): If True, equally space the copies.
    spacing (float): Distance between two copies.
    instances (bool): If True, any changes to part or face will apply to all instances.
    method (str): Pattern method.
      - TRANSFORM
      - OFFSET
    orientation (str): Pattern Orientation.
      - TANGENT_TO_CURVE
      - MAINTAIN_SEED_ORIENTATION
    pathReverse (bool): Reverse the path of pattern.
    result (str): Result type of pattern along path.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeParts.
    mergeParts (list[Part]): Parts to be merged with pattern along path.
    copiesToSkip (dict{Part: list[indicesToSkip]}): Set copies to skip. It's
      basically a dictionary which contains Part as a key and list of indices to
      skip as values.

  Returns:
  list[Part | Feature]: List of parts/features created.
  
		"""
		pass

	@property
	def polyline(self):
		pass
	@polyline.setter
	def polyline(self):
		pass

	def projection(self,feature, parts, extendEdges=True):
		"""
		Creates projection of a feature from one part to another part.

  Args:
    feature (Feature): Feature that needs to be projected on Part.
    parts (list[Part]): Parts on which feature projection to be.
    extendEdges (bool): If True, extends the edge.
  
		"""
		pass

	def pushPull(self,feature, depth, newPart=False, resultType=None):
		"""
		Pushes or pulls a face or an edge to a specified distance.

  Args:
    feature (Feature): Feature to push or pull.
    depth (float | str): The precise distance. 
      A positive value extends, whereas a negative value contracts.
    newPart (bool): If True, creates a new Part as a result of pushPull operation.
    resultType (str): Result type of pushPull operation. This option is valid
      only for pushPull a sketch on face.
      - NEW_PART
      - ADD
      - REMOVE
      - REPLACE

  Returns:
    Part: If New Part created, otherwise return None.
  
		"""
		pass

	def revolve2(self,profiles, axis, direction="SINGLE", resultType="NEW_PART", mergeTargets=None, flipAxis=False, angle1="0", angle2="0"):
		"""
		New Revolve - Revolve a face, sketch, line, or 2D edge about an axis.

  Args:
    profiles (FeatureArea | FeatureCurve): A face, line, or 2D edge.
    axis (FeatureLinear | FeatureCircular | Axis): An edge, line, cylindrical 
    hole or an Axis.

      Selecting an edge on another part projects the axis of revolution to the
      planar face that will be rotated.
    direction (str): Valid values are: SINGLE, BOTH and SYMMETRY.
    resultType (str): Valid values are: COMBINE, SUBTRACT, INTERSECT and NEW_PART.
    mergeTargets (list[Feature]): Explict merge targets for Result Type.
    flipAxis (bool): If True, axis will be flipped.
    angle1 (float): The angle of revolution.
    angle2 (float): The angle of revolution when direction is Both.

  Returns:
    Part|None: New part created if resultType is NEW_PART.
  
		"""
		pass

	def simplifyImprints(self,entity):
		"""
		Finds and removes imprints from a part.

  An imprint is an edge or a point that appears on a surface that can be removed
  without changing the underlying integrity of the surface, such as scratches or
  trimmed points.

  Args:
    entity (Part | Assembly | FeatureLinear): Part/Assembly from which you want to
      remove the imprints from or FeatureLinear imprint to be removed.
  
		"""
		pass

	def slice(self,targets, cutOrigin=None, cutNormal=None, surfaceFeature=None, extendSurface=True):
		"""
		Slices a set of solid objects with a cutting plane or cutting surface.

  You must provide cutOrigin and cutNormal or surfaceFeature.

  Args:
    targets (list[Part]): The parts to slice across the cutting plane.
    cutOrigin (math.Point): The origin of the cutting plane.
    cutNormal (math.Vector): The normal of the cutting plane.
    surfaceFeature (FeatureArea): The surface to slice the enity accross.
    extendSurface (bool): Set Automatic extension On/Off for tool Surface.

  Returns:
    Part: The new sliced part created.
  
		"""
		pass

	def sweep(self,profiles, path, solidProfile=None, sweepAsSolid=True, profileOrientation=True, propagate=True, pathIgnoredFeatures=None, guideCurves=None, pathDirection="DIRECTION_1", twistType="NO_TWIST", twistAngle="0", twistTurns="0", twistAngleDir2="0", twistTurnsDir2="0", resultType="NEW_PART", mergeWithAllParts=True, mergeParts=None, twist1Reverse=False, twist2Reverse=False, guideScale="UNIFORM"):
		"""
		Sweep a profile along a path to create a solid or 3D surface.

  Args:
    profiles (FeatureArea | FeatureCurve): A face or a closed sketch.
    path(list[FeatureCurve]): Path for the sweep.
    solidProfile (Part): Sweep profile as solid. Only applicable for solid cylinder.
    sweepAsSolid (bool): If true, sweep as solids otherwise sweep as surfaces.
    profileOrientation (bool): If true, sweep orientation will be normal to the
      path otherwise parallel.
    propagate (bool): If true, all the tangent edges of the input path is also selected.
    pathIgnoredFeatures (list[FeatureCurve]): Edge to be ignored when propagate is True.
    guideCurves (list[FeatureCurve]): Guide curves for the sweep. No guide curves are set by default.
    pathDirection (str): Sweep direction.
      - DIRECTION_1
      - DIRECTION_2
      - BOTH
    twistType (str): Twist type.
      - NO_TWIST
      - ANGLE_TWIST
      - NO_OF_TURNS
    twistAngle (float): Twist angle in DIRECTION_1.
    twistTurns (float): Number of twist turns in DIRECTION_1.
    twistAngleDir2 (float): Twist angle in DIRECTION_2. Applicable only when
      pathDirection is "BOTH".
    twistTurnsDir2 (float): Number of twist turns in DIRECTION_2. Applicable
      only when pathDirection is "BOTH".
    resultType (str): Result type of sweep operation.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeTargets.
    mergeParts (Part): Parts to be merged with sweep operation.
    twist1Reverse (bool): If True, Reverse the twist in DIRECTION_1 or DIRECTION_2.
    twist2Reverse (bool): If True, Reverse the twist in DIRECTION_2. Applicable
      only when pathDirection is "BOTH".
    guideScale (str): Guide scale option. Applicable only when guideCurves is provided.
      - UNIFORM
      - LATERAL

  Returns:
    Part|None: New part created if resultType is NEW_PART.
  
		"""
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

class FeatureMeasure:
	def __init__(self,feature, **kwds):
		"""
Measures the length of a feature.

  Args:
    feature (Union[FeatureLinear, FeatureCircular]): The feature being measured.
  
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	def destroy(self):
		"""
		Delete the object removing it from the model.
    
    The object may come back due to an undo/redo.
    
		"""
		pass

	@property
	def feature(self):
		pass
	@feature.setter
	def feature(self):
		pass

	def getAllChildren(self,type=None, **kwds):
		"""
		Returns a list of all children that matches the specified type.

    Args:
      type (list[Named]): Filter to use to get the children based on object type.
      **kwds : Additional keyword arguments to match other attributes of the object.

    Returns:
      list[Union[Part, Motor, BoundaryCondition, ...]]: The list of children that satisfy the supplied filters.
    
		"""
		pass

	def getAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value.

    Args:
      name (str): Attribute name to find its class.
    
		"""
		pass

	def getAttributes(self,type=None, **kwds):
		"""
		Return an dict of the attributes.
    Pass type and kwds to filter by type and Attribute properties

    Args:
      type (type): Filters the attribute based on type
      **kwds : Additional kwds argument to filter attribute by its properties

    Returns:
      dict: Return an OrderedDict of the attributes
    
		"""
		pass

	def getChild(self,name=None, recursive=False, **kwds):
		"""
		Returns the child of the object which matches the specified unique name.

    Args:
      name (str): The name of the child object.
      recursive (bool):  Search all descendents.
      **kwds : Additional keyword arguments to match attributes of the object.

    Returns:
      Named: The child object which satisfies the specified filters.
    
		"""
		pass

	def getChildren(self,type=None, recursive=False, sorted=False, **kwds):
		"""
		Returns a list of children that is of the specified type.

    Args:
      type (Type[Named]): Filter objects by class.
      recursive (bool): True to get all descendent Parts and Assemblies.
      sorted (bool): Sort the children base on id.

    Returns:
      list[Named]
    
		"""
		pass

	def getClass(self,className):
		"""
		Returns the class of the object.
    
    It can be simple or qualified (with namespace). If the name is simple, we 
    prepend the cls.namespace.

    Args:
      className (Union[Part, Occurrence, Named..]) : The class name. 
     
    Returns:
      Union[Part, Occurrence, Named..] : The class for the specified className. 

    
		"""
		pass

	def getClassAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value

    Args:
      name (str): Name of the attribute
    
		"""
		pass

	def getDependents(self,recursive=False, **kwds):
		"""
		Get objects that reference this object through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getGuiAttributeNames(self):
		"""
		Return list of the attribute names that are in the gui

    Returns:
      list: Returns list of active gui attribute
    
		"""
		pass

	def getGuiValue(self,attr, **kwds):
		"""
		Get value formatted to be shown in the gui

    Args:
      attr (str): Attribute name to gets its gui value.

    Returns:
      str: Returns a string of the value with its gui units, like "5 mm/s".
    
		"""
		pass

	def getReferences(self,recursive=False, **kwds):
		"""
		Get objects this object references through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getSerializedAttributeValues(self):
		pass

	def getValue(self,attr):
		"""
		Return the attribute value for passed attribute name.
    
    Args:
      attr (String): Attribute name to gets its value.

    Returns:
      str: Returns the attribute value
    
		"""
		pass

	def isa(self,type=None, filter=None, name=None, wildcard=None, **kwds):
		"""
		Determines if the object matches the specified settings or not.
    
    Args:
      type (Union[Part, Assembly, Contact..]): The type of the object.
      filter (method): Return value of specified callback method.
      name (str): Name that matches exactly with object name.
      wildcard (str): A pattern to match exactly with the object name.
      **kwds : Additional keyword arguments to match other attributes.

    Returns:
      bool : True, if a match is found, otherwise False.
    
		"""
		pass

	@property
	def length(self):
		pass
	@length.setter
	def length(self):
		pass

	@property
	def location(self):
		pass
	@location.setter
	def location(self):
		pass

	@property
	def locations(self):
		pass
	@locations.setter
	def locations(self):
		pass

	def modelPositions(self):
		"""
		Forces all objects to return the original model positions instead of the
    current analysis positions.

    Useful when defining draw methods on GeneralObjects where behaviour is 
    different while animating.
    
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	@property
	def parent(self):
		pass
	@parent.setter
	def parent(self):
		pass

	@property
	def parts(self):
		pass
	@parts.setter
	def parts(self):
		pass

	def setValue(self,attr, value):
		"""
		Alias for setattr (attr, value)
    Args:
      attr (str): Attribute name to sets its value.
      value (str): Attribute value to set .
    
		"""
		pass

	def setValues(self,**kwds):
		"""
		Sets passed name/value pairs.
    
    Values are set in a standard order (the order the attribute is defined
    on the class) which is required in certain cases when an attribute's
    setter expects another attribute to have already been set.
    For example, setting a reference before a location that is wrt it.
    
    Args:
      **kwds: Set attributes in one go.
    
		"""
		pass

	@property
	def textColor(self):
		pass
	@textColor.setter
	def textColor(self):
		pass

	@property
	def textHeader(self):
		pass
	@textHeader.setter
	def textHeader(self):
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

	def wasValueSet(self,attr):
		"""
		Check if attribute was set

    Args:
      attr (str): Attribute name to check it value set or not

    Returns:
      bool: True, if value was set else false.
    
		"""
		pass

class FeaturePlanar:
	def __init__(self,*args):
		"""
Features that are flat face.
  
   They are not created through the API but can be retrieved from a part.
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	@property
	def area(self):
		pass
	@area.setter
	def area(self):
		pass

	@property
	def cg(self):
		pass
	@cg.setter
	def cg(self):
		pass

	def chamferByAngle(self,feature, angle=45, dist=0.003):
		"""
		Creates chamfer on a Linear/Planar feature.

  Args:
    feature (Feature): Feature that needs to be chamfer.
    angle (float): Chamfer angle from the edge.
    dist (float): Chamfer distance from the edge.
  
		"""
		pass

	def chamferByDistance(self,feature, dist1=0.003, dist2=0.003):
		"""
		Creates chamfer on a linear or planar feature.

  Args:
    feature (Feature): Feature that needs to be chamfer.
    dist1 (float): Chamfer distance from the edge.
    dist2 (float): Chamfer distance from the edge.
  
		"""
		pass

	def circularPattern(self,input, axis, angle=60, count=3, equalSpacing=False, instances=False, symmetry=False, axisReverse=False, result="NEW_PART", mergeWithAllParts=True, mergeParts=None, copiesToSkip=None):
		"""
		Circular Pattern parts or faces around an axis.

  Args:
    input (list[Part] | list[FeatureArea]): Parts or Features to create circular
      pattern.
    axis (math.Vector | FeatureCurve | Axis): Axis is a reference line, edge,
      or axis to which the pattern will be parallel.
    angle (float): Angle within which the copies are equally spaced.
    count (int): Number of copies.
    equalSpacing (bool): If True, equally space the copies within a specified
      Angle.
    instances (bool): If True, any changes to part or face will apply to all
      instances.
    symmetry (bool): Symmetry in Direction 1.
    axisReverse (bool): Reverse the axis in Direction 1.
    result (str): Result type of circular pattern.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeParts.
    mergeParts (list[Part]): Parts to be merged with circular pattern.
    copiesToSkip (dict{Part: list[indicesToSkip]}): Set copies to skip. It's
      basically a dictionary which contains Part as a key and list of indices to
      skip as values.

  Returns:
  list[Part]: List of parts created.
  
		"""
		pass

	@property
	def connectedCurves(self):
		pass
	@connectedCurves.setter
	def connectedCurves(self):
		pass

	@property
	def connectedFaces(self):
		pass
	@connectedFaces.setter
	def connectedFaces(self):
		pass

	@property
	def connectedPoints(self):
		pass
	@connectedPoints.setter
	def connectedPoints(self):
		pass

	def deleteFaces(self,features):
		"""
		Deletes the specified faces from the part.

  Args:
    features (list[Feature]): Features to be removed.
  
		"""
		pass

	def divideCurve(self,curve, divisionPoints, uniformDivision=False):
		"""
		Divide a curve by inserting points along the curve.

    Args:
      curve (FeatureCurve): Curve to divide.
      divisionPoints((listlist[float], bool)): List of divisionPoints (length
        ratio or length along the curve) and the bool value depicts position
        ratio. If True, Divide the curve on length ratio otherwise
        division occurs at length along the curve.
      uniformDivision (bool): If True, Curve is uniformly divided.

    Returns:
      Part: New part created.
    
		"""
		pass

	def draft(self,features, direction, neutralPlane, angle1=3.0, angle2=3.0, flipDrawDirection1=False, flipDrawDirection2=False):
		"""
		Add draft to one or more faces of a part when designing a product that is
     manufactured using injection molding.

  Args:
    features (list[FeatureArea]): Faces to Draft.
    direction (str): The Draft direction. Valid values are: SINGLE, BOTH and SYMMETRY.
    neutralPlane (FeaturePlanar, Plane): A reference plane or an existing face
     in the model. neutralPlane can not be same as draft feature.
    angle1 (float): The angle1 of draft.
    angle2 (float): The angle2 of draft. This is applicable for BOTH or SYMMETRY value for direction.
    flipDrawDirection1 (bool): If True, flips the draw direction of draft in single direction.
    flipDrawDirection2 (bool): If True, flips the draw direction of draft.
      Applicable for BOTH direction.
  
		"""
		pass

	def edgeFillet(self,feature, radius="3 mm", continuity="TANGENT", tangentPropagation=True):
		"""
		Creates fillet on a Linear feature.

  Args:
    feature (Feature): feature that needs to fillet.
    radius (float | str): Radius of the fillet.
    continuity (str): Valid values are: TANGENT and CURVATURE.
    tangentPropagation (bool): If True, selecting an edge will also select all
      of its tangent edges.
  
		"""
		pass

	def extendCurve(self,curve, extensionTypeAndDistance, shape="LINEAR", extendEnds="START", extendAsNewPart=False):
		"""
		Extend a curve and modify the shape of the extension.

    Args:
      curve (FeatureCurve): Extracted Curve to extend.
      extensionTypeAndDistance (list[str, float] | list[str, Feature | Plane]):
        Extension type as string and Distance as float to extend. For
        UP_TO_FEATURE extension type second argument should be either a Feature
        or System Plane.
        Valid extension types are:
          - EXTENSION_DISTANCE
          - INCREMENT_FACTOR
          - TOTAL_LENGTH
          - UP_TO_FEATURE
      shape (str): Shape of extend curve.
        - LINEAR
        - SOFT
        - REFLECTIVE
        - NATURAL
        - ARC
      extendEnds (str): To reverse the curve extension direction.
        - START
        - END
      extendAsNewPart (bool): Create a new part if True, otherwise merge in
        original part.

    Returns:
      Part: New part created.
    
		"""
		pass

	def extract(self,features, maintainReference=True):
		"""
		Extracts geometry features and transfer them into a new part.

  Args:
    features (list[Feature]): Feature to be extracted.
    maintainReference (bool): If true, set reference associativity otherwise not.

  Returns:
    Part: New part created.
  
		"""
		pass

	def faceCurve(self,face, method="POINT", uRatio=True, vRatio=True, ignoreHoles=True, uCurvesCount=5, vCurvesCount=5, uParmRatioForPointMode="0", vParmRatioForPointMode="0", vertexFeature=None, vertexPoint=None):
		"""
		Extract curves from a face in the U or V direction. This is useful for
  creating trim curves that run along a face.

  Args:
    face (FeatureArea): Face on which extract curves.
    method (str): Method for face curve.
      - POINT
      - VERTEX
      - MESH
    uRatio (bool): If True, create U curves.
    vRatio (bool): If True, create V curves.
    ignoreHoles (bool): If True, ignore the holes in face curve.
    uCurvesCount (Int): Set U curves count to create for method type MESH.
    vCurvesCount (Int): Set V curves count to create for method type MESH.
    uParmRatioForPointMode (Float): Set U Param for method type POINT,
      param should be between 0 and 1.
    vParmRatioForPointMode (Float): Set V Param for method type POINT,
      param should be between 0 and 1.
    vertexFeature (FeaturePoint): Feature point to extract iso-param curve for
      method type VERTEX.
    vertexPoint (math.Point): Point to create face curves for method
      type POINT. Point must lie on the face.

  Returns:
    Part: New part created.
    
		"""
		pass

	def findClosestPoint(self,referencePoint):
		"""
		Returns the point on feature that nearest to the specified point.
    
    Args:
      referencePoint (Point) : Reference point to find closest point on feature.
    
    Returns:
      Point : The closest point of the feature from specified point.
    
		"""
		pass

	def getClass(self,classname):
		pass

	def getConnectionPoints(self,uslices=2, vslices=2):
		"""
		Returns a list of points that can be used to visualize how the feature 
    is connected (spider points).

    Args:
      uslices (int) : Number of slices in u-direction.
      vslices (int) : Number of slices in v-direction

    Returns:
      list[Point] : List of points that can be used to visualize 
        how the feature is connected.
    
		"""
		pass

	def getCurvature(self,point):
		"""
		Returns the directions and curvatures at the given point position

    Args:
      point (Point) : Point position at which directions and curvatures are computed.
    
		"""
		pass

	def getNormal(self,point=None):
		"""
		Returns vector perpendicular to face.

    Point is ignored for FeaturePlanar.
    
		"""
		pass

	def helixCurve(self,profile, type="TURNS_AND_HEIGHT", numTurns=2, pitch=0.003, height=0.01, startAngle="0", curveHand="RIGHT", heightReverse=False, lockDiameterRatio=True, topDiameter="0"):
		"""
		Create a solid loft or a lofted surface from profiles and guide curves.

    Args:
      profile (FeatureCircular): Circular sketch profile.
      type (str): Helix Curve Type.
        - TURNS_AND_HEIGHT
        - TURNS_AND_PITCH
        - HEIGHT_AND_PITCH
      numTurns(float): Number of turns in helix curve.
      pitch (float): Pitch distance of helix curve.
      height (float): Height of helix curve.
      startAngle (float): Start angle of helix curve.
      curveHand (str): Helix curve sweep direction.
        - LEFT
        - RIGHT
      heightReverse (bool): If True, Reverse the height in other direction of
        helix curve.
      lockDiameterRatio (bool): If True, Set lock diameter ratio of helix curve.
      topDiameter (float): Top Diameter of helix curve.

    Returns:
      Part: New part created.
    
		"""
		pass

	def isTouching(self,point):
		"""
		Determines the point is on the surface or not.

    Args:
      point (Point) : Point positionin x, y, z coordinates.
    
		"""
		pass

	def isa(self,type=None, filter=None, **kwds):
		"""
		Determines the object matches the specified settings or not.

    Args:
      type (Part, Assembly, Contact, ..) :  Specify type of the object.
      filter (method) : Return value of specified callback method.
      **kwds : Additional keyword arguments to match attributes.
    
		"""
		pass

	@property
	def ishole(self):
		pass
	@ishole.setter
	def ishole(self):
		pass

	def isperiodic(self):
		"""
		Returns True if it's a periodic area, False otherwise.
		"""
		pass

	def linearPattern(self,input, direction1, direction2=(0, 0, 0), bothDirection=False, spacing1="0.0", count1=3, spacing2="0.0", count2=3, instances=False, symmetry1=False, symmetry2=False, reverseDir1=False, reverseDir2=False, result="NEW_PART", mergeWithAllParts=True, mergeParts=None, copiesToSkip=None, seedOnly=False):
		"""
		Linear Pattern parts or faces along a direction.

  Args:
    input (list[Part] | list[FeatureArea]): Parts or Features to create linear
      pattern.
    direction1 (math.Vector | FeatureCurve | Axis): Direction can be a 
      reference line, edge, or axis to which the pattern will be parallel.
    direction2 (math.Vector | FeatureCurve | Axis): Direction can be a 
      reference line, edge, or axis to which the pattern will be parallel.
    bothDirection (bool): If True, sets in both direction otherwise single
      direction.
    spacing1 (float): Distance between two copies.
    count1 (int): Number of copies.
    spacing2 (float): Distance between two copies.
    count2 (int): Number of copies.
    instances (bool): If True, any changes to part or face will apply to all
      instances.
    symmetry1 (bool): Symmetry in Direction 1.
    symmetry2 (bool): Symmetry in Direction 2.
    reverseDir1 (bool): Reverse the pattern direction in Direction 1.
    reverseDir2 (bool): Reverse the pattern direction in Direction 2.
    result (str): Result type of linear pattern.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeParts.
    mergeParts (list[Part]): Parts to be merged with linear pattern.
    copiesToSkip ((dict{Part: list[tuplex,y)]}): Set copies to skip. Here x and
      y are the indices in 2D space of copy , which needs to be skipped.
    seedOnly (bool): If True, pattern the entities only along the first row and
      first column.

  Returns:
  list[Part]: List of parts created.
  
		"""
		pass

	@property
	def location(self):
		pass
	@location.setter
	def location(self):
		pass

	def loft(self,profiles, loftAsSolid=True, guideCurves=None, arcLengthProfiles=False, arcLengthGuides=False, swapSurface=False, closed=False, resultType="NEW_PART", mergeWithAllParts=True, mergeParts=None, profileChain=False, guideCurvesTangent=False):
		"""
		Create a solid loft or a lofted surface from profiles and guide curves.

  Args:
    profiles (list[FeatureArea | FeatureCurve]): Faces, closed sketches or curves.
    loftAsSolid (bool): If true, sweep as solids otherwise sweep as surfaces.
    guideCurves(list[FeatureCurve]): Guide curves for the loft.
    arcLengthProfiles (bool): If True, Set Arc Length Parametrization on profiles.
    arcLengthGuides (bool): If True, Set Arc Length Parametrization on guides.
    swapSurface (bool): If True, interchange the profiles and rails to get
      preferred shape.
    closed (bool): If True, close the loft.
    resultType (str): Result type of loft operation.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeTargets.
    mergeParts (Part): Parts to be merged with loft operation.
    profileChain (bool): True, Allows to select profile's connected edges.
    guideCurvesTangent (bool): True, Allows to select  guideCurve's connected edges.

  Returns:
    Part|None: New part created if resultType is NEW_PART.
  
		"""
		pass

	@property
	def minBoundingBox(self):
		pass
	@minBoundingBox.setter
	def minBoundingBox(self):
		pass

	def mirror(self,entity, planeOrigin=None, planeNormal=None, keep=True):
		"""
		Mirrors part across a symmetry plane.

  If entity is a Part, the planeOrigin and planeNormal need to be passed

  Args:
    entity (Part | FeaturePlanar): Part from which a mirror part needs to be created
      or a Planar feature which needs to be mirrored across the plane
    planeOrigin (math.Point): The origin of the symmetry plane.
    planeNormal (math.Vector): The normal of the symmetry plane.
    keep (bool): If True it keeps the original part, if False it removes it.

  Returns:
    Part: New mirrored part created.
  
		"""
		pass

	def moveFaces(self,features, position, duplicate=False):
		"""
		Translate, rotate, copy, or extend features.

  Args:
    features (list[FeatureArea]): The features to move.
    position (math.Matrix44): The position to move the features at.
    duplicate (bool): If True, copy the features at given position.
  
		"""
		pass

	def multiSweep(self,profiles, path, sweepAsSolid=True, arcLengthProfiles=False, arcLengthGuides=False, orientation="PERPENDICULAR", normalToSurface=None, resultType="NEW_PART", mergeWithAllParts=True, mergeParts=None):
		"""
		Sweep multiple profiles along a path to create a solid or surface.

  Args:
    profiles (list[FeatureArea | FeatureCurve]): Faces or closed sketches.
    path(list[FeatureCurve]): Path for the multiSweep.
    sweepAsSolid (bool): If true, sweep as solids otherwise sweep as surfaces.
    arcLengthProfiles (bool): If True, Set Arc Length Parametrization on profiles.
    arcLengthGuides (bool): If True, Set Arc Length Parametrization on path.
    orientation (str): Orientation for multiSweep.
      - PERPENDICULAR
      - PARALLEL
      - NORMAL_TO_SURFACE
    normalToSurface (list[FeatureArea]): Face to which sweep orientation will be
      normal.
    resultType (str): Result type of multiSweep operation.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeTargets.
    mergeParts (Part): Parts to be merged with sweep operation.

  Returns:
    Part|None: New part created if resultType is NEW_PART.
  
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	@property
	def normal(self):
		pass
	@normal.setter
	def normal(self):
		pass

	def offset(self,input, value, newPart=False):
		"""
		Offset surfaces or parts.

  Args:
    input (list[Part] | list[Feature])
    value (float | str): Desired offset distance. Negative value means inward direction.
      If value is a string it can be a Model Variable or a value with units.
    newPart (bool): If True, creates a new part.

  Returns:
    Part|None: New part created if newPart was True.
  
		"""
		pass

	@property
	def part(self):
		pass
	@part.setter
	def part(self):
		pass

	def partition(self,entity, thickness="1 mm", reverseDirection=False, minSize="0", maxSize=1):
		"""
		Divides a solid part into design and non-design regions by selecting a
  hole, pocket, or face to offset.

  Args:
    entity (Part | Assembly | [[Feature]]): Part/Assembly from which you want to
      plug the holes or a feature to be partitioned. If it is a feature then it
      should be list of feature list, where the features in internal feature
      list are related to each other.
    thickness (float): The partition thickness consider in mm.
    reverseDirection (bool): Switch the direction of the offset for the
      partition.
    minSize (float): Minimum size of partition to find features.
    maxSize (float): Maximum size of partition to find features.

  Returns:
    Part: New part created.
  
		"""
		pass

	def patternAlongPath(self,input, path, count=3, equalSpacing=False, spacing=0.01, instances=False, method="TRANSFORM", orientation="MAINTAIN_SEED_ORIENTATION", pathReverse=False, result="NEW_PART", mergeWithAllParts=True, mergeParts=None, copiesToSkip=None):
		"""
		Pattern parts or faces along curve.

   Args:
    input (list[Part] | list[FeatureArea]): Parts or Features to create pattern
      along the curve.
    path (list[FeatureCurve]): Path for pattern.
    count (int): Number of copies.
    equalSpacing (bool): If True, equally space the copies.
    spacing (float): Distance between two copies.
    instances (bool): If True, any changes to part or face will apply to all instances.
    method (str): Pattern method.
      - TRANSFORM
      - OFFSET
    orientation (str): Pattern Orientation.
      - TANGENT_TO_CURVE
      - MAINTAIN_SEED_ORIENTATION
    pathReverse (bool): Reverse the path of pattern.
    result (str): Result type of pattern along path.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeParts.
    mergeParts (list[Part]): Parts to be merged with pattern along path.
    copiesToSkip (dict{Part: list[indicesToSkip]}): Set copies to skip. It's
      basically a dictionary which contains Part as a key and list of indices to
      skip as values.

  Returns:
  list[Part | Feature]: List of parts/features created.
  
		"""
		pass

	def projection(self,feature, parts, extendEdges=True):
		"""
		Creates projection of a feature from one part to another part.

  Args:
    feature (Feature): Feature that needs to be projected on Part.
    parts (list[Part]): Parts on which feature projection to be.
    extendEdges (bool): If True, extends the edge.
  
		"""
		pass

	def pushPull(self,feature, depth, newPart=False, resultType=None):
		"""
		Pushes or pulls a face or an edge to a specified distance.

  Args:
    feature (Feature): Feature to push or pull.
    depth (float | str): The precise distance. 
      A positive value extends, whereas a negative value contracts.
    newPart (bool): If True, creates a new Part as a result of pushPull operation.
    resultType (str): Result type of pushPull operation. This option is valid
      only for pushPull a sketch on face.
      - NEW_PART
      - ADD
      - REMOVE
      - REPLACE

  Returns:
    Part: If New Part created, otherwise return None.
  
		"""
		pass

	def revolve2(self,profiles, axis, direction="SINGLE", resultType="NEW_PART", mergeTargets=None, flipAxis=False, angle1="0", angle2="0"):
		"""
		New Revolve - Revolve a face, sketch, line, or 2D edge about an axis.

  Args:
    profiles (FeatureArea | FeatureCurve): A face, line, or 2D edge.
    axis (FeatureLinear | FeatureCircular | Axis): An edge, line, cylindrical 
    hole or an Axis.

      Selecting an edge on another part projects the axis of revolution to the
      planar face that will be rotated.
    direction (str): Valid values are: SINGLE, BOTH and SYMMETRY.
    resultType (str): Valid values are: COMBINE, SUBTRACT, INTERSECT and NEW_PART.
    mergeTargets (list[Feature]): Explict merge targets for Result Type.
    flipAxis (bool): If True, axis will be flipped.
    angle1 (float): The angle of revolution.
    angle2 (float): The angle of revolution when direction is Both.

  Returns:
    Part|None: New part created if resultType is NEW_PART.
  
		"""
		pass

	def shell(self,feature, thickness=1):
		"""
		Removes material and create thin walls to generate a shelled part.

  Args:
    feature (FeatureArea): Feature to create a shelled part from.
    thickness (float): Shell thickness.
  
		"""
		pass

	def simplifyHoles(self,entity, minSize="0", maxSize=None):
		"""
		Finds and removes holes and pockets, and find raised areas such as lettering.

  Args:
    entity (Part | Assembly | Feature): Part/Assembly from which you want to 
      remove the holes from or FeatureCircular which needs to be removed.
    minSize (float): Minimum size of hole.
    maxSize (float): Maximum size of hole.
  
		"""
		pass

	def simplifyPlugs(self,entity, minSize="0", maxSize=None):
		"""
		Finds holes and pockets, and plug them by filling the area with a new part

  Args:
    entity (Part | Assembly | Feature): Part/Assembly from which you want to plug 
      the holes or a Circular feature that needs to be plugged.
    minSize (float): Minimum size of plug.
    maxSize (float): Maximum size of plug.
  
		"""
		pass

	def simplifyRounds(self,entity, roundType="ALL", minSize="0", maxSize=None):
		"""
		Finds and removes both round (convex) and fillet (concave) surfaces.

  Args:
    entity (Part | Assembly | Feature): Part/Assembly from which you want to 
      remove the fillets, chamfers from or a Feature to be removed.
    roundType (str): Valid values are: ROUNDS, FILLETS, CHAMFERS and ALL.
    minSize (float): Minimum size of round.
    maxSize (float): Maximum size of round.
  
		"""
		pass

	def sweep(self,profiles, path, solidProfile=None, sweepAsSolid=True, profileOrientation=True, propagate=True, pathIgnoredFeatures=None, guideCurves=None, pathDirection="DIRECTION_1", twistType="NO_TWIST", twistAngle="0", twistTurns="0", twistAngleDir2="0", twistTurnsDir2="0", resultType="NEW_PART", mergeWithAllParts=True, mergeParts=None, twist1Reverse=False, twist2Reverse=False, guideScale="UNIFORM"):
		"""
		Sweep a profile along a path to create a solid or 3D surface.

  Args:
    profiles (FeatureArea | FeatureCurve): A face or a closed sketch.
    path(list[FeatureCurve]): Path for the sweep.
    solidProfile (Part): Sweep profile as solid. Only applicable for solid cylinder.
    sweepAsSolid (bool): If true, sweep as solids otherwise sweep as surfaces.
    profileOrientation (bool): If true, sweep orientation will be normal to the
      path otherwise parallel.
    propagate (bool): If true, all the tangent edges of the input path is also selected.
    pathIgnoredFeatures (list[FeatureCurve]): Edge to be ignored when propagate is True.
    guideCurves (list[FeatureCurve]): Guide curves for the sweep. No guide curves are set by default.
    pathDirection (str): Sweep direction.
      - DIRECTION_1
      - DIRECTION_2
      - BOTH
    twistType (str): Twist type.
      - NO_TWIST
      - ANGLE_TWIST
      - NO_OF_TURNS
    twistAngle (float): Twist angle in DIRECTION_1.
    twistTurns (float): Number of twist turns in DIRECTION_1.
    twistAngleDir2 (float): Twist angle in DIRECTION_2. Applicable only when
      pathDirection is "BOTH".
    twistTurnsDir2 (float): Number of twist turns in DIRECTION_2. Applicable
      only when pathDirection is "BOTH".
    resultType (str): Result type of sweep operation.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeTargets.
    mergeParts (Part): Parts to be merged with sweep operation.
    twist1Reverse (bool): If True, Reverse the twist in DIRECTION_1 or DIRECTION_2.
    twist2Reverse (bool): If True, Reverse the twist in DIRECTION_2. Applicable
      only when pathDirection is "BOTH".
    guideScale (str): Guide scale option. Applicable only when guideCurves is provided.
      - UNIFORM
      - LATERAL

  Returns:
    Part|None: New part created if resultType is NEW_PART.
  
		"""
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

class FeaturePoint:
	def __init__(self,*args):
		"""
Features that are points.

  They are not created through the API but can be retrieved from a part.
  
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	@property
	def cg(self):
		pass
	@cg.setter
	def cg(self):
		pass

	def chamferByAngle(self,feature, angle=45, dist=0.003):
		"""
		Creates chamfer on a Linear/Planar feature.

  Args:
    feature (Feature): Feature that needs to be chamfer.
    angle (float): Chamfer angle from the edge.
    dist (float): Chamfer distance from the edge.
  
		"""
		pass

	def chamferByDistance(self,feature, dist1=0.003, dist2=0.003):
		"""
		Creates chamfer on a linear or planar feature.

  Args:
    feature (Feature): Feature that needs to be chamfer.
    dist1 (float): Chamfer distance from the edge.
    dist2 (float): Chamfer distance from the edge.
  
		"""
		pass

	def circularPattern(self,input, axis, angle=60, count=3, equalSpacing=False, instances=False, symmetry=False, axisReverse=False, result="NEW_PART", mergeWithAllParts=True, mergeParts=None, copiesToSkip=None):
		"""
		Circular Pattern parts or faces around an axis.

  Args:
    input (list[Part] | list[FeatureArea]): Parts or Features to create circular
      pattern.
    axis (math.Vector | FeatureCurve | Axis): Axis is a reference line, edge,
      or axis to which the pattern will be parallel.
    angle (float): Angle within which the copies are equally spaced.
    count (int): Number of copies.
    equalSpacing (bool): If True, equally space the copies within a specified
      Angle.
    instances (bool): If True, any changes to part or face will apply to all
      instances.
    symmetry (bool): Symmetry in Direction 1.
    axisReverse (bool): Reverse the axis in Direction 1.
    result (str): Result type of circular pattern.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeParts.
    mergeParts (list[Part]): Parts to be merged with circular pattern.
    copiesToSkip (dict{Part: list[indicesToSkip]}): Set copies to skip. It's
      basically a dictionary which contains Part as a key and list of indices to
      skip as values.

  Returns:
  list[Part]: List of parts created.
  
		"""
		pass

	@property
	def connectedCurves(self):
		pass
	@connectedCurves.setter
	def connectedCurves(self):
		pass

	@property
	def connectedFaces(self):
		pass
	@connectedFaces.setter
	def connectedFaces(self):
		pass

	@property
	def connectedPoints(self):
		pass
	@connectedPoints.setter
	def connectedPoints(self):
		pass

	def divideCurve(self,curve, divisionPoints, uniformDivision=False):
		"""
		Divide a curve by inserting points along the curve.

    Args:
      curve (FeatureCurve): Curve to divide.
      divisionPoints((listlist[float], bool)): List of divisionPoints (length
        ratio or length along the curve) and the bool value depicts position
        ratio. If True, Divide the curve on length ratio otherwise
        division occurs at length along the curve.
      uniformDivision (bool): If True, Curve is uniformly divided.

    Returns:
      Part: New part created.
    
		"""
		pass

	def edgeFillet(self,feature, radius="3 mm", continuity="TANGENT", tangentPropagation=True):
		"""
		Creates fillet on a Linear feature.

  Args:
    feature (Feature): feature that needs to fillet.
    radius (float | str): Radius of the fillet.
    continuity (str): Valid values are: TANGENT and CURVATURE.
    tangentPropagation (bool): If True, selecting an edge will also select all
      of its tangent edges.
  
		"""
		pass

	def extendCurve(self,curve, extensionTypeAndDistance, shape="LINEAR", extendEnds="START", extendAsNewPart=False):
		"""
		Extend a curve and modify the shape of the extension.

    Args:
      curve (FeatureCurve): Extracted Curve to extend.
      extensionTypeAndDistance (list[str, float] | list[str, Feature | Plane]):
        Extension type as string and Distance as float to extend. For
        UP_TO_FEATURE extension type second argument should be either a Feature
        or System Plane.
        Valid extension types are:
          - EXTENSION_DISTANCE
          - INCREMENT_FACTOR
          - TOTAL_LENGTH
          - UP_TO_FEATURE
      shape (str): Shape of extend curve.
        - LINEAR
        - SOFT
        - REFLECTIVE
        - NATURAL
        - ARC
      extendEnds (str): To reverse the curve extension direction.
        - START
        - END
      extendAsNewPart (bool): Create a new part if True, otherwise merge in
        original part.

    Returns:
      Part: New part created.
    
		"""
		pass

	def extract(self,features, maintainReference=True):
		"""
		Extracts geometry features and transfer them into a new part.

  Args:
    features (list[Feature]): Feature to be extracted.
    maintainReference (bool): If true, set reference associativity otherwise not.

  Returns:
    Part: New part created.
  
		"""
		pass

	def faceCurve(self,face, method="POINT", uRatio=True, vRatio=True, ignoreHoles=True, uCurvesCount=5, vCurvesCount=5, uParmRatioForPointMode="0", vParmRatioForPointMode="0", vertexFeature=None, vertexPoint=None):
		"""
		Extract curves from a face in the U or V direction. This is useful for
  creating trim curves that run along a face.

  Args:
    face (FeatureArea): Face on which extract curves.
    method (str): Method for face curve.
      - POINT
      - VERTEX
      - MESH
    uRatio (bool): If True, create U curves.
    vRatio (bool): If True, create V curves.
    ignoreHoles (bool): If True, ignore the holes in face curve.
    uCurvesCount (Int): Set U curves count to create for method type MESH.
    vCurvesCount (Int): Set V curves count to create for method type MESH.
    uParmRatioForPointMode (Float): Set U Param for method type POINT,
      param should be between 0 and 1.
    vParmRatioForPointMode (Float): Set V Param for method type POINT,
      param should be between 0 and 1.
    vertexFeature (FeaturePoint): Feature point to extract iso-param curve for
      method type VERTEX.
    vertexPoint (math.Point): Point to create face curves for method
      type POINT. Point must lie on the face.

  Returns:
    Part: New part created.
    
		"""
		pass

	def findClosestPoint(self,referencePoint):
		"""
		Returns the point on feature that nearest to the specified point.
    
    Args:
      referencePoint (Point) : Reference point to find closest point on feature.
    
    Returns:
      Point : The closest point of the feature from specified point.
    
		"""
		pass

	def getClass(self,classname):
		pass

	def getConnectionPoints(self,uslices=None, vslices=None):
		"""
		Returns a list of points that can be used to visualize how the feature
    is connected (spider points).

    Args:
      uslices (int) : Number of slices in u-direction.
      vslices (int) : Number of slices in v-direction.

    Returns:
      list[Point] : Points that can be used to visualize how the 
        feature is connected.
    
		"""
		pass

	def helixCurve(self,profile, type="TURNS_AND_HEIGHT", numTurns=2, pitch=0.003, height=0.01, startAngle="0", curveHand="RIGHT", heightReverse=False, lockDiameterRatio=True, topDiameter="0"):
		"""
		Create a solid loft or a lofted surface from profiles and guide curves.

    Args:
      profile (FeatureCircular): Circular sketch profile.
      type (str): Helix Curve Type.
        - TURNS_AND_HEIGHT
        - TURNS_AND_PITCH
        - HEIGHT_AND_PITCH
      numTurns(float): Number of turns in helix curve.
      pitch (float): Pitch distance of helix curve.
      height (float): Height of helix curve.
      startAngle (float): Start angle of helix curve.
      curveHand (str): Helix curve sweep direction.
        - LEFT
        - RIGHT
      heightReverse (bool): If True, Reverse the height in other direction of
        helix curve.
      lockDiameterRatio (bool): If True, Set lock diameter ratio of helix curve.
      topDiameter (float): Top Diameter of helix curve.

    Returns:
      Part: New part created.
    
		"""
		pass

	def isTouching(self,point):
		"""
		Determines the point overlap.

    Args:
      point (Point):  point position x,y,z.
    
		"""
		pass

	def isa(self,type=None, filter=None, **kwds):
		"""
		Determines the object matches the specified settings or not.

    Args:
      type (Part, Assembly, Contact, ..) :  Specify type of the object.
      filter (method) : Return value of specified callback method.
      **kwds : Additional keyword arguments to match attributes.
    
		"""
		pass

	@property
	def ishole(self):
		pass
	@ishole.setter
	def ishole(self):
		pass

	def linearPattern(self,input, direction1, direction2=(0, 0, 0), bothDirection=False, spacing1="0.0", count1=3, spacing2="0.0", count2=3, instances=False, symmetry1=False, symmetry2=False, reverseDir1=False, reverseDir2=False, result="NEW_PART", mergeWithAllParts=True, mergeParts=None, copiesToSkip=None, seedOnly=False):
		"""
		Linear Pattern parts or faces along a direction.

  Args:
    input (list[Part] | list[FeatureArea]): Parts or Features to create linear
      pattern.
    direction1 (math.Vector | FeatureCurve | Axis): Direction can be a 
      reference line, edge, or axis to which the pattern will be parallel.
    direction2 (math.Vector | FeatureCurve | Axis): Direction can be a 
      reference line, edge, or axis to which the pattern will be parallel.
    bothDirection (bool): If True, sets in both direction otherwise single
      direction.
    spacing1 (float): Distance between two copies.
    count1 (int): Number of copies.
    spacing2 (float): Distance between two copies.
    count2 (int): Number of copies.
    instances (bool): If True, any changes to part or face will apply to all
      instances.
    symmetry1 (bool): Symmetry in Direction 1.
    symmetry2 (bool): Symmetry in Direction 2.
    reverseDir1 (bool): Reverse the pattern direction in Direction 1.
    reverseDir2 (bool): Reverse the pattern direction in Direction 2.
    result (str): Result type of linear pattern.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeParts.
    mergeParts (list[Part]): Parts to be merged with linear pattern.
    copiesToSkip ((dict{Part: list[tuplex,y)]}): Set copies to skip. Here x and
      y are the indices in 2D space of copy , which needs to be skipped.
    seedOnly (bool): If True, pattern the entities only along the first row and
      first column.

  Returns:
  list[Part]: List of parts created.
  
		"""
		pass

	@property
	def location(self):
		pass
	@location.setter
	def location(self):
		pass

	def loft(self,profiles, loftAsSolid=True, guideCurves=None, arcLengthProfiles=False, arcLengthGuides=False, swapSurface=False, closed=False, resultType="NEW_PART", mergeWithAllParts=True, mergeParts=None, profileChain=False, guideCurvesTangent=False):
		"""
		Create a solid loft or a lofted surface from profiles and guide curves.

  Args:
    profiles (list[FeatureArea | FeatureCurve]): Faces, closed sketches or curves.
    loftAsSolid (bool): If true, sweep as solids otherwise sweep as surfaces.
    guideCurves(list[FeatureCurve]): Guide curves for the loft.
    arcLengthProfiles (bool): If True, Set Arc Length Parametrization on profiles.
    arcLengthGuides (bool): If True, Set Arc Length Parametrization on guides.
    swapSurface (bool): If True, interchange the profiles and rails to get
      preferred shape.
    closed (bool): If True, close the loft.
    resultType (str): Result type of loft operation.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeTargets.
    mergeParts (Part): Parts to be merged with loft operation.
    profileChain (bool): True, Allows to select profile's connected edges.
    guideCurvesTangent (bool): True, Allows to select  guideCurve's connected edges.

  Returns:
    Part|None: New part created if resultType is NEW_PART.
  
		"""
		pass

	@property
	def minBoundingBox(self):
		pass
	@minBoundingBox.setter
	def minBoundingBox(self):
		pass

	def moveFaces(self,features, position, duplicate=False):
		"""
		Translate, rotate, copy, or extend features.

  Args:
    features (list[FeatureArea]): The features to move.
    position (math.Matrix44): The position to move the features at.
    duplicate (bool): If True, copy the features at given position.
  
		"""
		pass

	def multiSweep(self,profiles, path, sweepAsSolid=True, arcLengthProfiles=False, arcLengthGuides=False, orientation="PERPENDICULAR", normalToSurface=None, resultType="NEW_PART", mergeWithAllParts=True, mergeParts=None):
		"""
		Sweep multiple profiles along a path to create a solid or surface.

  Args:
    profiles (list[FeatureArea | FeatureCurve]): Faces or closed sketches.
    path(list[FeatureCurve]): Path for the multiSweep.
    sweepAsSolid (bool): If true, sweep as solids otherwise sweep as surfaces.
    arcLengthProfiles (bool): If True, Set Arc Length Parametrization on profiles.
    arcLengthGuides (bool): If True, Set Arc Length Parametrization on path.
    orientation (str): Orientation for multiSweep.
      - PERPENDICULAR
      - PARALLEL
      - NORMAL_TO_SURFACE
    normalToSurface (list[FeatureArea]): Face to which sweep orientation will be
      normal.
    resultType (str): Result type of multiSweep operation.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeTargets.
    mergeParts (Part): Parts to be merged with sweep operation.

  Returns:
    Part|None: New part created if resultType is NEW_PART.
  
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	def offset(self,input, value, newPart=False):
		"""
		Offset surfaces or parts.

  Args:
    input (list[Part] | list[Feature])
    value (float | str): Desired offset distance. Negative value means inward direction.
      If value is a string it can be a Model Variable or a value with units.
    newPart (bool): If True, creates a new part.

  Returns:
    Part|None: New part created if newPart was True.
  
		"""
		pass

	@property
	def part(self):
		pass
	@part.setter
	def part(self):
		pass

	def patternAlongPath(self,input, path, count=3, equalSpacing=False, spacing=0.01, instances=False, method="TRANSFORM", orientation="MAINTAIN_SEED_ORIENTATION", pathReverse=False, result="NEW_PART", mergeWithAllParts=True, mergeParts=None, copiesToSkip=None):
		"""
		Pattern parts or faces along curve.

   Args:
    input (list[Part] | list[FeatureArea]): Parts or Features to create pattern
      along the curve.
    path (list[FeatureCurve]): Path for pattern.
    count (int): Number of copies.
    equalSpacing (bool): If True, equally space the copies.
    spacing (float): Distance between two copies.
    instances (bool): If True, any changes to part or face will apply to all instances.
    method (str): Pattern method.
      - TRANSFORM
      - OFFSET
    orientation (str): Pattern Orientation.
      - TANGENT_TO_CURVE
      - MAINTAIN_SEED_ORIENTATION
    pathReverse (bool): Reverse the path of pattern.
    result (str): Result type of pattern along path.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeParts.
    mergeParts (list[Part]): Parts to be merged with pattern along path.
    copiesToSkip (dict{Part: list[indicesToSkip]}): Set copies to skip. It's
      basically a dictionary which contains Part as a key and list of indices to
      skip as values.

  Returns:
  list[Part | Feature]: List of parts/features created.
  
		"""
		pass

	def projection(self,feature, parts, extendEdges=True):
		"""
		Creates projection of a feature from one part to another part.

  Args:
    feature (Feature): Feature that needs to be projected on Part.
    parts (list[Part]): Parts on which feature projection to be.
    extendEdges (bool): If True, extends the edge.
  
		"""
		pass

	def pushPull(self,feature, depth, newPart=False, resultType=None):
		"""
		Pushes or pulls a face or an edge to a specified distance.

  Args:
    feature (Feature): Feature to push or pull.
    depth (float | str): The precise distance. 
      A positive value extends, whereas a negative value contracts.
    newPart (bool): If True, creates a new Part as a result of pushPull operation.
    resultType (str): Result type of pushPull operation. This option is valid
      only for pushPull a sketch on face.
      - NEW_PART
      - ADD
      - REMOVE
      - REPLACE

  Returns:
    Part: If New Part created, otherwise return None.
  
		"""
		pass

	def revolve2(self,profiles, axis, direction="SINGLE", resultType="NEW_PART", mergeTargets=None, flipAxis=False, angle1="0", angle2="0"):
		"""
		New Revolve - Revolve a face, sketch, line, or 2D edge about an axis.

  Args:
    profiles (FeatureArea | FeatureCurve): A face, line, or 2D edge.
    axis (FeatureLinear | FeatureCircular | Axis): An edge, line, cylindrical 
    hole or an Axis.

      Selecting an edge on another part projects the axis of revolution to the
      planar face that will be rotated.
    direction (str): Valid values are: SINGLE, BOTH and SYMMETRY.
    resultType (str): Valid values are: COMBINE, SUBTRACT, INTERSECT and NEW_PART.
    mergeTargets (list[Feature]): Explict merge targets for Result Type.
    flipAxis (bool): If True, axis will be flipped.
    angle1 (float): The angle of revolution.
    angle2 (float): The angle of revolution when direction is Both.

  Returns:
    Part|None: New part created if resultType is NEW_PART.
  
		"""
		pass

	def sweep(self,profiles, path, solidProfile=None, sweepAsSolid=True, profileOrientation=True, propagate=True, pathIgnoredFeatures=None, guideCurves=None, pathDirection="DIRECTION_1", twistType="NO_TWIST", twistAngle="0", twistTurns="0", twistAngleDir2="0", twistTurnsDir2="0", resultType="NEW_PART", mergeWithAllParts=True, mergeParts=None, twist1Reverse=False, twist2Reverse=False, guideScale="UNIFORM"):
		"""
		Sweep a profile along a path to create a solid or 3D surface.

  Args:
    profiles (FeatureArea | FeatureCurve): A face or a closed sketch.
    path(list[FeatureCurve]): Path for the sweep.
    solidProfile (Part): Sweep profile as solid. Only applicable for solid cylinder.
    sweepAsSolid (bool): If true, sweep as solids otherwise sweep as surfaces.
    profileOrientation (bool): If true, sweep orientation will be normal to the
      path otherwise parallel.
    propagate (bool): If true, all the tangent edges of the input path is also selected.
    pathIgnoredFeatures (list[FeatureCurve]): Edge to be ignored when propagate is True.
    guideCurves (list[FeatureCurve]): Guide curves for the sweep. No guide curves are set by default.
    pathDirection (str): Sweep direction.
      - DIRECTION_1
      - DIRECTION_2
      - BOTH
    twistType (str): Twist type.
      - NO_TWIST
      - ANGLE_TWIST
      - NO_OF_TURNS
    twistAngle (float): Twist angle in DIRECTION_1.
    twistTurns (float): Number of twist turns in DIRECTION_1.
    twistAngleDir2 (float): Twist angle in DIRECTION_2. Applicable only when
      pathDirection is "BOTH".
    twistTurnsDir2 (float): Number of twist turns in DIRECTION_2. Applicable
      only when pathDirection is "BOTH".
    resultType (str): Result type of sweep operation.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeTargets.
    mergeParts (Part): Parts to be merged with sweep operation.
    twist1Reverse (bool): If True, Reverse the twist in DIRECTION_1 or DIRECTION_2.
    twist2Reverse (bool): If True, Reverse the twist in DIRECTION_2. Applicable
      only when pathDirection is "BOTH".
    guideScale (str): Guide scale option. Applicable only when guideCurves is provided.
      - UNIFORM
      - LATERAL

  Returns:
    Part|None: New part created if resultType is NEW_PART.
  
		"""
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

class FeatureSpherical:
	def __init__(self,*args):
		"""
Feature that is a Spherical face.
  
  They are not created through the API but can be retrieved from a part.
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	@property
	def area(self):
		pass
	@area.setter
	def area(self):
		pass

	@property
	def cg(self):
		pass
	@cg.setter
	def cg(self):
		pass

	def chamferByAngle(self,feature, angle=45, dist=0.003):
		"""
		Creates chamfer on a Linear/Planar feature.

  Args:
    feature (Feature): Feature that needs to be chamfer.
    angle (float): Chamfer angle from the edge.
    dist (float): Chamfer distance from the edge.
  
		"""
		pass

	def chamferByDistance(self,feature, dist1=0.003, dist2=0.003):
		"""
		Creates chamfer on a linear or planar feature.

  Args:
    feature (Feature): Feature that needs to be chamfer.
    dist1 (float): Chamfer distance from the edge.
    dist2 (float): Chamfer distance from the edge.
  
		"""
		pass

	def circularPattern(self,input, axis, angle=60, count=3, equalSpacing=False, instances=False, symmetry=False, axisReverse=False, result="NEW_PART", mergeWithAllParts=True, mergeParts=None, copiesToSkip=None):
		"""
		Circular Pattern parts or faces around an axis.

  Args:
    input (list[Part] | list[FeatureArea]): Parts or Features to create circular
      pattern.
    axis (math.Vector | FeatureCurve | Axis): Axis is a reference line, edge,
      or axis to which the pattern will be parallel.
    angle (float): Angle within which the copies are equally spaced.
    count (int): Number of copies.
    equalSpacing (bool): If True, equally space the copies within a specified
      Angle.
    instances (bool): If True, any changes to part or face will apply to all
      instances.
    symmetry (bool): Symmetry in Direction 1.
    axisReverse (bool): Reverse the axis in Direction 1.
    result (str): Result type of circular pattern.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeParts.
    mergeParts (list[Part]): Parts to be merged with circular pattern.
    copiesToSkip (dict{Part: list[indicesToSkip]}): Set copies to skip. It's
      basically a dictionary which contains Part as a key and list of indices to
      skip as values.

  Returns:
  list[Part]: List of parts created.
  
		"""
		pass

	@property
	def connectedCurves(self):
		pass
	@connectedCurves.setter
	def connectedCurves(self):
		pass

	@property
	def connectedFaces(self):
		pass
	@connectedFaces.setter
	def connectedFaces(self):
		pass

	@property
	def connectedPoints(self):
		pass
	@connectedPoints.setter
	def connectedPoints(self):
		pass

	def deleteFaces(self,features):
		"""
		Deletes the specified faces from the part.

  Args:
    features (list[Feature]): Features to be removed.
  
		"""
		pass

	def divideCurve(self,curve, divisionPoints, uniformDivision=False):
		"""
		Divide a curve by inserting points along the curve.

    Args:
      curve (FeatureCurve): Curve to divide.
      divisionPoints((listlist[float], bool)): List of divisionPoints (length
        ratio or length along the curve) and the bool value depicts position
        ratio. If True, Divide the curve on length ratio otherwise
        division occurs at length along the curve.
      uniformDivision (bool): If True, Curve is uniformly divided.

    Returns:
      Part: New part created.
    
		"""
		pass

	def draft(self,features, direction, neutralPlane, angle1=3.0, angle2=3.0, flipDrawDirection1=False, flipDrawDirection2=False):
		"""
		Add draft to one or more faces of a part when designing a product that is
     manufactured using injection molding.

  Args:
    features (list[FeatureArea]): Faces to Draft.
    direction (str): The Draft direction. Valid values are: SINGLE, BOTH and SYMMETRY.
    neutralPlane (FeaturePlanar, Plane): A reference plane or an existing face
     in the model. neutralPlane can not be same as draft feature.
    angle1 (float): The angle1 of draft.
    angle2 (float): The angle2 of draft. This is applicable for BOTH or SYMMETRY value for direction.
    flipDrawDirection1 (bool): If True, flips the draw direction of draft in single direction.
    flipDrawDirection2 (bool): If True, flips the draw direction of draft.
      Applicable for BOTH direction.
  
		"""
		pass

	def edgeFillet(self,feature, radius="3 mm", continuity="TANGENT", tangentPropagation=True):
		"""
		Creates fillet on a Linear feature.

  Args:
    feature (Feature): feature that needs to fillet.
    radius (float | str): Radius of the fillet.
    continuity (str): Valid values are: TANGENT and CURVATURE.
    tangentPropagation (bool): If True, selecting an edge will also select all
      of its tangent edges.
  
		"""
		pass

	def extendCurve(self,curve, extensionTypeAndDistance, shape="LINEAR", extendEnds="START", extendAsNewPart=False):
		"""
		Extend a curve and modify the shape of the extension.

    Args:
      curve (FeatureCurve): Extracted Curve to extend.
      extensionTypeAndDistance (list[str, float] | list[str, Feature | Plane]):
        Extension type as string and Distance as float to extend. For
        UP_TO_FEATURE extension type second argument should be either a Feature
        or System Plane.
        Valid extension types are:
          - EXTENSION_DISTANCE
          - INCREMENT_FACTOR
          - TOTAL_LENGTH
          - UP_TO_FEATURE
      shape (str): Shape of extend curve.
        - LINEAR
        - SOFT
        - REFLECTIVE
        - NATURAL
        - ARC
      extendEnds (str): To reverse the curve extension direction.
        - START
        - END
      extendAsNewPart (bool): Create a new part if True, otherwise merge in
        original part.

    Returns:
      Part: New part created.
    
		"""
		pass

	def extract(self,features, maintainReference=True):
		"""
		Extracts geometry features and transfer them into a new part.

  Args:
    features (list[Feature]): Feature to be extracted.
    maintainReference (bool): If true, set reference associativity otherwise not.

  Returns:
    Part: New part created.
  
		"""
		pass

	def faceCurve(self,face, method="POINT", uRatio=True, vRatio=True, ignoreHoles=True, uCurvesCount=5, vCurvesCount=5, uParmRatioForPointMode="0", vParmRatioForPointMode="0", vertexFeature=None, vertexPoint=None):
		"""
		Extract curves from a face in the U or V direction. This is useful for
  creating trim curves that run along a face.

  Args:
    face (FeatureArea): Face on which extract curves.
    method (str): Method for face curve.
      - POINT
      - VERTEX
      - MESH
    uRatio (bool): If True, create U curves.
    vRatio (bool): If True, create V curves.
    ignoreHoles (bool): If True, ignore the holes in face curve.
    uCurvesCount (Int): Set U curves count to create for method type MESH.
    vCurvesCount (Int): Set V curves count to create for method type MESH.
    uParmRatioForPointMode (Float): Set U Param for method type POINT,
      param should be between 0 and 1.
    vParmRatioForPointMode (Float): Set V Param for method type POINT,
      param should be between 0 and 1.
    vertexFeature (FeaturePoint): Feature point to extract iso-param curve for
      method type VERTEX.
    vertexPoint (math.Point): Point to create face curves for method
      type POINT. Point must lie on the face.

  Returns:
    Part: New part created.
    
		"""
		pass

	def findClosestPoint(self,referencePoint):
		"""
		Returns the point on feature that nearest to the specified point.
    
    Args:
      referencePoint (Point) : Reference point to find closest point on feature.
    
    Returns:
      Point : The closest point of the feature from specified point.
    
		"""
		pass

	def getClass(self,classname):
		pass

	def getConnectionPoints(self,uslices=2, vslices=2):
		"""
		Returns a list of points that can be used to visualize how the feature 
    is connected (spider points).

    Args:
      uslices (int) : Number of slices in u-direction.
      vslices (int) : Number of slices in v-direction

    Returns:
      list[Point] : List of points that can be used to visualize 
        how the feature is connected.
    
		"""
		pass

	def getCurvature(self,point):
		"""
		Returns the directions and curvatures at the given point position

    Args:
      point (Point) : Point position at which directions and curvatures are computed.
    
		"""
		pass

	def getNormal(self,point):
		"""
		Return vector perpendicular to surface at a point.

    Args:
      point (Point) : Point position at which normal is computed.
    
		"""
		pass

	def helixCurve(self,profile, type="TURNS_AND_HEIGHT", numTurns=2, pitch=0.003, height=0.01, startAngle="0", curveHand="RIGHT", heightReverse=False, lockDiameterRatio=True, topDiameter="0"):
		"""
		Create a solid loft or a lofted surface from profiles and guide curves.

    Args:
      profile (FeatureCircular): Circular sketch profile.
      type (str): Helix Curve Type.
        - TURNS_AND_HEIGHT
        - TURNS_AND_PITCH
        - HEIGHT_AND_PITCH
      numTurns(float): Number of turns in helix curve.
      pitch (float): Pitch distance of helix curve.
      height (float): Height of helix curve.
      startAngle (float): Start angle of helix curve.
      curveHand (str): Helix curve sweep direction.
        - LEFT
        - RIGHT
      heightReverse (bool): If True, Reverse the height in other direction of
        helix curve.
      lockDiameterRatio (bool): If True, Set lock diameter ratio of helix curve.
      topDiameter (float): Top Diameter of helix curve.

    Returns:
      Part: New part created.
    
		"""
		pass

	def isTouching(self,point):
		"""
		Determines the point is on the surface or not.

    Args:
      point (Point) : Point positionin x, y, z coordinates.
    
		"""
		pass

	def isa(self,type=None, filter=None, **kwds):
		"""
		Determines the object matches the specified settings or not.

    Args:
      type (Part, Assembly, Contact, ..) :  Specify type of the object.
      filter (method) : Return value of specified callback method.
      **kwds : Additional keyword arguments to match attributes.
    
		"""
		pass

	@property
	def ishole(self):
		pass
	@ishole.setter
	def ishole(self):
		pass

	def isperiodic(self):
		"""
		Returns True if it's a periodic area, False otherwise.
		"""
		pass

	def linearPattern(self,input, direction1, direction2=(0, 0, 0), bothDirection=False, spacing1="0.0", count1=3, spacing2="0.0", count2=3, instances=False, symmetry1=False, symmetry2=False, reverseDir1=False, reverseDir2=False, result="NEW_PART", mergeWithAllParts=True, mergeParts=None, copiesToSkip=None, seedOnly=False):
		"""
		Linear Pattern parts or faces along a direction.

  Args:
    input (list[Part] | list[FeatureArea]): Parts or Features to create linear
      pattern.
    direction1 (math.Vector | FeatureCurve | Axis): Direction can be a 
      reference line, edge, or axis to which the pattern will be parallel.
    direction2 (math.Vector | FeatureCurve | Axis): Direction can be a 
      reference line, edge, or axis to which the pattern will be parallel.
    bothDirection (bool): If True, sets in both direction otherwise single
      direction.
    spacing1 (float): Distance between two copies.
    count1 (int): Number of copies.
    spacing2 (float): Distance between two copies.
    count2 (int): Number of copies.
    instances (bool): If True, any changes to part or face will apply to all
      instances.
    symmetry1 (bool): Symmetry in Direction 1.
    symmetry2 (bool): Symmetry in Direction 2.
    reverseDir1 (bool): Reverse the pattern direction in Direction 1.
    reverseDir2 (bool): Reverse the pattern direction in Direction 2.
    result (str): Result type of linear pattern.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeParts.
    mergeParts (list[Part]): Parts to be merged with linear pattern.
    copiesToSkip ((dict{Part: list[tuplex,y)]}): Set copies to skip. Here x and
      y are the indices in 2D space of copy , which needs to be skipped.
    seedOnly (bool): If True, pattern the entities only along the first row and
      first column.

  Returns:
  list[Part]: List of parts created.
  
		"""
		pass

	@property
	def location(self):
		pass
	@location.setter
	def location(self):
		pass

	def loft(self,profiles, loftAsSolid=True, guideCurves=None, arcLengthProfiles=False, arcLengthGuides=False, swapSurface=False, closed=False, resultType="NEW_PART", mergeWithAllParts=True, mergeParts=None, profileChain=False, guideCurvesTangent=False):
		"""
		Create a solid loft or a lofted surface from profiles and guide curves.

  Args:
    profiles (list[FeatureArea | FeatureCurve]): Faces, closed sketches or curves.
    loftAsSolid (bool): If true, sweep as solids otherwise sweep as surfaces.
    guideCurves(list[FeatureCurve]): Guide curves for the loft.
    arcLengthProfiles (bool): If True, Set Arc Length Parametrization on profiles.
    arcLengthGuides (bool): If True, Set Arc Length Parametrization on guides.
    swapSurface (bool): If True, interchange the profiles and rails to get
      preferred shape.
    closed (bool): If True, close the loft.
    resultType (str): Result type of loft operation.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeTargets.
    mergeParts (Part): Parts to be merged with loft operation.
    profileChain (bool): True, Allows to select profile's connected edges.
    guideCurvesTangent (bool): True, Allows to select  guideCurve's connected edges.

  Returns:
    Part|None: New part created if resultType is NEW_PART.
  
		"""
		pass

	@property
	def minBoundingBox(self):
		pass
	@minBoundingBox.setter
	def minBoundingBox(self):
		pass

	def moveFaces(self,features, position, duplicate=False):
		"""
		Translate, rotate, copy, or extend features.

  Args:
    features (list[FeatureArea]): The features to move.
    position (math.Matrix44): The position to move the features at.
    duplicate (bool): If True, copy the features at given position.
  
		"""
		pass

	def multiSweep(self,profiles, path, sweepAsSolid=True, arcLengthProfiles=False, arcLengthGuides=False, orientation="PERPENDICULAR", normalToSurface=None, resultType="NEW_PART", mergeWithAllParts=True, mergeParts=None):
		"""
		Sweep multiple profiles along a path to create a solid or surface.

  Args:
    profiles (list[FeatureArea | FeatureCurve]): Faces or closed sketches.
    path(list[FeatureCurve]): Path for the multiSweep.
    sweepAsSolid (bool): If true, sweep as solids otherwise sweep as surfaces.
    arcLengthProfiles (bool): If True, Set Arc Length Parametrization on profiles.
    arcLengthGuides (bool): If True, Set Arc Length Parametrization on path.
    orientation (str): Orientation for multiSweep.
      - PERPENDICULAR
      - PARALLEL
      - NORMAL_TO_SURFACE
    normalToSurface (list[FeatureArea]): Face to which sweep orientation will be
      normal.
    resultType (str): Result type of multiSweep operation.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeTargets.
    mergeParts (Part): Parts to be merged with sweep operation.

  Returns:
    Part|None: New part created if resultType is NEW_PART.
  
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	def offset(self,input, value, newPart=False):
		"""
		Offset surfaces or parts.

  Args:
    input (list[Part] | list[Feature])
    value (float | str): Desired offset distance. Negative value means inward direction.
      If value is a string it can be a Model Variable or a value with units.
    newPart (bool): If True, creates a new part.

  Returns:
    Part|None: New part created if newPart was True.
  
		"""
		pass

	@property
	def part(self):
		pass
	@part.setter
	def part(self):
		pass

	def partition(self,entity, thickness="1 mm", reverseDirection=False, minSize="0", maxSize=1):
		"""
		Divides a solid part into design and non-design regions by selecting a
  hole, pocket, or face to offset.

  Args:
    entity (Part | Assembly | [[Feature]]): Part/Assembly from which you want to
      plug the holes or a feature to be partitioned. If it is a feature then it
      should be list of feature list, where the features in internal feature
      list are related to each other.
    thickness (float): The partition thickness consider in mm.
    reverseDirection (bool): Switch the direction of the offset for the
      partition.
    minSize (float): Minimum size of partition to find features.
    maxSize (float): Maximum size of partition to find features.

  Returns:
    Part: New part created.
  
		"""
		pass

	def patternAlongPath(self,input, path, count=3, equalSpacing=False, spacing=0.01, instances=False, method="TRANSFORM", orientation="MAINTAIN_SEED_ORIENTATION", pathReverse=False, result="NEW_PART", mergeWithAllParts=True, mergeParts=None, copiesToSkip=None):
		"""
		Pattern parts or faces along curve.

   Args:
    input (list[Part] | list[FeatureArea]): Parts or Features to create pattern
      along the curve.
    path (list[FeatureCurve]): Path for pattern.
    count (int): Number of copies.
    equalSpacing (bool): If True, equally space the copies.
    spacing (float): Distance between two copies.
    instances (bool): If True, any changes to part or face will apply to all instances.
    method (str): Pattern method.
      - TRANSFORM
      - OFFSET
    orientation (str): Pattern Orientation.
      - TANGENT_TO_CURVE
      - MAINTAIN_SEED_ORIENTATION
    pathReverse (bool): Reverse the path of pattern.
    result (str): Result type of pattern along path.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeParts.
    mergeParts (list[Part]): Parts to be merged with pattern along path.
    copiesToSkip (dict{Part: list[indicesToSkip]}): Set copies to skip. It's
      basically a dictionary which contains Part as a key and list of indices to
      skip as values.

  Returns:
  list[Part | Feature]: List of parts/features created.
  
		"""
		pass

	def projection(self,feature, parts, extendEdges=True):
		"""
		Creates projection of a feature from one part to another part.

  Args:
    feature (Feature): Feature that needs to be projected on Part.
    parts (list[Part]): Parts on which feature projection to be.
    extendEdges (bool): If True, extends the edge.
  
		"""
		pass

	def pushPull(self,feature, depth, newPart=False, resultType=None):
		"""
		Pushes or pulls a face or an edge to a specified distance.

  Args:
    feature (Feature): Feature to push or pull.
    depth (float | str): The precise distance. 
      A positive value extends, whereas a negative value contracts.
    newPart (bool): If True, creates a new Part as a result of pushPull operation.
    resultType (str): Result type of pushPull operation. This option is valid
      only for pushPull a sketch on face.
      - NEW_PART
      - ADD
      - REMOVE
      - REPLACE

  Returns:
    Part: If New Part created, otherwise return None.
  
		"""
		pass

	@property
	def radius(self):
		pass
	@radius.setter
	def radius(self):
		pass

	def revolve2(self,profiles, axis, direction="SINGLE", resultType="NEW_PART", mergeTargets=None, flipAxis=False, angle1="0", angle2="0"):
		"""
		New Revolve - Revolve a face, sketch, line, or 2D edge about an axis.

  Args:
    profiles (FeatureArea | FeatureCurve): A face, line, or 2D edge.
    axis (FeatureLinear | FeatureCircular | Axis): An edge, line, cylindrical 
    hole or an Axis.

      Selecting an edge on another part projects the axis of revolution to the
      planar face that will be rotated.
    direction (str): Valid values are: SINGLE, BOTH and SYMMETRY.
    resultType (str): Valid values are: COMBINE, SUBTRACT, INTERSECT and NEW_PART.
    mergeTargets (list[Feature]): Explict merge targets for Result Type.
    flipAxis (bool): If True, axis will be flipped.
    angle1 (float): The angle of revolution.
    angle2 (float): The angle of revolution when direction is Both.

  Returns:
    Part|None: New part created if resultType is NEW_PART.
  
		"""
		pass

	def shell(self,feature, thickness=1):
		"""
		Removes material and create thin walls to generate a shelled part.

  Args:
    feature (FeatureArea): Feature to create a shelled part from.
    thickness (float): Shell thickness.
  
		"""
		pass

	def simplifyHoles(self,entity, minSize="0", maxSize=None):
		"""
		Finds and removes holes and pockets, and find raised areas such as lettering.

  Args:
    entity (Part | Assembly | Feature): Part/Assembly from which you want to 
      remove the holes from or FeatureCircular which needs to be removed.
    minSize (float): Minimum size of hole.
    maxSize (float): Maximum size of hole.
  
		"""
		pass

	def simplifyPlugs(self,entity, minSize="0", maxSize=None):
		"""
		Finds holes and pockets, and plug them by filling the area with a new part

  Args:
    entity (Part | Assembly | Feature): Part/Assembly from which you want to plug 
      the holes or a Circular feature that needs to be plugged.
    minSize (float): Minimum size of plug.
    maxSize (float): Maximum size of plug.
  
		"""
		pass

	def simplifyRounds(self,entity, roundType="ALL", minSize="0", maxSize=None):
		"""
		Finds and removes both round (convex) and fillet (concave) surfaces.

  Args:
    entity (Part | Assembly | Feature): Part/Assembly from which you want to 
      remove the fillets, chamfers from or a Feature to be removed.
    roundType (str): Valid values are: ROUNDS, FILLETS, CHAMFERS and ALL.
    minSize (float): Minimum size of round.
    maxSize (float): Maximum size of round.
  
		"""
		pass

	def sweep(self,profiles, path, solidProfile=None, sweepAsSolid=True, profileOrientation=True, propagate=True, pathIgnoredFeatures=None, guideCurves=None, pathDirection="DIRECTION_1", twistType="NO_TWIST", twistAngle="0", twistTurns="0", twistAngleDir2="0", twistTurnsDir2="0", resultType="NEW_PART", mergeWithAllParts=True, mergeParts=None, twist1Reverse=False, twist2Reverse=False, guideScale="UNIFORM"):
		"""
		Sweep a profile along a path to create a solid or 3D surface.

  Args:
    profiles (FeatureArea | FeatureCurve): A face or a closed sketch.
    path(list[FeatureCurve]): Path for the sweep.
    solidProfile (Part): Sweep profile as solid. Only applicable for solid cylinder.
    sweepAsSolid (bool): If true, sweep as solids otherwise sweep as surfaces.
    profileOrientation (bool): If true, sweep orientation will be normal to the
      path otherwise parallel.
    propagate (bool): If true, all the tangent edges of the input path is also selected.
    pathIgnoredFeatures (list[FeatureCurve]): Edge to be ignored when propagate is True.
    guideCurves (list[FeatureCurve]): Guide curves for the sweep. No guide curves are set by default.
    pathDirection (str): Sweep direction.
      - DIRECTION_1
      - DIRECTION_2
      - BOTH
    twistType (str): Twist type.
      - NO_TWIST
      - ANGLE_TWIST
      - NO_OF_TURNS
    twistAngle (float): Twist angle in DIRECTION_1.
    twistTurns (float): Number of twist turns in DIRECTION_1.
    twistAngleDir2 (float): Twist angle in DIRECTION_2. Applicable only when
      pathDirection is "BOTH".
    twistTurnsDir2 (float): Number of twist turns in DIRECTION_2. Applicable
      only when pathDirection is "BOTH".
    resultType (str): Result type of sweep operation.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeTargets.
    mergeParts (Part): Parts to be merged with sweep operation.
    twist1Reverse (bool): If True, Reverse the twist in DIRECTION_1 or DIRECTION_2.
    twist2Reverse (bool): If True, Reverse the twist in DIRECTION_2. Applicable
      only when pathDirection is "BOTH".
    guideScale (str): Guide scale option. Applicable only when guideCurves is provided.
      - UNIFORM
      - LATERAL

  Returns:
    Part|None: New part created if resultType is NEW_PART.
  
		"""
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

class FeatureVolume:
	def __init__(self,*args):
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	@property
	def cg(self):
		pass
	@cg.setter
	def cg(self):
		pass

	def chamferByAngle(self,feature, angle=45, dist=0.003):
		"""
		Creates chamfer on a Linear/Planar feature.

  Args:
    feature (Feature): Feature that needs to be chamfer.
    angle (float): Chamfer angle from the edge.
    dist (float): Chamfer distance from the edge.
  
		"""
		pass

	def chamferByDistance(self,feature, dist1=0.003, dist2=0.003):
		"""
		Creates chamfer on a linear or planar feature.

  Args:
    feature (Feature): Feature that needs to be chamfer.
    dist1 (float): Chamfer distance from the edge.
    dist2 (float): Chamfer distance from the edge.
  
		"""
		pass

	def circularPattern(self,input, axis, angle=60, count=3, equalSpacing=False, instances=False, symmetry=False, axisReverse=False, result="NEW_PART", mergeWithAllParts=True, mergeParts=None, copiesToSkip=None):
		"""
		Circular Pattern parts or faces around an axis.

  Args:
    input (list[Part] | list[FeatureArea]): Parts or Features to create circular
      pattern.
    axis (math.Vector | FeatureCurve | Axis): Axis is a reference line, edge,
      or axis to which the pattern will be parallel.
    angle (float): Angle within which the copies are equally spaced.
    count (int): Number of copies.
    equalSpacing (bool): If True, equally space the copies within a specified
      Angle.
    instances (bool): If True, any changes to part or face will apply to all
      instances.
    symmetry (bool): Symmetry in Direction 1.
    axisReverse (bool): Reverse the axis in Direction 1.
    result (str): Result type of circular pattern.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeParts.
    mergeParts (list[Part]): Parts to be merged with circular pattern.
    copiesToSkip (dict{Part: list[indicesToSkip]}): Set copies to skip. It's
      basically a dictionary which contains Part as a key and list of indices to
      skip as values.

  Returns:
  list[Part]: List of parts created.
  
		"""
		pass

	@property
	def connectedCurves(self):
		pass
	@connectedCurves.setter
	def connectedCurves(self):
		pass

	@property
	def connectedFaces(self):
		pass
	@connectedFaces.setter
	def connectedFaces(self):
		pass

	@property
	def connectedPoints(self):
		pass
	@connectedPoints.setter
	def connectedPoints(self):
		pass

	def divideCurve(self,curve, divisionPoints, uniformDivision=False):
		"""
		Divide a curve by inserting points along the curve.

    Args:
      curve (FeatureCurve): Curve to divide.
      divisionPoints((listlist[float], bool)): List of divisionPoints (length
        ratio or length along the curve) and the bool value depicts position
        ratio. If True, Divide the curve on length ratio otherwise
        division occurs at length along the curve.
      uniformDivision (bool): If True, Curve is uniformly divided.

    Returns:
      Part: New part created.
    
		"""
		pass

	def edgeFillet(self,feature, radius="3 mm", continuity="TANGENT", tangentPropagation=True):
		"""
		Creates fillet on a Linear feature.

  Args:
    feature (Feature): feature that needs to fillet.
    radius (float | str): Radius of the fillet.
    continuity (str): Valid values are: TANGENT and CURVATURE.
    tangentPropagation (bool): If True, selecting an edge will also select all
      of its tangent edges.
  
		"""
		pass

	def extendCurve(self,curve, extensionTypeAndDistance, shape="LINEAR", extendEnds="START", extendAsNewPart=False):
		"""
		Extend a curve and modify the shape of the extension.

    Args:
      curve (FeatureCurve): Extracted Curve to extend.
      extensionTypeAndDistance (list[str, float] | list[str, Feature | Plane]):
        Extension type as string and Distance as float to extend. For
        UP_TO_FEATURE extension type second argument should be either a Feature
        or System Plane.
        Valid extension types are:
          - EXTENSION_DISTANCE
          - INCREMENT_FACTOR
          - TOTAL_LENGTH
          - UP_TO_FEATURE
      shape (str): Shape of extend curve.
        - LINEAR
        - SOFT
        - REFLECTIVE
        - NATURAL
        - ARC
      extendEnds (str): To reverse the curve extension direction.
        - START
        - END
      extendAsNewPart (bool): Create a new part if True, otherwise merge in
        original part.

    Returns:
      Part: New part created.
    
		"""
		pass

	def extract(self,features, maintainReference=True):
		"""
		Extracts geometry features and transfer them into a new part.

  Args:
    features (list[Feature]): Feature to be extracted.
    maintainReference (bool): If true, set reference associativity otherwise not.

  Returns:
    Part: New part created.
  
		"""
		pass

	def faceCurve(self,face, method="POINT", uRatio=True, vRatio=True, ignoreHoles=True, uCurvesCount=5, vCurvesCount=5, uParmRatioForPointMode="0", vParmRatioForPointMode="0", vertexFeature=None, vertexPoint=None):
		"""
		Extract curves from a face in the U or V direction. This is useful for
  creating trim curves that run along a face.

  Args:
    face (FeatureArea): Face on which extract curves.
    method (str): Method for face curve.
      - POINT
      - VERTEX
      - MESH
    uRatio (bool): If True, create U curves.
    vRatio (bool): If True, create V curves.
    ignoreHoles (bool): If True, ignore the holes in face curve.
    uCurvesCount (Int): Set U curves count to create for method type MESH.
    vCurvesCount (Int): Set V curves count to create for method type MESH.
    uParmRatioForPointMode (Float): Set U Param for method type POINT,
      param should be between 0 and 1.
    vParmRatioForPointMode (Float): Set V Param for method type POINT,
      param should be between 0 and 1.
    vertexFeature (FeaturePoint): Feature point to extract iso-param curve for
      method type VERTEX.
    vertexPoint (math.Point): Point to create face curves for method
      type POINT. Point must lie on the face.

  Returns:
    Part: New part created.
    
		"""
		pass

	def findClosestPoint(self,referencePoint):
		"""
		Returns the point on feature that nearest to the specified point.
    
    Args:
      referencePoint (Point) : Reference point to find closest point on feature.
    
    Returns:
      Point : The closest point of the feature from specified point.
    
		"""
		pass

	def getClass(self,classname):
		pass

	def helixCurve(self,profile, type="TURNS_AND_HEIGHT", numTurns=2, pitch=0.003, height=0.01, startAngle="0", curveHand="RIGHT", heightReverse=False, lockDiameterRatio=True, topDiameter="0"):
		"""
		Create a solid loft or a lofted surface from profiles and guide curves.

    Args:
      profile (FeatureCircular): Circular sketch profile.
      type (str): Helix Curve Type.
        - TURNS_AND_HEIGHT
        - TURNS_AND_PITCH
        - HEIGHT_AND_PITCH
      numTurns(float): Number of turns in helix curve.
      pitch (float): Pitch distance of helix curve.
      height (float): Height of helix curve.
      startAngle (float): Start angle of helix curve.
      curveHand (str): Helix curve sweep direction.
        - LEFT
        - RIGHT
      heightReverse (bool): If True, Reverse the height in other direction of
        helix curve.
      lockDiameterRatio (bool): If True, Set lock diameter ratio of helix curve.
      topDiameter (float): Top Diameter of helix curve.

    Returns:
      Part: New part created.
    
		"""
		pass

	def isa(self,type=None, filter=None, **kwds):
		"""
		Determines the object matches the specified settings or not.

    Args:
      type (Part, Assembly, Contact, ..) :  Specify type of the object.
      filter (method) : Return value of specified callback method.
      **kwds : Additional keyword arguments to match attributes.
    
		"""
		pass

	@property
	def ishole(self):
		pass
	@ishole.setter
	def ishole(self):
		pass

	def linearPattern(self,input, direction1, direction2=(0, 0, 0), bothDirection=False, spacing1="0.0", count1=3, spacing2="0.0", count2=3, instances=False, symmetry1=False, symmetry2=False, reverseDir1=False, reverseDir2=False, result="NEW_PART", mergeWithAllParts=True, mergeParts=None, copiesToSkip=None, seedOnly=False):
		"""
		Linear Pattern parts or faces along a direction.

  Args:
    input (list[Part] | list[FeatureArea]): Parts or Features to create linear
      pattern.
    direction1 (math.Vector | FeatureCurve | Axis): Direction can be a 
      reference line, edge, or axis to which the pattern will be parallel.
    direction2 (math.Vector | FeatureCurve | Axis): Direction can be a 
      reference line, edge, or axis to which the pattern will be parallel.
    bothDirection (bool): If True, sets in both direction otherwise single
      direction.
    spacing1 (float): Distance between two copies.
    count1 (int): Number of copies.
    spacing2 (float): Distance between two copies.
    count2 (int): Number of copies.
    instances (bool): If True, any changes to part or face will apply to all
      instances.
    symmetry1 (bool): Symmetry in Direction 1.
    symmetry2 (bool): Symmetry in Direction 2.
    reverseDir1 (bool): Reverse the pattern direction in Direction 1.
    reverseDir2 (bool): Reverse the pattern direction in Direction 2.
    result (str): Result type of linear pattern.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeParts.
    mergeParts (list[Part]): Parts to be merged with linear pattern.
    copiesToSkip ((dict{Part: list[tuplex,y)]}): Set copies to skip. Here x and
      y are the indices in 2D space of copy , which needs to be skipped.
    seedOnly (bool): If True, pattern the entities only along the first row and
      first column.

  Returns:
  list[Part]: List of parts created.
  
		"""
		pass

	@property
	def location(self):
		pass
	@location.setter
	def location(self):
		pass

	def loft(self,profiles, loftAsSolid=True, guideCurves=None, arcLengthProfiles=False, arcLengthGuides=False, swapSurface=False, closed=False, resultType="NEW_PART", mergeWithAllParts=True, mergeParts=None, profileChain=False, guideCurvesTangent=False):
		"""
		Create a solid loft or a lofted surface from profiles and guide curves.

  Args:
    profiles (list[FeatureArea | FeatureCurve]): Faces, closed sketches or curves.
    loftAsSolid (bool): If true, sweep as solids otherwise sweep as surfaces.
    guideCurves(list[FeatureCurve]): Guide curves for the loft.
    arcLengthProfiles (bool): If True, Set Arc Length Parametrization on profiles.
    arcLengthGuides (bool): If True, Set Arc Length Parametrization on guides.
    swapSurface (bool): If True, interchange the profiles and rails to get
      preferred shape.
    closed (bool): If True, close the loft.
    resultType (str): Result type of loft operation.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeTargets.
    mergeParts (Part): Parts to be merged with loft operation.
    profileChain (bool): True, Allows to select profile's connected edges.
    guideCurvesTangent (bool): True, Allows to select  guideCurve's connected edges.

  Returns:
    Part|None: New part created if resultType is NEW_PART.
  
		"""
		pass

	@property
	def minBoundingBox(self):
		pass
	@minBoundingBox.setter
	def minBoundingBox(self):
		pass

	def moveFaces(self,features, position, duplicate=False):
		"""
		Translate, rotate, copy, or extend features.

  Args:
    features (list[FeatureArea]): The features to move.
    position (math.Matrix44): The position to move the features at.
    duplicate (bool): If True, copy the features at given position.
  
		"""
		pass

	def multiSweep(self,profiles, path, sweepAsSolid=True, arcLengthProfiles=False, arcLengthGuides=False, orientation="PERPENDICULAR", normalToSurface=None, resultType="NEW_PART", mergeWithAllParts=True, mergeParts=None):
		"""
		Sweep multiple profiles along a path to create a solid or surface.

  Args:
    profiles (list[FeatureArea | FeatureCurve]): Faces or closed sketches.
    path(list[FeatureCurve]): Path for the multiSweep.
    sweepAsSolid (bool): If true, sweep as solids otherwise sweep as surfaces.
    arcLengthProfiles (bool): If True, Set Arc Length Parametrization on profiles.
    arcLengthGuides (bool): If True, Set Arc Length Parametrization on path.
    orientation (str): Orientation for multiSweep.
      - PERPENDICULAR
      - PARALLEL
      - NORMAL_TO_SURFACE
    normalToSurface (list[FeatureArea]): Face to which sweep orientation will be
      normal.
    resultType (str): Result type of multiSweep operation.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeTargets.
    mergeParts (Part): Parts to be merged with sweep operation.

  Returns:
    Part|None: New part created if resultType is NEW_PART.
  
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	def offset(self,input, value, newPart=False):
		"""
		Offset surfaces or parts.

  Args:
    input (list[Part] | list[Feature])
    value (float | str): Desired offset distance. Negative value means inward direction.
      If value is a string it can be a Model Variable or a value with units.
    newPart (bool): If True, creates a new part.

  Returns:
    Part|None: New part created if newPart was True.
  
		"""
		pass

	@property
	def part(self):
		pass
	@part.setter
	def part(self):
		pass

	def patternAlongPath(self,input, path, count=3, equalSpacing=False, spacing=0.01, instances=False, method="TRANSFORM", orientation="MAINTAIN_SEED_ORIENTATION", pathReverse=False, result="NEW_PART", mergeWithAllParts=True, mergeParts=None, copiesToSkip=None):
		"""
		Pattern parts or faces along curve.

   Args:
    input (list[Part] | list[FeatureArea]): Parts or Features to create pattern
      along the curve.
    path (list[FeatureCurve]): Path for pattern.
    count (int): Number of copies.
    equalSpacing (bool): If True, equally space the copies.
    spacing (float): Distance between two copies.
    instances (bool): If True, any changes to part or face will apply to all instances.
    method (str): Pattern method.
      - TRANSFORM
      - OFFSET
    orientation (str): Pattern Orientation.
      - TANGENT_TO_CURVE
      - MAINTAIN_SEED_ORIENTATION
    pathReverse (bool): Reverse the path of pattern.
    result (str): Result type of pattern along path.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeParts.
    mergeParts (list[Part]): Parts to be merged with pattern along path.
    copiesToSkip (dict{Part: list[indicesToSkip]}): Set copies to skip. It's
      basically a dictionary which contains Part as a key and list of indices to
      skip as values.

  Returns:
  list[Part | Feature]: List of parts/features created.
  
		"""
		pass

	def projection(self,feature, parts, extendEdges=True):
		"""
		Creates projection of a feature from one part to another part.

  Args:
    feature (Feature): Feature that needs to be projected on Part.
    parts (list[Part]): Parts on which feature projection to be.
    extendEdges (bool): If True, extends the edge.
  
		"""
		pass

	def pushPull(self,feature, depth, newPart=False, resultType=None):
		"""
		Pushes or pulls a face or an edge to a specified distance.

  Args:
    feature (Feature): Feature to push or pull.
    depth (float | str): The precise distance. 
      A positive value extends, whereas a negative value contracts.
    newPart (bool): If True, creates a new Part as a result of pushPull operation.
    resultType (str): Result type of pushPull operation. This option is valid
      only for pushPull a sketch on face.
      - NEW_PART
      - ADD
      - REMOVE
      - REPLACE

  Returns:
    Part: If New Part created, otherwise return None.
  
		"""
		pass

	def revolve2(self,profiles, axis, direction="SINGLE", resultType="NEW_PART", mergeTargets=None, flipAxis=False, angle1="0", angle2="0"):
		"""
		New Revolve - Revolve a face, sketch, line, or 2D edge about an axis.

  Args:
    profiles (FeatureArea | FeatureCurve): A face, line, or 2D edge.
    axis (FeatureLinear | FeatureCircular | Axis): An edge, line, cylindrical 
    hole or an Axis.

      Selecting an edge on another part projects the axis of revolution to the
      planar face that will be rotated.
    direction (str): Valid values are: SINGLE, BOTH and SYMMETRY.
    resultType (str): Valid values are: COMBINE, SUBTRACT, INTERSECT and NEW_PART.
    mergeTargets (list[Feature]): Explict merge targets for Result Type.
    flipAxis (bool): If True, axis will be flipped.
    angle1 (float): The angle of revolution.
    angle2 (float): The angle of revolution when direction is Both.

  Returns:
    Part|None: New part created if resultType is NEW_PART.
  
		"""
		pass

	def sweep(self,profiles, path, solidProfile=None, sweepAsSolid=True, profileOrientation=True, propagate=True, pathIgnoredFeatures=None, guideCurves=None, pathDirection="DIRECTION_1", twistType="NO_TWIST", twistAngle="0", twistTurns="0", twistAngleDir2="0", twistTurnsDir2="0", resultType="NEW_PART", mergeWithAllParts=True, mergeParts=None, twist1Reverse=False, twist2Reverse=False, guideScale="UNIFORM"):
		"""
		Sweep a profile along a path to create a solid or 3D surface.

  Args:
    profiles (FeatureArea | FeatureCurve): A face or a closed sketch.
    path(list[FeatureCurve]): Path for the sweep.
    solidProfile (Part): Sweep profile as solid. Only applicable for solid cylinder.
    sweepAsSolid (bool): If true, sweep as solids otherwise sweep as surfaces.
    profileOrientation (bool): If true, sweep orientation will be normal to the
      path otherwise parallel.
    propagate (bool): If true, all the tangent edges of the input path is also selected.
    pathIgnoredFeatures (list[FeatureCurve]): Edge to be ignored when propagate is True.
    guideCurves (list[FeatureCurve]): Guide curves for the sweep. No guide curves are set by default.
    pathDirection (str): Sweep direction.
      - DIRECTION_1
      - DIRECTION_2
      - BOTH
    twistType (str): Twist type.
      - NO_TWIST
      - ANGLE_TWIST
      - NO_OF_TURNS
    twistAngle (float): Twist angle in DIRECTION_1.
    twistTurns (float): Number of twist turns in DIRECTION_1.
    twistAngleDir2 (float): Twist angle in DIRECTION_2. Applicable only when
      pathDirection is "BOTH".
    twistTurnsDir2 (float): Number of twist turns in DIRECTION_2. Applicable
      only when pathDirection is "BOTH".
    resultType (str): Result type of sweep operation.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeTargets.
    mergeParts (Part): Parts to be merged with sweep operation.
    twist1Reverse (bool): If True, Reverse the twist in DIRECTION_1 or DIRECTION_2.
    twist2Reverse (bool): If True, Reverse the twist in DIRECTION_2. Applicable
      only when pathDirection is "BOTH".
    guideScale (str): Guide scale option. Applicable only when guideCurves is provided.
      - UNIFORM
      - LATERAL

  Returns:
    Part|None: New part created if resultType is NEW_PART.
  
		"""
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

class FeaturesConnector:
	def __init__(self):
		"""
FeaturesConnector are generally used to connect two or more features together.
  
  Base class for 'Spider' and 'Contact'.
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	@property
	def connectionRadius(self):
		pass
	@connectionRadius.setter
	def connectionRadius(self):
		pass

	def destroy(self):
		"""
		Delete the object removing it from the model.
    
    The object may come back due to an undo/redo.
    
		"""
		pass

	@property
	def features(self):
		pass
	@features.setter
	def features(self):
		pass

	def getAllChildren(self,type=None, **kwds):
		"""
		Returns a list of all children that matches the specified type.

    Args:
      type (list[Named]): Filter to use to get the children based on object type.
      **kwds : Additional keyword arguments to match other attributes of the object.

    Returns:
      list[Union[Part, Motor, BoundaryCondition, ...]]: The list of children that satisfy the supplied filters.
    
		"""
		pass

	def getAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value.

    Args:
      name (str): Attribute name to find its class.
    
		"""
		pass

	def getAttributes(self,type=None, **kwds):
		"""
		Return an dict of the attributes.
    Pass type and kwds to filter by type and Attribute properties

    Args:
      type (type): Filters the attribute based on type
      **kwds : Additional kwds argument to filter attribute by its properties

    Returns:
      dict: Return an OrderedDict of the attributes
    
		"""
		pass

	def getChild(self,name=None, recursive=False, **kwds):
		"""
		Returns the child of the object which matches the specified unique name.

    Args:
      name (str): The name of the child object.
      recursive (bool):  Search all descendents.
      **kwds : Additional keyword arguments to match attributes of the object.

    Returns:
      Named: The child object which satisfies the specified filters.
    
		"""
		pass

	def getChildren(self,type=None, recursive=False, sorted=False, **kwds):
		"""
		Returns a list of children that is of the specified type.

    Args:
      type (Type[Named]): Filter objects by class.
      recursive (bool): True to get all descendent Parts and Assemblies.
      sorted (bool): Sort the children base on id.

    Returns:
      list[Named]
    
		"""
		pass

	def getClass(self,className):
		"""
		Returns the class of the object.
    
    It can be simple or qualified (with namespace). If the name is simple, we 
    prepend the cls.namespace.

    Args:
      className (Union[Part, Occurrence, Named..]) : The class name. 
     
    Returns:
      Union[Part, Occurrence, Named..] : The class for the specified className. 

    
		"""
		pass

	def getClassAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value

    Args:
      name (str): Name of the attribute
    
		"""
		pass

	def getDependents(self,recursive=False, **kwds):
		"""
		Get objects that reference this object through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getGuiAttributeNames(self):
		"""
		Return list of the attribute names that are in the gui

    Returns:
      list: Returns list of active gui attribute
    
		"""
		pass

	def getGuiValue(self,attr, **kwds):
		"""
		Get value formatted to be shown in the gui

    Args:
      attr (str): Attribute name to gets its gui value.

    Returns:
      str: Returns a string of the value with its gui units, like "5 mm/s".
    
		"""
		pass

	def getReferences(self,recursive=False, **kwds):
		"""
		Get objects this object references through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getSerializedAttributeValues(self):
		pass

	def getValue(self,attr):
		"""
		Return the attribute value for passed attribute name.
    
    Args:
      attr (String): Attribute name to gets its value.

    Returns:
      str: Returns the attribute value
    
		"""
		pass

	def isa(self,type=None, filter=None, name=None, wildcard=None, **kwds):
		"""
		Determines if the object matches the specified settings or not.
    
    Args:
      type (Union[Part, Assembly, Contact..]): The type of the object.
      filter (method): Return value of specified callback method.
      name (str): Name that matches exactly with object name.
      wildcard (str): A pattern to match exactly with the object name.
      **kwds : Additional keyword arguments to match other attributes.

    Returns:
      bool : True, if a match is found, otherwise False.
    
		"""
		pass

	def modelPositions(self):
		"""
		Forces all objects to return the original model positions instead of the
    current analysis positions.

    Useful when defining draw methods on GeneralObjects where behaviour is 
    different while animating.
    
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	@property
	def parent(self):
		pass
	@parent.setter
	def parent(self):
		pass

	@property
	def primaryFeatures(self):
		pass
	@primaryFeatures.setter
	def primaryFeatures(self):
		pass

	@property
	def secondaryFeatures(self):
		pass
	@secondaryFeatures.setter
	def secondaryFeatures(self):
		pass

	def setValue(self,attr, value):
		"""
		Alias for setattr (attr, value)
    Args:
      attr (str): Attribute name to sets its value.
      value (str): Attribute value to set .
    
		"""
		pass

	def setValues(self,**kwds):
		"""
		Sets passed name/value pairs.
    
    Values are set in a standard order (the order the attribute is defined
    on the class) which is required in certain cases when an attribute's
    setter expects another attribute to have already been set.
    For example, setting a reference before a location that is wrt it.
    
    Args:
      **kwds: Set attributes in one go.
    
		"""
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

	def wasValueSet(self,attr):
		"""
		Check if attribute was set

    Args:
      attr (str): Attribute name to check it value set or not

    Returns:
      bool: True, if value was set else false.
    
		"""
		pass

class Field:
	def __init__(self,**kwds):
		"""
The Field tool is used to construct a field from a source that is not yet
  described in a field format and/or remap field values to different ranges. A
  field is a 3D grid, and each grid point contains a signed scalar value.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class FieldImplicit:
	def __init__(self,cppName: str="",doc: str=""):
		"""
Field (Returns Field Reference)
"""
		pass

class Fillet:
	def __init__(self,**kwds):
		"""
The Fillet tool applies a circular fillet of defined radius to sharp
  edges in an implicit body. It can be separately applied to convex and
  concave edges. Unlike traditional CAD, the fillet effect will be applied to
  any qualifying edges in the model rather than those that are manually
  selected by a user.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class FloatDataImplicit:
	def __init__(self,cppName,units: str="length",doc: str=""):
		"""
float
"""
		pass

class FloatImplicit:
	def __init__(self,cppName: str="",doc: str=""):
		"""
float
"""
		pass

class FloorDivision:
	def __init__(self,**kwds):
		"""
Implicit Floor Division operation.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class Force:
	def __init__(self,features, location=None, direction=None, magnitude=None, isRemote=False, **kwds):
		"""
A force is a push or a pull in a particular direction on a part, and is a
    type of load.

    Forces can be applied to a point, edge, face, or hole center.

    Once applied, distributed forces on certain types of features can be
    converted to bearing forces or traction forces.
  
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	@property
	def color(self):
		pass
	@color.setter
	def color(self):
		pass

	@property
	def connectionRadius(self):
		pass
	@connectionRadius.setter
	def connectionRadius(self):
		pass

	@property
	def connectionType(self):
		pass
	@connectionType.setter
	def connectionType(self):
		pass

	def destroy(self):
		"""
		Delete the object removing it from the model.
    
    The object may come back due to an undo/redo.
    
		"""
		pass

	@property
	def direction(self):
		pass
	@direction.setter
	def direction(self):
		pass

	@property
	def distributed(self):
		pass
	@distributed.setter
	def distributed(self):
		pass

	@property
	def feature(self):
		pass
	@feature.setter
	def feature(self):
		pass

	@property
	def features(self):
		pass
	@features.setter
	def features(self):
		pass

	def getAllChildren(self,type=None, **kwds):
		"""
		Returns a list of all children that matches the specified type.

    Args:
      type (list[Named]): Filter to use to get the children based on object type.
      **kwds : Additional keyword arguments to match other attributes of the object.

    Returns:
      list[Union[Part, Motor, BoundaryCondition, ...]]: The list of children that satisfy the supplied filters.
    
		"""
		pass

	def getAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value.

    Args:
      name (str): Attribute name to find its class.
    
		"""
		pass

	def getAttributes(self,type=None, **kwds):
		"""
		Return an dict of the attributes.
    Pass type and kwds to filter by type and Attribute properties

    Args:
      type (type): Filters the attribute based on type
      **kwds : Additional kwds argument to filter attribute by its properties

    Returns:
      dict: Return an OrderedDict of the attributes
    
		"""
		pass

	def getChild(self,name=None, recursive=False, **kwds):
		"""
		Returns the child of the object which matches the specified unique name.

    Args:
      name (str): The name of the child object.
      recursive (bool):  Search all descendents.
      **kwds : Additional keyword arguments to match attributes of the object.

    Returns:
      Named: The child object which satisfies the specified filters.
    
		"""
		pass

	def getChildren(self,type=None, recursive=False, sorted=False, **kwds):
		"""
		Returns a list of children that is of the specified type.

    Args:
      type (Type[Named]): Filter objects by class.
      recursive (bool): True to get all descendent Parts and Assemblies.
      sorted (bool): Sort the children base on id.

    Returns:
      list[Named]
    
		"""
		pass

	def getClass(self,className):
		"""
		Returns the class of the object.
    
    It can be simple or qualified (with namespace). If the name is simple, we 
    prepend the cls.namespace.

    Args:
      className (Union[Part, Occurrence, Named..]) : The class name. 
     
    Returns:
      Union[Part, Occurrence, Named..] : The class for the specified className. 

    
		"""
		pass

	def getClassAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value

    Args:
      name (str): Name of the attribute
    
		"""
		pass

	def getDependents(self,recursive=False, **kwds):
		"""
		Get objects that reference this object through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getGuiAttributeNames(self):
		"""
		Return list of the attribute names that are in the gui

    Returns:
      list: Returns list of active gui attribute
    
		"""
		pass

	def getGuiValue(self,attr, **kwds):
		"""
		Get value formatted to be shown in the gui

    Args:
      attr (str): Attribute name to gets its gui value.

    Returns:
      str: Returns a string of the value with its gui units, like "5 mm/s".
    
		"""
		pass

	def getReferences(self,recursive=False, **kwds):
		"""
		Get objects this object references through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getSerializedAttributeValues(self):
		pass

	def getValue(self,attr):
		"""
		Return the attribute value for passed attribute name.
    
    Args:
      attr (String): Attribute name to gets its value.

    Returns:
      str: Returns the attribute value
    
		"""
		pass

	def importLoads(self,csvFile):
		"""
		Imports boundary conditions to the active model from a csv file.

    Args:
      csvFile(str) : Csv file name containing all the BC information.

    Returns:
      list: List of error msgs that happened during import of all the boundary conditions.
    
		"""
		pass

	@property
	def inahole(self):
		pass
	@inahole.setter
	def inahole(self):
		pass

	def isa(self,type=None, filter=None, name=None, wildcard=None, **kwds):
		"""
		Determines if the object matches the specified settings or not.
    
    Args:
      type (Union[Part, Assembly, Contact..]): The type of the object.
      filter (method): Return value of specified callback method.
      name (str): Name that matches exactly with object name.
      wildcard (str): A pattern to match exactly with the object name.
      **kwds : Additional keyword arguments to match other attributes.

    Returns:
      bool : True, if a match is found, otherwise False.
    
		"""
		pass

	@property
	def loadCase(self):
		pass
	@loadCase.setter
	def loadCase(self):
		pass

	@property
	def localToPart(self):
		pass
	@localToPart.setter
	def localToPart(self):
		pass

	@property
	def location(self):
		pass
	@location.setter
	def location(self):
		pass

	@property
	def magnitude(self):
		pass
	@magnitude.setter
	def magnitude(self):
		pass

	@property
	def mode(self):
		pass
	@mode.setter
	def mode(self):
		pass

	def modelPositions(self):
		"""
		Forces all objects to return the original model positions instead of the
    current analysis positions.

    Useful when defining draw methods on GeneralObjects where behaviour is 
    different while animating.
    
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	@property
	def parent(self):
		pass
	@parent.setter
	def parent(self):
		pass

	@property
	def part(self):
		pass
	@part.setter
	def part(self):
		pass

	@property
	def parts(self):
		pass
	@parts.setter
	def parts(self):
		pass

	def setSystem(self,system):
		"""
		Associate system to a boundary condition.

    Args:
      system (System): System tp associate with boundary condition.
    
		"""
		pass

	def setValue(self,attr, value):
		"""
		Alias for setattr (attr, value)
    Args:
      attr (str): Attribute name to sets its value.
      value (str): Attribute value to set .
    
		"""
		pass

	def setValues(self,**kwds):
		"""
		Sets passed name/value pairs.
    
    Values are set in a standard order (the order the attribute is defined
    on the class) which is required in certain cases when an attribute's
    setter expects another attribute to have already been set.
    For example, setting a reference before a location that is wrt it.
    
    Args:
      **kwds: Set attributes in one go.
    
		"""
		pass

	def updatePosition(self,m44):
		"""
		Update the position by multiplying input M44 matrix.
		"""
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

	def wasValueSet(self,attr):
		"""
		Check if attribute was set

    Args:
      attr (str): Attribute name to check it value set or not

    Returns:
      bool: True, if value was set else false.
    
		"""
		pass

class Fraction:
	def __init__(self,**kwds):
		"""
Implicit fraction operation.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class GLoad:
	def __init__(self,location, direction, magnitude=None, **kwds):
		"""
BoundaryCondition object storing g-load direction and magnitude.

  Absence of a GLoad object in a LoadCase signifies no g-load.
  GLoads are used to simulate a model undergoing acceleration,
  which imparts a force on all of the parts in the model.
  
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	@property
	def color(self):
		pass
	@color.setter
	def color(self):
		pass

	@property
	def connectionRadius(self):
		pass
	@connectionRadius.setter
	def connectionRadius(self):
		pass

	@property
	def connectionType(self):
		pass
	@connectionType.setter
	def connectionType(self):
		pass

	def destroy(self):
		"""
		Delete the object removing it from the model.
    
    The object may come back due to an undo/redo.
    
		"""
		pass

	@property
	def direction(self):
		pass
	@direction.setter
	def direction(self):
		pass

	@property
	def distributed(self):
		pass
	@distributed.setter
	def distributed(self):
		pass

	@property
	def feature(self):
		pass
	@feature.setter
	def feature(self):
		pass

	@property
	def features(self):
		pass
	@features.setter
	def features(self):
		pass

	def getAllChildren(self,type=None, **kwds):
		"""
		Returns a list of all children that matches the specified type.

    Args:
      type (list[Named]): Filter to use to get the children based on object type.
      **kwds : Additional keyword arguments to match other attributes of the object.

    Returns:
      list[Union[Part, Motor, BoundaryCondition, ...]]: The list of children that satisfy the supplied filters.
    
		"""
		pass

	def getAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value.

    Args:
      name (str): Attribute name to find its class.
    
		"""
		pass

	def getAttributes(self,type=None, **kwds):
		"""
		Return an dict of the attributes.
    Pass type and kwds to filter by type and Attribute properties

    Args:
      type (type): Filters the attribute based on type
      **kwds : Additional kwds argument to filter attribute by its properties

    Returns:
      dict: Return an OrderedDict of the attributes
    
		"""
		pass

	def getChild(self,name=None, recursive=False, **kwds):
		"""
		Returns the child of the object which matches the specified unique name.

    Args:
      name (str): The name of the child object.
      recursive (bool):  Search all descendents.
      **kwds : Additional keyword arguments to match attributes of the object.

    Returns:
      Named: The child object which satisfies the specified filters.
    
		"""
		pass

	def getChildren(self,type=None, recursive=False, sorted=False, **kwds):
		"""
		Returns a list of children that is of the specified type.

    Args:
      type (Type[Named]): Filter objects by class.
      recursive (bool): True to get all descendent Parts and Assemblies.
      sorted (bool): Sort the children base on id.

    Returns:
      list[Named]
    
		"""
		pass

	def getClass(self,className):
		"""
		Returns the class of the object.
    
    It can be simple or qualified (with namespace). If the name is simple, we 
    prepend the cls.namespace.

    Args:
      className (Union[Part, Occurrence, Named..]) : The class name. 
     
    Returns:
      Union[Part, Occurrence, Named..] : The class for the specified className. 

    
		"""
		pass

	def getClassAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value

    Args:
      name (str): Name of the attribute
    
		"""
		pass

	def getDependents(self,recursive=False, **kwds):
		"""
		Get objects that reference this object through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getGuiAttributeNames(self):
		"""
		Return list of the attribute names that are in the gui

    Returns:
      list: Returns list of active gui attribute
    
		"""
		pass

	def getGuiValue(self,attr, **kwds):
		"""
		Get value formatted to be shown in the gui

    Args:
      attr (str): Attribute name to gets its gui value.

    Returns:
      str: Returns a string of the value with its gui units, like "5 mm/s".
    
		"""
		pass

	def getReferences(self,recursive=False, **kwds):
		"""
		Get objects this object references through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getSerializedAttributeValues(self):
		pass

	def getValue(self,attr):
		"""
		Return the attribute value for passed attribute name.
    
    Args:
      attr (String): Attribute name to gets its value.

    Returns:
      str: Returns the attribute value
    
		"""
		pass

	def importLoads(self,csvFile):
		"""
		Imports boundary conditions to the active model from a csv file.

    Args:
      csvFile(str) : Csv file name containing all the BC information.

    Returns:
      list: List of error msgs that happened during import of all the boundary conditions.
    
		"""
		pass

	@property
	def inahole(self):
		pass
	@inahole.setter
	def inahole(self):
		pass

	def isa(self,type=None, filter=None, name=None, wildcard=None, **kwds):
		"""
		Determines if the object matches the specified settings or not.
    
    Args:
      type (Union[Part, Assembly, Contact..]): The type of the object.
      filter (method): Return value of specified callback method.
      name (str): Name that matches exactly with object name.
      wildcard (str): A pattern to match exactly with the object name.
      **kwds : Additional keyword arguments to match other attributes.

    Returns:
      bool : True, if a match is found, otherwise False.
    
		"""
		pass

	@property
	def loadCase(self):
		pass
	@loadCase.setter
	def loadCase(self):
		pass

	@property
	def localToPart(self):
		pass
	@localToPart.setter
	def localToPart(self):
		pass

	@property
	def location(self):
		pass
	@location.setter
	def location(self):
		pass

	@property
	def magnitude(self):
		pass
	@magnitude.setter
	def magnitude(self):
		pass

	@property
	def mode(self):
		pass
	@mode.setter
	def mode(self):
		pass

	def modelPositions(self):
		"""
		Forces all objects to return the original model positions instead of the
    current analysis positions.

    Useful when defining draw methods on GeneralObjects where behaviour is 
    different while animating.
    
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	@property
	def parent(self):
		pass
	@parent.setter
	def parent(self):
		pass

	@property
	def part(self):
		pass
	@part.setter
	def part(self):
		pass

	@property
	def parts(self):
		pass
	@parts.setter
	def parts(self):
		pass

	def setSystem(self,system):
		"""
		Associate system to a boundary condition.

    Args:
      system (System): System tp associate with boundary condition.
    
		"""
		pass

	def setValue(self,attr, value):
		"""
		Alias for setattr (attr, value)
    Args:
      attr (str): Attribute name to sets its value.
      value (str): Attribute value to set .
    
		"""
		pass

	def setValues(self,**kwds):
		"""
		Sets passed name/value pairs.
    
    Values are set in a standard order (the order the attribute is defined
    on the class) which is required in certain cases when an attribute's
    setter expects another attribute to have already been set.
    For example, setting a reference before a location that is wrt it.
    
    Args:
      **kwds: Set attributes in one go.
    
		"""
		pass

	def updatePosition(self,m44):
		"""
		Sets the design space positions of all the inspire parts to their 
    position in the current analysis frame.    
    
		"""
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

	def wasValueSet(self,attr):
		"""
		Check if attribute was set

    Args:
      attr (str): Attribute name to check it value set or not

    Returns:
      bool: True, if value was set else false.
    
		"""
		pass

class GaugeOptimization:
	def __init__(self,params="{}", runOptions="{}", ignoreWarnings=False):
		"""
Optimize the thickness of a design space.
  
  This optimization only works on parts that are defined by surface geometry.
  
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	def destroy(self):
		"""
		Delete the object removing it from the model.
    
    The object may come back due to an undo/redo.
    
		"""
		pass

	def export(self,file, params="{}", runOptions="{}", ignoreWarnings=False):
		"""
		Download solver file (.fem, .ssp) for run
    
    Args:
      file (str): File path to save to
      
      See constructor for params, runOptions, ignoreWarnings
    
		"""
		pass

	def getAllChildren(self,type=None, **kwds):
		"""
		Returns a list of all children that matches the specified type.

    Args:
      type (list[Named]): Filter to use to get the children based on object type.
      **kwds : Additional keyword arguments to match other attributes of the object.

    Returns:
      list[Union[Part, Motor, BoundaryCondition, ...]]: The list of children that satisfy the supplied filters.
    
		"""
		pass

	def getAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value.

    Args:
      name (str): Attribute name to find its class.
    
		"""
		pass

	def getAttributes(self,type=None, **kwds):
		"""
		Return an dict of the attributes.
    Pass type and kwds to filter by type and Attribute properties

    Args:
      type (type): Filters the attribute based on type
      **kwds : Additional kwds argument to filter attribute by its properties

    Returns:
      dict: Return an OrderedDict of the attributes
    
		"""
		pass

	def getChild(self,name=None, recursive=False, **kwds):
		"""
		Returns the child of the object which matches the specified unique name.

    Args:
      name (str): The name of the child object.
      recursive (bool):  Search all descendents.
      **kwds : Additional keyword arguments to match attributes of the object.

    Returns:
      Named: The child object which satisfies the specified filters.
    
		"""
		pass

	def getChildren(self,type=None, recursive=False, sorted=False, **kwds):
		"""
		Returns a list of children that is of the specified type.

    Args:
      type (Type[Named]): Filter objects by class.
      recursive (bool): True to get all descendent Parts and Assemblies.
      sorted (bool): Sort the children base on id.

    Returns:
      list[Named]
    
		"""
		pass

	def getClass(self,className):
		"""
		Returns the class of the object.
    
    It can be simple or qualified (with namespace). If the name is simple, we 
    prepend the cls.namespace.

    Args:
      className (Union[Part, Occurrence, Named..]) : The class name. 
     
    Returns:
      Union[Part, Occurrence, Named..] : The class for the specified className. 

    
		"""
		pass

	def getClassAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value

    Args:
      name (str): Name of the attribute
    
		"""
		pass

	def getDependents(self,recursive=False, **kwds):
		"""
		Get objects that reference this object through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getGuiAttributeNames(self):
		"""
		Return list of the attribute names that are in the gui

    Returns:
      list: Returns list of active gui attribute
    
		"""
		pass

	def getGuiValue(self,attr, **kwds):
		"""
		Get value formatted to be shown in the gui

    Args:
      attr (str): Attribute name to gets its gui value.

    Returns:
      str: Returns a string of the value with its gui units, like "5 mm/s".
    
		"""
		pass

	def getReferences(self,recursive=False, **kwds):
		"""
		Get objects this object references through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getSerializedAttributeValues(self):
		pass

	def getValue(self,attr):
		"""
		Return the attribute value for passed attribute name.
    
    Args:
      attr (String): Attribute name to gets its value.

    Returns:
      str: Returns the attribute value
    
		"""
		pass

	def importResults(self,showExplorer=True):
		"""
		Make results available in the Shape Explorer.
    
    Args:
      showExplorer (bool): Opens the Shape Explorer dialog (gui mode only)
    
		"""
		pass

	@property
	def imported(self):
		pass
	@imported.setter
	def imported(self):
		pass

	def isa(self,type=None, filter=None, name=None, wildcard=None, **kwds):
		"""
		Determines if the object matches the specified settings or not.
    
    Args:
      type (Union[Part, Assembly, Contact..]): The type of the object.
      filter (method): Return value of specified callback method.
      name (str): Name that matches exactly with object name.
      wildcard (str): A pattern to match exactly with the object name.
      **kwds : Additional keyword arguments to match other attributes.

    Returns:
      bool : True, if a match is found, otherwise False.
    
		"""
		pass

	def modelPositions(self):
		"""
		Forces all objects to return the original model positions instead of the
    current analysis positions.

    Useful when defining draw methods on GeneralObjects where behaviour is 
    different while animating.
    
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	@property
	def parent(self):
		pass
	@parent.setter
	def parent(self):
		pass

	@property
	def progress(self):
		pass
	@progress.setter
	def progress(self):
		pass

	def reanalyze(self,density, runOptions="{}", ignoreWarnings=False):
		"""
		Run an OptiStructAnalysis on the generated shape.
    
    Args:
      density (float): Density threshold value.
        1.0 - maximum density on design space.
        0.0 - minimum density on design space.
      runOptions (dict): See cls.RunOptions
      ignoreWarnings (bool): Abort on warnings
      
    Returns:
      OptiStructReanalysis
    
		"""
		pass

	def setValue(self,attr, value):
		"""
		Alias for setattr (attr, value)
    Args:
      attr (str): Attribute name to sets its value.
      value (str): Attribute value to set .
    
		"""
		pass

	def setValues(self,**kwds):
		"""
		Sets passed name/value pairs.
    
    Values are set in a standard order (the order the attribute is defined
    on the class) which is required in certain cases when an attribute's
    setter expects another attribute to have already been set.
    For example, setting a reference before a location that is wrt it.
    
    Args:
      **kwds: Set attributes in one go.
    
		"""
		pass

	@property
	def solverType(self):
		pass
	@solverType.setter
	def solverType(self):
		pass

	@property
	def status(self):
		pass
	@status.setter
	def status(self):
		pass

	def switchToOptimizedParts(self):
		"""
		Change part alternatives to this result.
		"""
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

	def wasValueSet(self,attr):
		"""
		Check if attribute was set

    Args:
      attr (str): Attribute name to check it value set or not

    Returns:
      bool: True, if value was set else false.
    
		"""
		pass

	@property
	def workingDir(self):
		pass
	@workingDir.setter
	def workingDir(self):
		pass

class GeneralConnector:
	def __init__(self,**kwds):
		"""
Baseclass for objects which connect 1 or 2 other objects (usually Features).

     Can be in one of 2 modes as specified by connectorMode property.

     Face - Connected entities must be a FeatureCurve or FeatureArea.

     The connector is attached to the feature at 'location1' and sticks out in
     'direction'.

     'entity2' isn't used to orient the connector unless both features are 
     holes in which case 'direction' is ignored and the connector goes through
     both holes. 'location2' isn't used at all.

     PointToPoint - Connector extends from location1 to location2.
     'direction' isn't used.

  
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	@property
	def axis(self):
		pass
	@axis.setter
	def axis(self):
		pass

	@property
	def clevisPinHoles(self):
		pass
	@clevisPinHoles.setter
	def clevisPinHoles(self):
		pass

	@property
	def connectionRadius(self):
		pass
	@connectionRadius.setter
	def connectionRadius(self):
		pass

	def destroy(self):
		"""
		Delete the object removing it from the model.
    
    The object may come back due to an undo/redo.
    
		"""
		pass

	@property
	def direction(self):
		pass
	@direction.setter
	def direction(self):
		pass

	@property
	def entity1(self):
		pass
	@entity1.setter
	def entity1(self):
		pass

	@property
	def entity2(self):
		pass
	@entity2.setter
	def entity2(self):
		pass

	@property
	def features(self):
		pass
	@features.setter
	def features(self):
		pass

	def flip(self):
		"""
		Swaps the two location end points of the connector.
		"""
		pass

	@property
	def flipAxis(self):
		pass
	@flipAxis.setter
	def flipAxis(self):
		pass

	def getAllChildren(self,type=None, **kwds):
		"""
		Returns a list of all children that matches the specified type.

    Args:
      type (list[Named]): Filter to use to get the children based on object type.
      **kwds : Additional keyword arguments to match other attributes of the object.

    Returns:
      list[Union[Part, Motor, BoundaryCondition, ...]]: The list of children that satisfy the supplied filters.
    
		"""
		pass

	def getAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value.

    Args:
      name (str): Attribute name to find its class.
    
		"""
		pass

	def getAttributes(self,type=None, **kwds):
		"""
		Return an dict of the attributes.
    Pass type and kwds to filter by type and Attribute properties

    Args:
      type (type): Filters the attribute based on type
      **kwds : Additional kwds argument to filter attribute by its properties

    Returns:
      dict: Return an OrderedDict of the attributes
    
		"""
		pass

	def getChild(self,name=None, recursive=False, **kwds):
		"""
		Returns the child of the object which matches the specified unique name.

    Args:
      name (str): The name of the child object.
      recursive (bool):  Search all descendents.
      **kwds : Additional keyword arguments to match attributes of the object.

    Returns:
      Named: The child object which satisfies the specified filters.
    
		"""
		pass

	def getChildren(self,type=None, recursive=False, sorted=False, **kwds):
		"""
		Returns a list of children that is of the specified type.

    Args:
      type (Type[Named]): Filter objects by class.
      recursive (bool): True to get all descendent Parts and Assemblies.
      sorted (bool): Sort the children base on id.

    Returns:
      list[Named]
    
		"""
		pass

	def getClass(self,className):
		"""
		Returns the class of the object.
    
    It can be simple or qualified (with namespace). If the name is simple, we 
    prepend the cls.namespace.

    Args:
      className (Union[Part, Occurrence, Named..]) : The class name. 
     
    Returns:
      Union[Part, Occurrence, Named..] : The class for the specified className. 

    
		"""
		pass

	def getClassAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value

    Args:
      name (str): Name of the attribute
    
		"""
		pass

	def getDependents(self,recursive=False, **kwds):
		"""
		Get objects that reference this object through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getGuiValue(self,attr, **kwds):
		pass

	def getIcon(self):
		"""
		Specifies the icon used to display in Model Browser, Object Tables etc
		"""
		pass

	def getPart(self,obj):
		"""
		Returns the part associated with the specified object.
		"""
		pass

	def getReferences(self,recursive=False, **kwds):
		"""
		Get objects this object references through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getSerializedAttributeValues(self):
		pass

	def getValue(self,attr):
		"""
		Return the attribute value for passed attribute name.
    
    Args:
      attr (String): Attribute name to gets its value.

    Returns:
      str: Returns the attribute value
    
		"""
		pass

	@property
	def inbrowser(self):
		pass
	@inbrowser.setter
	def inbrowser(self):
		pass

	def isValidConnection(self,connection):
		"""
		Can Face mode connector be created out of passed connection object -
       Joint/Fastener, Hole, ...
    
		"""
		pass

	def isa(self,type=None, filter=None, name=None, wildcard=None, **kwds):
		"""
		Determines if the object matches the specified settings or not.
    
    Args:
      type (Union[Part, Assembly, Contact..]): The type of the object.
      filter (method): Return value of specified callback method.
      name (str): Name that matches exactly with object name.
      wildcard (str): A pattern to match exactly with the object name.
      **kwds : Additional keyword arguments to match other attributes.

    Returns:
      bool : True, if a match is found, otherwise False.
    
		"""
		pass

	@property
	def location(self):
		pass
	@location.setter
	def location(self):
		pass

	@property
	def location1(self):
		pass
	@location1.setter
	def location1(self):
		pass

	@property
	def location2(self):
		pass
	@location2.setter
	def location2(self):
		pass

	def modelPositions(self):
		"""
		Forces all objects to return the original model positions instead of the
    current analysis positions.

    Useful when defining draw methods on GeneralObjects where behaviour is 
    different while animating.
    
		"""
		pass

	@property
	def movable(self):
		pass
	@movable.setter
	def movable(self):
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	@property
	def overrideConnRadius(self):
		pass
	@overrideConnRadius.setter
	def overrideConnRadius(self):
		pass

	@property
	def parent(self):
		pass
	@parent.setter
	def parent(self):
		pass

	@property
	def parts(self):
		pass
	@parts.setter
	def parts(self):
		pass

	@property
	def position(self):
		pass
	@position.setter
	def position(self):
		pass

	@property
	def redrawWhenUnitsChanged(self):
		pass
	@redrawWhenUnitsChanged.setter
	def redrawWhenUnitsChanged(self):
		pass

	def requireRedraw(self):
		"""
		Marks the object that needs to be redrawn in the graphics window.
    
		"""
		pass

	@property
	def rotation(self):
		pass
	@rotation.setter
	def rotation(self):
		pass

	def setValue(self,attr, value):
		"""
		Alias for setattr (attr, value)
    Args:
      attr (str): Attribute name to sets its value.
      value (str): Attribute value to set .
    
		"""
		pass

	def setValues(self,**kwds):
		"""
		Sets passed name/value pairs.
    
    Values are set in a standard order (the order the attribute is defined
    on the class) which is required in certain cases when an attribute's
    setter expects another attribute to have already been set.
    For example, setting a reference before a location that is wrt it.
    
    Args:
      **kwds: Set attributes in one go.
    
		"""
		pass

	@property
	def suppressible(self):
		pass
	@suppressible.setter
	def suppressible(self):
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

	def wasValueSet(self,attr):
		"""
		Check if attribute was set

    Args:
      attr (str): Attribute name to check it value set or not

    Returns:
      bool: True, if value was set else false.
    
		"""
		pass

class GeneralObject:
	def __init__(self,**kwds):
		"""
GeneralObject class provides the ability to extend the Inspire data model with
  a custom entity.
  
  This only enables the ability to create new named objects (like Joints, Forces, etc).
  It does not provide the ability to create your own Parts or Assemblies.
  
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	def destroy(self):
		"""
		Delete the object removing it from the model.
    
    The object may come back due to an undo/redo.
    
		"""
		pass

	def getAllChildren(self,type=None, **kwds):
		"""
		Returns a list of all children that matches the specified type.

    Args:
      type (list[Named]): Filter to use to get the children based on object type.
      **kwds : Additional keyword arguments to match other attributes of the object.

    Returns:
      list[Union[Part, Motor, BoundaryCondition, ...]]: The list of children that satisfy the supplied filters.
    
		"""
		pass

	def getAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value.

    Args:
      name (str): Attribute name to find its class.
    
		"""
		pass

	def getAttributes(self,type=None, **kwds):
		"""
		Return an dict of the attributes.
    Pass type and kwds to filter by type and Attribute properties

    Args:
      type (type): Filters the attribute based on type
      **kwds : Additional kwds argument to filter attribute by its properties

    Returns:
      dict: Return an OrderedDict of the attributes
    
		"""
		pass

	def getChild(self,name=None, recursive=False, **kwds):
		"""
		Returns the child of the object which matches the specified unique name.

    Args:
      name (str): The name of the child object.
      recursive (bool):  Search all descendents.
      **kwds : Additional keyword arguments to match attributes of the object.

    Returns:
      Named: The child object which satisfies the specified filters.
    
		"""
		pass

	def getChildren(self,type=None, recursive=False, sorted=False, **kwds):
		"""
		Returns a list of children that is of the specified type.

    Args:
      type (Type[Named]): Filter objects by class.
      recursive (bool): True to get all descendent Parts and Assemblies.
      sorted (bool): Sort the children base on id.

    Returns:
      list[Named]
    
		"""
		pass

	def getClass(self,className):
		"""
		Returns the class of the object.
    
    It can be simple or qualified (with namespace). If the name is simple, we 
    prepend the cls.namespace.

    Args:
      className (Union[Part, Occurrence, Named..]) : The class name. 
     
    Returns:
      Union[Part, Occurrence, Named..] : The class for the specified className. 

    
		"""
		pass

	def getClassAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value

    Args:
      name (str): Name of the attribute
    
		"""
		pass

	def getDependents(self,recursive=False, **kwds):
		"""
		Get objects that reference this object through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getGuiValue(self,attr, **kwds):
		"""
		Get value formatted to be shown in the gui

    Args:
      attr (str): Attribute name to gets its gui value.

    Returns:
      str: Returns a string of the value with its gui units, like "5 mm/s".
    
		"""
		pass

	def getIcon(self):
		"""
		Specifies the icon used to display in Model Browser, Object Tables etc
		"""
		pass

	def getReferences(self,recursive=False, **kwds):
		"""
		Get objects this object references through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getSerializedAttributeValues(self):
		pass

	def getValue(self,attr):
		"""
		Return the attribute value for passed attribute name.
    
    Args:
      attr (String): Attribute name to gets its value.

    Returns:
      str: Returns the attribute value
    
		"""
		pass

	@property
	def inbrowser(self):
		pass
	@inbrowser.setter
	def inbrowser(self):
		pass

	def isa(self,type=None, filter=None, name=None, wildcard=None, **kwds):
		"""
		Determines if the object matches the specified settings or not.
    
    Args:
      type (Union[Part, Assembly, Contact..]): The type of the object.
      filter (method): Return value of specified callback method.
      name (str): Name that matches exactly with object name.
      wildcard (str): A pattern to match exactly with the object name.
      **kwds : Additional keyword arguments to match other attributes.

    Returns:
      bool : True, if a match is found, otherwise False.
    
		"""
		pass

	def modelPositions(self):
		"""
		Forces all objects to return the original model positions instead of the
    current analysis positions.

    Useful when defining draw methods on GeneralObjects where behaviour is 
    different while animating.
    
		"""
		pass

	@property
	def movable(self):
		pass
	@movable.setter
	def movable(self):
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	@property
	def parent(self):
		pass
	@parent.setter
	def parent(self):
		pass

	@property
	def redrawWhenUnitsChanged(self):
		pass
	@redrawWhenUnitsChanged.setter
	def redrawWhenUnitsChanged(self):
		pass

	def requireRedraw(self):
		"""
		Marks the object that needs to be redrawn in the graphics window.
    
		"""
		pass

	def setValue(self,attr, value):
		"""
		Alias for setattr (attr, value)
    Args:
      attr (str): Attribute name to sets its value.
      value (str): Attribute value to set .
    
		"""
		pass

	def setValues(self,**kwds):
		"""
		Sets passed name/value pairs.
    
    Values are set in a standard order (the order the attribute is defined
    on the class) which is required in certain cases when an attribute's
    setter expects another attribute to have already been set.
    For example, setting a reference before a location that is wrt it.
    
    Args:
      **kwds: Set attributes in one go.
    
		"""
		pass

	@property
	def suppressible(self):
		pass
	@suppressible.setter
	def suppressible(self):
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

	def wasValueSet(self,attr):
		"""
		Check if attribute was set

    Args:
      attr (str): Attribute name to check it value set or not

    Returns:
      bool: True, if value was set else false.
    
		"""
		pass

class GeneralObjectDeserializer:
	def __init__(self):
		"""
Internal utility used to deseralize GeneralObjects
  
"""
		pass

	def activate(self,project):
		pass

	def deserialize(self,info):
		pass

	def extractKwds(self,metadata, version):
		"""
		Convert metadata into kwds to pass into obj._loadAttributeValues
		"""
		pass

	def isImporting(self):
		pass

	def onFileLoaded(self):
		pass

	def parseObject(self,string):
		"""
		Deserialize entity string into entity
		"""
		pass

class GeneralPhysical:
	def __init__(self):
		"""
Base class for ShapeVariable, GeneralObject and other externally defined types
  
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	def destroy(self):
		"""
		Delete the object removing it from the model.
    
    The object may come back due to an undo/redo.
    
		"""
		pass

	def getAllChildren(self,type=None, **kwds):
		"""
		Returns a list of all children that matches the specified type.

    Args:
      type (list[Named]): Filter to use to get the children based on object type.
      **kwds : Additional keyword arguments to match other attributes of the object.

    Returns:
      list[Union[Part, Motor, BoundaryCondition, ...]]: The list of children that satisfy the supplied filters.
    
		"""
		pass

	def getAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value.

    Args:
      name (str): Attribute name to find its class.
    
		"""
		pass

	def getAttributes(self,type=None, **kwds):
		"""
		Return an dict of the attributes.
    Pass type and kwds to filter by type and Attribute properties

    Args:
      type (type): Filters the attribute based on type
      **kwds : Additional kwds argument to filter attribute by its properties

    Returns:
      dict: Return an OrderedDict of the attributes
    
		"""
		pass

	def getChild(self,name=None, recursive=False, **kwds):
		"""
		Returns the child of the object which matches the specified unique name.

    Args:
      name (str): The name of the child object.
      recursive (bool):  Search all descendents.
      **kwds : Additional keyword arguments to match attributes of the object.

    Returns:
      Named: The child object which satisfies the specified filters.
    
		"""
		pass

	def getChildren(self,type=None, recursive=False, sorted=False, **kwds):
		"""
		Returns a list of children that is of the specified type.

    Args:
      type (Type[Named]): Filter objects by class.
      recursive (bool): True to get all descendent Parts and Assemblies.
      sorted (bool): Sort the children base on id.

    Returns:
      list[Named]
    
		"""
		pass

	def getClass(self,className):
		"""
		Returns the class of the object.
    
    It can be simple or qualified (with namespace). If the name is simple, we 
    prepend the cls.namespace.

    Args:
      className (Union[Part, Occurrence, Named..]) : The class name. 
     
    Returns:
      Union[Part, Occurrence, Named..] : The class for the specified className. 

    
		"""
		pass

	def getClassAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value

    Args:
      name (str): Name of the attribute
    
		"""
		pass

	def getDependents(self,recursive=False, **kwds):
		"""
		Get objects that reference this object through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getGuiAttributeNames(self):
		"""
		Return list of the attribute names that are in the gui

    Returns:
      list: Returns list of active gui attribute
    
		"""
		pass

	def getGuiValue(self,attr, **kwds):
		"""
		Get value formatted to be shown in the gui

    Args:
      attr (str): Attribute name to gets its gui value.

    Returns:
      str: Returns a string of the value with its gui units, like "5 mm/s".
    
		"""
		pass

	def getReferences(self,recursive=False, **kwds):
		"""
		Get objects this object references through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getSerializedAttributeValues(self):
		pass

	def getValue(self,attr):
		"""
		Return the attribute value for passed attribute name.
    
    Args:
      attr (String): Attribute name to gets its value.

    Returns:
      str: Returns the attribute value
    
		"""
		pass

	def isa(self,type=None, filter=None, name=None, wildcard=None, **kwds):
		"""
		Determines if the object matches the specified settings or not.
    
    Args:
      type (Union[Part, Assembly, Contact..]): The type of the object.
      filter (method): Return value of specified callback method.
      name (str): Name that matches exactly with object name.
      wildcard (str): A pattern to match exactly with the object name.
      **kwds : Additional keyword arguments to match other attributes.

    Returns:
      bool : True, if a match is found, otherwise False.
    
		"""
		pass

	def modelPositions(self):
		"""
		Forces all objects to return the original model positions instead of the
    current analysis positions.

    Useful when defining draw methods on GeneralObjects where behaviour is 
    different while animating.
    
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	@property
	def parent(self):
		pass
	@parent.setter
	def parent(self):
		pass

	def setValue(self,attr, value):
		"""
		Alias for setattr (attr, value)
    Args:
      attr (str): Attribute name to sets its value.
      value (str): Attribute value to set .
    
		"""
		pass

	def setValues(self,**kwds):
		"""
		Sets passed name/value pairs.
    
    Values are set in a standard order (the order the attribute is defined
    on the class) which is required in certain cases when an attribute's
    setter expects another attribute to have already been set.
    For example, setting a reference before a location that is wrt it.
    
    Args:
      **kwds: Set attributes in one go.
    
		"""
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

	def wasValueSet(self,attr):
		"""
		Check if attribute was set

    Args:
      attr (str): Attribute name to check it value set or not

    Returns:
      bool: True, if value was set else false.
    
		"""
		pass

class GeneralStrutLattice:
	def __init__(self,**kwds):
		"""
Strut lattices are constructed from nodes and these nodes are connected
  by beams. Typically, there is a base unit cell that is tiled/patterned in
  one, two, or three dimensions to form the overall lattices structure. A
  popular example is the Body Centred Cubic lattice.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class GreaterOrEqualTo:
	def __init__(self,**kwds):
		"""
Implicit greater or equal to operation.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class GreaterThan:
	def __init__(self,**kwds):
		"""
Implicit greater than operation.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class Gui:
	pass

class HasAttributesBase:
	def __init__(self):
		pass

	def getAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value.

    Args:
      name (str): Attribute name to find its class.
    
		"""
		pass

	def getAttributes(self,type=None, **kwds):
		"""
		Return an dict of the attributes.
    Pass type and kwds to filter by type and Attribute properties

    Args:
      type (type): Filters the attribute based on type
      **kwds : Additional kwds argument to filter attribute by its properties

    Returns:
      dict: Return an OrderedDict of the attributes
    
		"""
		pass

	def getClassAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value

    Args:
      name (str): Name of the attribute
    
		"""
		pass

	def getGuiAttributeNames(self):
		"""
		Return list of the attribute names that are in the gui

    Returns:
      list: Returns list of active gui attribute
    
		"""
		pass

	def getGuiValue(self,attr, **kwds):
		"""
		Get value formatted to be shown in the gui

    Args:
      attr (str): Attribute name to gets its gui value.

    Returns:
      str: Returns a string of the value with its gui units, like "5 mm/s".
    
		"""
		pass

	def getSerializedAttributeValues(self):
		pass

	def getValue(self,attr):
		"""
		Return the attribute value for passed attribute name.
    
    Args:
      attr (String): Attribute name to gets its value.

    Returns:
      str: Returns the attribute value
    
		"""
		pass

	def setValue(self,attr, value):
		"""
		Alias for setattr (attr, value)
    Args:
      attr (str): Attribute name to sets its value.
      value (str): Attribute value to set .
    
		"""
		pass

	def setValues(self,**kwds):
		"""
		Sets passed name/value pairs.
    
    Values are set in a standard order (the order the attribute is defined
    on the class) which is required in certain cases when an attribute's
    setter expects another attribute to have already been set.
    For example, setting a reference before a location that is wrt it.
    
    Args:
      **kwds: Set attributes in one go.
    
		"""
		pass

	def wasValueSet(self,attr):
		"""
		Check if attribute was set

    Args:
      attr (str): Attribute name to check it value set or not

    Returns:
      bool: True, if value was set else false.
    
		"""
		pass

class HasMethodsToHide:
	def __init__(self):
		"""
Baseclass implementing custom __dir__ to hide swig methods.
     This keeps them from showing up in the IPython auto-complete widget.

     To be used on base classes in hwx that inherit a swig class since user
     should be calling the wrapped functions/properties not swig functions.
     
     Non swig functions can be hidden by underscoring them or setting
     _hideFromDir on them.
     
     If __dir__ is overridden it must be a classmethod since it is used
     for generating class documentation.
  
"""
		pass

class HasMethodsToHideMetaClass:
	def __init__(self):
		"""
MetaClass for HasMethodsToHide
  
  Overloads dir(cls) and redirects to implementation on class.
  
"""
		pass

class HasReferenceFrame:
	def __init__(self):
		"""
Custom attribute to mix in class for Direction and Location attributes,
    whose value can exist relative to another entity.
  
"""
		pass

	def OnAttributeModify(self,obj, attr, *args):
		pass

	def activateListener(self,obj):
		"""
		Listen to referenced object for any changes.
		"""
		pass

	def deactivateListener(self,obj):
		"""
		Stop listening to referenced objects.
		"""
		pass

	def disable(self,obj):
		pass

	def enable(self,obj):
		pass

	def getReferenceFrame(self,obj):
		"""
		Get Matrix44 from referenced object in base units.
		"""
		pass

	def getValue(self,obj):
		pass

	def getWrt(self,obj):
		"""
		Get object this attribute is relative to.
		"""
		pass

	def loadValue(self,obj, value):
		pass

	def setValue(self,obj, value):
		pass

	def toGlobal(self,obj, value):
		pass

	def toLocal(self,obj, value):
		pass

class History:
	"""
Manages the Undo, Redo support.
  
  history.noteState() needs to be called after any data model updates.
  
"""
	pass

class Hole:
	def __init__(self,holes=None):
		"""
List of HoleData
"""
		pass

	def addAdjacentFeature(self,feature):
		"""
		Add the supplied feature to the HoleData
    
		"""
		pass

	def append(self,item):
		"""
		Overloaded list method to cast the item to a HoleData
    
		"""
		pass

	@property
	def axis(self):
		pass
	@axis.setter
	def axis(self):
		pass

	def copy(self):
		"""
		 Return the copied hole
		"""
		pass

	@property
	def fasteners(self):
		pass
	@fasteners.setter
	def fasteners(self):
		pass

	@property
	def features(self):
		pass
	@features.setter
	def features(self):
		pass

	def isOpen(self):
		pass

	def isaRegularCylinder(self):
		"""
		Return true, if cylindrical hole has perpendicular faces
    
		"""
		pass

	@property
	def isslot(self):
		pass
	@isslot.setter
	def isslot(self):
		pass

	@property
	def isvalid(self):
		pass
	@isvalid.setter
	def isvalid(self):
		pass

	@property
	def location(self):
		pass
	@location.setter
	def location(self):
		pass

	@property
	def origBoltParts(self):
		pass
	@origBoltParts.setter
	def origBoltParts(self):
		pass

	@property
	def parts(self):
		pass
	@parts.setter
	def parts(self):
		pass

	@property
	def radius(self):
		pass
	@radius.setter
	def radius(self):
		pass

	def removeFeature(self,feature):
		"""
		Remove a feature from this hole
    
		"""
		pass

	@property
	def shape(self):
		pass
	@shape.setter
	def shape(self):
		pass

	@property
	def size(self):
		pass
	@size.setter
	def size(self):
		pass

	@property
	def type(self):
		pass
	@type.setter
	def type(self):
		pass

class HoleData:
	def __init__(self,index):
		"""
Internal class to for items in a hole
  A list of features

     members:
       features  - the features that define the hole
       type      - "blind", "through", "multiopening", "general"
       shape     - "cylinder", "axisymetric", "pocket", "unknown", "slot"
       size      - the diameter of the hole
       axis      - axis Vector
       part      - the Part containing the hole
  
"""
		pass

	def addAdjacentFeature(self,feature):
		"""
		Return true, if specifed feature is added to this hole
    
		"""
		pass

	@property
	def axis(self):
		pass
	@axis.setter
	def axis(self):
		pass

	def copy(self):
		pass

	@property
	def features(self):
		pass
	@features.setter
	def features(self):
		pass

	@property
	def radius(self):
		pass
	@radius.setter
	def radius(self):
		pass

	@property
	def size(self):
		pass
	@size.setter
	def size(self):
		pass

	@property
	def sizeBig(self):
		pass
	@sizeBig.setter
	def sizeBig(self):
		pass

class Holes:
	def __init__(self,populate=True, **kwds):
		"""
Holes found in the model. The items in the list are HoleData.
  
  Has members:

    - aligned  - List of aligned holes.
    - singular - List of single holes.
    - minsize  - The calculated smallest hole size in the model.
    - maxsize  - The calculated largest  hole size in the model.
  
"""
		pass

	def getHoleFromFeature(self,feature, holeList=True):
		"""
		Returns the holes found from the specified feature.

    Args:
      feature (Feature): Part feature on which holes need to be found.
      holeList (bool): If True, returns the holes as a list.

    Returns:
      Holes: Holes found from the feature.
    
		"""
		pass

	def getUnfilteredHoleFromFeature(self,feature):
		"""
		Returns aligned hole from specified feature.
    
    Args:
      feature (Feature): Part feature on which aligned hole need to be found.

    Returns:
      AlignedHole: Aligned Hole found from the feature.
    
		"""
		pass

	def getUnfilteredSingleHoleFromFeature(self,feature):
		"""
		Returns the single hole found from specified feature.

    Args:
      feature (Feature): Part feature on which single hole need to be found.

    Returns:
      Hole: Single Hole found from the feature.
    
		"""
		pass

	def makeDirty(self):
		"""
		Repopulates the holes.
    
		"""
		pass

	def populate(self,minsize=None, maxsize=None, parts=None, holeType=None, cadParts=None):
		"""
		Finds all the holes that satisfies the given condition.

    Args:
      minsize (float): Get the holes with a size larger than minsize.
      maxsize (float): Get the holes with a size smaller than maxsize.
      parts (Part,list[Part]): Get the holes for these parts.
      holeType (str): Filters the hole based on type.  Allowed types are 'through', 'blind' and 'all'.
      cadParts (bool): If true, finds existing geometry in holes.
    
		"""
		pass

class ImplIf:
	def __init__(self,**kwds):
		"""
Implicit if operation.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class Implicit:
	def __init__(self,assembly=None):
		"""
Implicit modelling represents geometry as a field and is highly efficient
  in terms of computation and rendering. Users can design very intricate
  geometries, such as lattices, whilst exploiting exceptional robustness during
  Boolean operations, offsets, shells, fillets, etc. It also enables
  field-driven design, where geometry can be tightly controlled using
  relationships with other geometry, simulation results, custom equations, and
  much more.
"""
		pass

	def abs(self,bodyA):
		"""
		Implicit absolute value operation.

    Args:
      bodyA (Body): Implicit body for math functions, use bodies property to
        get all bodies from implicit part.

    Returns:
      Abs: The newly created Abs object.
    
		"""
		pass

	def acos(self,bodyA):
		"""
		Implicit Trigonometry ACos operation.

    Args:
      bodyA (Body): Implicit body for math functions, use bodies property to
        get all bodies from implicit part.

    Returns:
      ACos: The newly created ACos object.
    
		"""
		pass

	def acosh(self,bodyA):
		"""
		Implicit Trigonometry ACosh operation.

    Args:
      bodyA (Body): Implicit body for math functions, use bodies property to
        get all bodies from implicit part.

    Returns:
      ACosh: The newly created ACosh object.
    
		"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	def add(self,bodyA, bodyB):
		"""
		Implicit Add operation.

    Args:
      bodyA (Body): Implicit body for math operation, use bodies property to
        get all bodies from implicit part.
      bodyB (Body): Implicit body for math operation, use bodies property to
        get all bodies from implicit part.

    Returns:
      Add: The newly created Add object.
    
		"""
		pass

	def addVector(self,bodyA, bodyB):
		"""
		Implicit Vector Add operation.

    Args:
      bodyA (Body): Implicit body for math operation, use bodies property to
        get all bodies from implicit part.
      bodyB (Body): Implicit body for math operation, use bodies property to
        get all bodies from implicit part.

    Returns:
      AddVector: The newly created AddVector object.
    
		"""
		pass

	@property
	def animationPosition(self):
		pass
	@animationPosition.setter
	def animationPosition(self):
		pass

	def asin(self,bodyA):
		"""
		Implicit Trigonometry ASin operation.

    Args:
      bodyA (Body): Implicit body for math functions, use bodies property to
        get all bodies from implicit part.

    Returns:
      ASin: The newly created ASin object.
    
		"""
		pass

	def asinh(self,bodyA):
		"""
		Implicit Trigonometry ASinh operation.

    Args:
      bodyA (Body): Implicit body for math functions, use bodies property to
        get all bodies from implicit part.

    Returns:
      ASinh: The newly created ASinh object.
    
		"""
		pass

	def atan(self,bodyA):
		"""
		Implicit Trigonometry ATan operation.

    Args:
      bodyA (Body): Implicit body for math functions, use bodies property to
        get all bodies from implicit part.

    Returns:
      ATan: The newly created ATan object.
    
		"""
		pass

	def atan2(self,bodyA, bodyB):
		"""
		Implicit Trigonometry ATan2 operation.

    Args:
      bodyA (Body): Implicit body for math functions, use bodies property to
        get all bodies from implicit part.
      bodyB (Body): Implicit body for math operation, use bodies property to
        get all bodies from implicit part.

    Returns:
      ATan2: The newly created ATan2 object.
    
		"""
		pass

	def atanh(self,bodyA):
		"""
		Implicit Trigonometry ATanh operation.

    Args:
      bodyA (Body): Implicit body for math functions, use bodies property to
        get all bodies from implicit part.

    Returns:
      ATanh: The newly created ATanh object.
    
		"""
		pass

	@property
	def autoCalcMotionContactResolution(self):
		pass
	@autoCalcMotionContactResolution.setter
	def autoCalcMotionContactResolution(self):
		pass

	@property
	def autoCalculateCG(self):
		pass
	@autoCalculateCG.setter
	def autoCalculateCG(self):
		pass

	@property
	def autoCalculateMass(self):
		pass
	@autoCalculateMass.setter
	def autoCalculateMass(self):
		pass

	@property
	def autoCalculateMeshSize(self):
		pass
	@autoCalculateMeshSize.setter
	def autoCalculateMeshSize(self):
		pass

	@property
	def autoCalculateMoment(self):
		pass
	@autoCalculateMoment.setter
	def autoCalculateMoment(self):
		pass

	@property
	def autoCalculateThickness(self):
		pass
	@autoCalculateThickness.setter
	def autoCalculateThickness(self):
		pass

	@property
	def axisAlignedBoundingBox(self):
		pass
	@axisAlignedBoundingBox.setter
	def axisAlignedBoundingBox(self):
		pass

	@property
	def beadPatterns(self):
		pass
	@beadPatterns.setter
	def beadPatterns(self):
		pass

	@property
	def bodies(self):
		pass
	@bodies.setter
	def bodies(self):
		pass

	def booleanCombine(self,target, tools=None):
		"""
		Combines the specified parts.

  Args:
    target (Part): Part to be combined with tools.
    tools (list[Part]): Parts to be combined with target. Destroyed after combine.

  Returns:
    Part: The combined part.
  
		"""
		pass

	def booleanIntersect(self,targets, tools, keepTargets=False, keepTools=False):
		"""
		Retains only the intersecting portions of two sets of solid objects.

  Args:
    targets (list[Part]): The first set of parts.
    tools (list[Part]): A list of parts for boolean intersect operation.
    keepTargets (bool): If True, preserves the target parts after the operation.
    keepTools (bool): If True, preserves the tools parts after the operation.

  Returns:
    Part: The intersected part.
  
		"""
		pass

	def booleanSubtract(self,targets, tools, keepTools=False):
		"""
		Carves out one set of solid objects from another set of solid objects.

  Args:
    targets (list[Part]): The parts being carved.
    tools (list[Part]): The parts doing the carving.
    keepTools (bool): If True, preserves the tools after the operation.

  Returns:
    Part: The remaining part.
  
		"""
		pass

	def breakInstance(self,parts):
		"""
		Break the instances of a part.

  Args:
    parts (list[Part]): Parts for breaking instances.
  
		"""
		pass

	def ceil(self,bodyA):
		"""
		Implicit ceil operation.

    Args:
      bodyA (Body): Implicit body for math functions, use bodies property to
        get all bodies from implicit part.

    Returns:
      Ceil: The newly created Ceil object.
    
		"""
		pass

	@property
	def cg(self):
		pass
	@cg.setter
	def cg(self):
		pass

	def circularPattern(self,input, axis, angle=60, count=3, equalSpacing=False, instances=False, symmetry=False, axisReverse=False, result="NEW_PART", mergeWithAllParts=True, mergeParts=None, copiesToSkip=None):
		"""
		Circular Pattern parts or faces around an axis.

  Args:
    input (list[Part] | list[FeatureArea]): Parts or Features to create circular
      pattern.
    axis (math.Vector | FeatureCurve | Axis): Axis is a reference line, edge,
      or axis to which the pattern will be parallel.
    angle (float): Angle within which the copies are equally spaced.
    count (int): Number of copies.
    equalSpacing (bool): If True, equally space the copies within a specified
      Angle.
    instances (bool): If True, any changes to part or face will apply to all
      instances.
    symmetry (bool): Symmetry in Direction 1.
    axisReverse (bool): Reverse the axis in Direction 1.
    result (str): Result type of circular pattern.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeParts.
    mergeParts (list[Part]): Parts to be merged with circular pattern.
    copiesToSkip (dict{Part: list[indicesToSkip]}): Set copies to skip. It's
      basically a dictionary which contains Part as a key and list of indices to
      skip as values.

  Returns:
  list[Part]: List of parts created.
  
		"""
		pass

	def clamp(self,bodyA, bodyB, bodyC):
		"""
		Implicit clamp operation.

    Args:
      bodyA (Body): Implicit body for math functions, use bodies property to
        get all bodies from implicit part.
      bodyB (Body): Implicit body for math functions, use bodies property to
        get all bodies from implicit part.
      bodyC (Body): Implicit body for math functions, use bodies property to
        get all bodies from implicit part.

    Returns:
      Clamp: The newly created Clamp object.
    
		"""
		pass

	@property
	def cogConstraints(self):
		pass
	@cogConstraints.setter
	def cogConstraints(self):
		pass

	@property
	def color(self):
		pass
	@color.setter
	def color(self):
		pass

	def combine(self,targets, transition="SHARP", transitionValue=0.002, transitionField=None):
		"""
		The Combine tool is a Boolean Union operation between implicit bodies.
    This tool creates a new body that envelopes any volume that falls within at
    least one of bodies being combined. It is equivalent to a logical
    OR / disjunction.

    Args:
      targets (list[Body]): List of Implicit target body, use bodies property to
        get all bodies from implicit part.
      transition (str): Transition Type.
        - SHARP
        - FILLET
        - CHAMFER
      transitionValue (float | str): Transition value for boolean combine.
      transitionField (Field): Transition field input if transitionValue is not
        provided.

    Returns:
      Combine: The newly created Combine object.
    
		"""
		pass

	@property
	def concentratedMasses(self):
		pass
	@concentratedMasses.setter
	def concentratedMasses(self):
		pass

	def constant(self,value):
		"""
		Implicit constant.

    Args:
      value (float | str): Constant value for implicit.

    Returns:
      Constant: The newly created Constant object.
    
		"""
		pass

	def convertBodiesToParts(self,parts):
		"""
		Convert disconnected bodies to parts.

  Args:
    parts (list[Part]): The parts to be converted.

  Returns:
    list[Part]: Newly created parts.
  
		"""
		pass

	def convertToImplicit(self,part):
		"""
		The Convert tool accepts geometry in BRep or surface mesh formats and
    converts into Altair's implicit geometry format. The output is typically a
    Signed Distance Field (SDF) for the converted geometry.

    Args:
      part (Part): Part to be converted in implicit object.

    Returns:
      ConvertToImplicit: The newly created ConvertToImplicit object.
    
		"""
		pass

	def convertToMass(self,parts, parent=None):
		"""
		Replace Parts to concentrated mass.

  Args:
    parts (list[Part]): Parts to be replaced with concentrated mass.
    parent (Part): Parent for the mass created.
  
		"""
		pass

	def convertToTriangleMesh(self,parts):
		"""
		Convert Parts to triangle mesh.

  Args:
    parts (list[Part]): Parts to be converted in triangle mesh.
  
		"""
		pass

	def cos(self,bodyA):
		"""
		Implicit Trigonometry Cos operation.

    Args:
      bodyA (Body): Implicit body for math functions, use bodies property to
        get all bodies from implicit part.

    Returns:
      Cos: The newly created Cos object.
    
		"""
		pass

	def create2D(self,bodyA, bodyB):
		"""
		Implicit 2D Vector creation.

    Args:
      bodyA (Body): Implicit body for math operation, use bodies property to
        get all bodies from implicit part.
      bodyB (Body): Implicit body for math operation, use bodies property to
        get all bodies from implicit part.

    Returns:
      Create2D: The newly created Create2D object.
    
		"""
		pass

	def create3D(self,bodyA, bodyB, bodyC):
		"""
		Implicit 3D Vector creation.

    Args:
      bodyA (Body): Implicit body for math operation, use bodies property to
        get all bodies from implicit part.
      bodyB (Body): Implicit body for math operation, use bodies property to
        get all bodies from implicit part.
      bodyC (Body): Implicit body for math operation, use bodies property to
        get all bodies from implicit part.

    Returns:
      Create3D: The newly created Create3D object.
    
		"""
		pass

	def create4D(self,bodyA, bodyB, bodyC, bodyD):
		"""
		Implicit 3D Vector creation.

    Args:
      bodyA (Body): Implicit body for math operation, use bodies property to
        get all bodies from implicit part.
      bodyB (Body): Implicit body for math operation, use bodies property to
        get all bodies from implicit part.
      bodyC (Body): Implicit body for math operation, use bodies property to
        get all bodies from implicit part.
      bodyD (Body): Implicit body for math operation, use bodies property to
        get all bodies from implicit part.

    Returns:
      Create4D: The newly created Create4D object.
    
		"""
		pass

	def createAxis(self,positionX="0", positionY="0", positionZ="0", normalX="0", normalY="0", normalZ="0"):
		"""
		Tool to create axis implicit body.

    Args:
      positionX (float | str): Position value in X direction for implicit axis
        body.
      positionY (float | str): Position value in Y direction for implicit axis
        body.
      positionZ (float | str): Position value in Z direction for implicit axis
        body.
      normalX (float | str): Normal value in X direction for implicit axis body.
      normalY (float | str): Normal value in Y direction for implicit axis body.
      normalZ (float | str): Normal value in Z direction for implicit axis body.

    Returns:
      Axis: The newly created Axis object.
    
		"""
		pass

	def createBlankPart(self,assembly=None):
		"""
		Creates Implicit blank part in space.

    Args:
      assembly (Assembly): Parent assembly of implicit part.

    Returns:
      Implicit: The newly created Implicit object.
    
		"""
		pass

	def createCapsule(self,length=0.05, thickness=0.02, originX="0", originY="0", originZ="0"):
		"""
		Tool to create capsule implicit body.

    Args:
      length (float | str): Length of the capsule implicit object.
      thickness (float | str): Thickness of the capsule implicit object.
      originX (float | str): Origin value in X direction.
      originY (float | str): Origin value in Y direction.
      originZ (float | str): Origin value in Z direction.

    Returns:
      Capsule: The newly created Capsule object.
    
		"""
		pass

	def createCone(self,radius=0.05, height=0.1, originX="0", originY="0", originZ="0"):
		"""
		Tool to create cone implicit body.

    Args:
      radius (float | str): Radius of the cone implicit object.
      height (float | str): Height of the cone implicit object.
      originX (float | str): Origin value in X direction.
      originY (float | str): Origin value in Y direction.
      originZ (float | str): Origin value in Z direction.

    Returns:
      Cone: The newly created Cone object.
    
		"""
		pass

	def createCuboid(self,x=0.1, y=0.1, z=0.1, uniform=True, originX="0", originY="0", originZ="0"):
		"""
		Tool to create cubical implicit body.

    Args:
      x (float | str): Length of cuboid.
      y (float | str): Breadth of cuboid.
      z (float | str): Height of cuboid.
      uniform (bool): If True, all sides are equal.
      originX (float | str): Origin value in X direction.
      originY (float | str): Origin value in Y direction.
      originZ (float | str): Origin value in Z direction.

    Returns:
      Cuboid: The newly created Cuboid object.
    
		"""
		pass

	def createCustomImplicitBody(self,customUnitCell, minBounds, maxBounds):
		"""
		Custom Implicit Body capability is available through the Python API.
    Here, we create a 3D voxel grid within a bounding box, and then
    populates each voxel (grid point) with a scalar value
    to create the field for the geometry. The computation of the scalar values
    is executed in user-defined Python scripts (including imported libraries, if
    needed). In this sense, the Custom Implicit Body makes Inspire Implicit
    Modelling infinitely customisable and extensible.

    Args:
      customUnitCell (Body): Custom unit cell, created through implicit math
        functions.
      minBounds (math.Point): Minimum custom bounds for custom implicit body.
      maxBounds (math.Point): Maximum custom bounds for custom implicit body.

    Returns:
      CustomBody: The newly created CustomBody object.
    
		"""
		pass

	def createCylinder(self,radius=0.05, height=0.1, originX="0", originY="0", originZ="0"):
		"""
		Tool to create cylindrical implicit body.

    Args:
      radius (float | str): Radius of the cylindrical implicit object.
      height (float | str): Height of the cylindrical implicit object.
      originX (float | str): Origin value in X direction.
      originY (float | str): Origin value in Y direction.
      originZ (float | str): Origin value in Z direction.

    Returns:
      Cylinder: The newly created Cylinder object.
    
		"""
		pass

	def createField(self,drivingObject, inputRangeMin="0", inputRangeMax=1, clamp=False, unitType="Unitless", outputRangeMin="0", outputRangeMax=1):
		"""
		The Field tool is used to construct a field from a source that is not yet
    described in a field format and/or remap field values to different ranges. A
    field is a 3D grid, and each grid point contains a signed scalar value.

    Args:
      drivingObject (Body): Implicit body, use bodies property to get all bodies
       from implicit part.
      inputRangeMin (float | str): Input Range minimum distance.
      inputRangeMax (float | str): Input Range maximum distance.
      clamp (bool): If True, it limits the values to between the range instead
        of extrapolating beyond the range otherwise not.
      unitType (str): Unit type for output range.
        - Length
        - Angle
        - Unitless
        - Percent
      outputRangeMin (float | str): Minimum output range.
      outputRangeMax (float | str): Maximum output range.

    Returns:
      Field: The newly created Field object.
    
		"""
		pass

	def createLine(self,startX="0", startY="0", startZ="0", endX="0", endY="0", endZ="0", thickness="0"):
		"""
		Tool to create line implicit body.

    Args:
      startX (float | str): Start point value in X direction for implicit line
        body.
      startY (float | str): Start point value in Y direction for implicit line
        body.
      startZ (float | str): Start point value in Z direction for implicit line
        body.
      endX (float | str): End point value in X direction for implicit line body.
      endY (float | str): End point value in Y direction for implicit line body.
      endZ (float | str): End point value in Z direction for implicit line body.
      thickness (float | str): Thickness of the line.

    Returns:
      Line: The newly created Line object.
    
		"""
		pass

	def createPellet(self,radius=0.05, thickness=0.02, originX="0", originY="0", originZ="0"):
		"""
		Tool to create pellet implicit body.

    Args:
      radius (float | str): Radius of the pellet implicit object.
      thickness (float | str): Thickness of the pellet implicit object.
      originX (float | str): Origin value in X direction.
      originY (float | str): Origin value in Y direction.
      originZ (float | str): Origin value in Z direction.

    Returns:
      Pellet: The newly created Pellet object.
    
		"""
		pass

	def createPipe(self,innerRadius=0.02, outerRadius=0.05, height=0.1, originX="0", originY="0", originZ="0"):
		"""
		Tool to create torus implicit body.

    Args:
      innerRadius (float | str): Inner Radius of the pipe implicit object.
      outerRadius (float | str): Outer Radius of the pipe implicit object.
      height (float | str): Height of the pipe implicit object.
      originX (float | str): Origin value in X direction.
      originY (float | str): Origin value in Y direction.
      originZ (float | str): Origin value in Z direction.

    Returns:
      Pipe: The newly created Pipe object.
    
		"""
		pass

	def createPlane(self,positionX="0", positionY="0", positionZ="0", normalX="0", normalY="0", normalZ="0"):
		"""
		Tool to create plane implicit body.

    Args:
      positionX (float | str): Position value in X direction for implicit plane
        body.
      positionY (float | str): Position value in Y direction for implicit plane
        body.
      positionZ (float | str): Position value in Z direction for implicit plane
        body.
      normalX (float | str): Normal value in X direction for implicit plane
        body.
      normalY (float | str): Normal value in Y direction for implicit plane
        body.
      normalZ (float | str): Normal value in Z direction for implicit plane
        body.

    Returns:
      Plane: The newly created Plane object.
    
		"""
		pass

	def createPoint(self,x="0", y="0", z="0"):
		"""
		Tool to create point implicit body.

    Args:
      x (float | str): Value in X direction for implicit point body.
      y (float | str): Value in Y direction for implicit point body.
      z (float | str): Value in Z direction for implicit point body.

    Returns:
      Point: The newly created Point object.
    
		"""
		pass

	def createSphere(self,radius=0.05, originX="0", originY="0", originZ="0"):
		"""
		Tool to create spherical implicit body.

    Args:
      radius (float | str): Radius of the spherical implicit object.
      originX (float | str): Origin value in X direction.
      originY (float | str): Origin value in Y direction.
      originZ (float | str): Origin value in Z direction.

    Returns:
      Sphere: The newly created Sphere object.
    
		"""
		pass

	def createTorus(self,innerRadius=0.02, outerRadius=0.05, originX="0", originY="0", originZ="0"):
		"""
		Tool to create torus implicit body.

    Args:
      innerRadius (float | str): Inner Radius of the torus implicit object.
      outerRadius (float | str): Outer Radius of the torus implicit object.
      originX (float | str): Origin value in X direction.
      originY (float | str): Origin value in Y direction.
      originZ (float | str): Origin value in Z direction.

    Returns:
      Torus: The newly created Torus object.
    
		"""
		pass

	def cross(self,bodyA, bodyB):
		"""
		Implicit Cross Vector creation.

    Args:
      bodyA (Body): Implicit body for math operation, use bodies property to
        get all bodies from implicit part.
      bodyB (Body): Implicit body for math operation, use bodies property to
        get all bodies from implicit part.

    Returns:
      Cross: The newly created Cross object.
    
		"""
		pass

	@property
	def currentRepresentation(self):
		pass
	@currentRepresentation.setter
	def currentRepresentation(self):
		pass

	@property
	def designSpace(self):
		pass
	@designSpace.setter
	def designSpace(self):
		pass

	def destroy(self):
		"""
		Destroys occurrences from the model.
    
		"""
		pass

	@property
	def detectCollisions(self):
		pass
	@detectCollisions.setter
	def detectCollisions(self):
		pass

	def difference(self,targets, tools, transition="SHARP", transitionValue=0.002, transitionField=None):
		"""
		The difference tool is used to cut 'tool' implicit bodies from 'target'
    implicit bodies. This tool creates a new implicit body that envelopes any
    volume that falls within any target but NOT within any tools. It is
    equivalent to a logical NOT / negation.

    Args:
      targets (list[Body]): List of Implicit target body, use bodies property to
        get all bodies from implicit part.
      tools (list[Body]): List of Implicit tool body, use bodies property to
        get all bodies from implicit part.
      transition (str): Transition Type.
        - SHARP
        - FILLET
        - CHAMFER
      transitionValue (float | str): Transition value for boolean difference.
      transitionField (Field): Transition field input if transitionValue is not
        provided.

    Returns:
      Difference: The newly created Difference object.
    
		"""
		pass

	@property
	def dimensions(self):
		pass
	@dimensions.setter
	def dimensions(self):
		pass

	@property
	def displacementConstraints(self):
		pass
	@displacementConstraints.setter
	def displacementConstraints(self):
		pass

	def distance(self,bodyA, bodyB):
		"""
		Implicit Distance Vector creation.

    Args:
      bodyA (Body): Implicit body for math operation, use bodies property to
        get all bodies from implicit part.
      bodyB (Body): Implicit body for math operation, use bodies property to
        get all bodies from implicit part.

    Returns:
      Distance: The newly created Distance object.
    
		"""
		pass

	def divide(self,bodyA, bodyB):
		"""
		Implicit Divide operation.

    Args:
      bodyA (Body): Implicit body for math operation, use bodies property to
        get all bodies from implicit part.
      bodyB (Body): Implicit body for math operation, use bodies property to
        get all bodies from implicit part.

    Returns:
      Divide: The newly created Divide object.
    
		"""
		pass

	def dot(self,bodyA, bodyB):
		"""
		Implicit Dot Vector creation.

    Args:
      bodyA (Body): Implicit body for math operation, use bodies property to
        get all bodies from implicit part.
      bodyB (Body): Implicit body for math operation, use bodies property to
        get all bodies from implicit part.

    Returns:
      Dot: The newly created Dot object.
    
		"""
		pass

	@property
	def drawDirections(self):
		pass
	@drawDirections.setter
	def drawDirections(self):
		pass

	def e(self):
		"""
		Implicit Euler's number(E).

    Returns:
      E: The newly created E object.
    
		"""
		pass

	def edit(self):
		"""
		Contextmanager to group multiple updates for performance.
		"""
		pass

	@property
	def enforcedDisplacements(self):
		pass
	@enforcedDisplacements.setter
	def enforcedDisplacements(self):
		pass

	def equalTo(self,bodyA, bodyB):
		"""
		Implicit equal to operation.

    Args:
      bodyA (Body): Implicit body for math operation, use bodies property to
        get all bodies from implicit part.
      bodyB (Body): Implicit body for math operation, use bodies property to
        get all bodies from implicit part.

    Returns:
      EqualTo: The newly created EqualTo object.
    
		"""
		pass

	@property
	def features(self):
		pass
	@features.setter
	def features(self):
		pass

	def fillet(self,body, type="ROUNDS", filletRadius=0.002, roundRadius=0.002):
		"""
		The Fillet tool applies a circular fillet of defined radius to sharp
    edges in an implicit body. It can be separately applied to convex and
    concave edges. Unlike traditional CAD, the fillet effect will be applied to
    any qualifying edges in the model rather than those that are manually
    selected by a user.

    Args:
      body (Body): Implicit body, use bodies property to get all bodies from
        implicit part.
      type (str): Fillet type.
        - FILLETS
        - ROUNDS
        - BOTH
      filletRadius (float | str): Fillet radius if type is 'FILLETS'.
      roundRadius (float | str): Round radius if type is 'ROUNDS'.

    Returns:
      Fillet: The newly created Fillet object.
    
		"""
		pass

	def findMinimumSeparation(self,other):
		"""
		Find closest points between two parts
    
    Args:
      other (Part): The 2nd part.
      
    Returns:
      namedtuple("ClosestPoints", "point1 point2 distance feature1 feature2")
    
		"""
		pass

	@property
	def flexible(self):
		pass
	@flexible.setter
	def flexible(self):
		pass

	def floorDivision(self,bodyA, bodyB):
		"""
		Implicit Floor Division operation.

    Args:
      bodyA (Body): Implicit body for math operation, use bodies property to
        get all bodies from implicit part.
      bodyB (Body): Implicit body for math operation, use bodies property to
        get all bodies from implicit part.

    Returns:
      FloorDivision: The newly created FloorDivision object.
    
		"""
		pass

	def fraction(self,bodyA):
		"""
		Implicit fraction operation.

    Args:
      bodyA (Body): Implicit body for math functions, use bodies property to
        get all bodies from implicit part.

    Returns:
      Fraction: The newly created Fraction object.
    
		"""
		pass

	def generalStrutLattice(self,body, hollow=False, solidRegion=False, coordinateSystemType="CARTESIAN", localOrigin=None, strutDiameter=0.005, strutDiameterField=None, strutInnerDiameter=0.003, strutInnerDiameterField=None, shell=False, combine=False, shellDirection="OUTWARD", shellThicknessIn=0.1, shellThicknessInField=None, shellThicknessOut=0.1, shellThicknessOutField=None, trimmingBody=None, combineBody=None, transition="SHARP", distance=0.01, distanceField=None, verts=None, beams=None):
		"""
		Strut lattices are constructed from nodes and these nodes are connected
    by beams. Typically, there is a base unit cell that is tiled/patterned in
    one, two, or three dimensions to form the overall lattices structure. A
    popular example is the Body Centred Cubic lattice.

    Args:
      body (Body): Implicit body, use bodies property to get all bodies from
        implicit part.
      hollow (bool): if True, Strut surface type will be hollow otherwise
        solid.
      solidRegion (bool): if True, solid region of strut is inverted otherwise
        regular.
      coordinateSystemType (str): Strut Lattice Layout.
        - CARTESIAN
        - CYLINDRICAL
        - SPHERICAL
      localOrigin (math.Matrix44): Local origin for the strut lattice.
      strutDiameter (float | str): Strut thickness of struct lattice.
      strutDiameterField (Field): Strut diameter field input, if strutDiameter
        is not provided.
      strutInnerDiameter (float | str): Shell thickness of strut lattice if it
        is hollow.
      strutInnerDiameterField (Field): Strut inner diameter field input, if
        strutInnerDiameter is not provided.
      shell (bool): It's a outer body option. If True, outer body of strut
        lattice will be shell otherwise not.
      combine (bool): It's a outer body option. If True, outer body of strut
        lattice will be combine otherwise not. At a time only one option can be
        true among combine and shell option.
      shellDirection (str): Shell Direction.
        - OUTWARD
        - INWARD
        - BOTH
        - SYMMETRY
      shellThicknessIn (float | str): Shell thickness inward for outer body of
        strut lattice.
      shellThicknessInField (Field): Shell inward thickness field input, if
        shellThicknessIn is not provided.
      shellThicknessOut(float | str): Shell thickness outward for outer body of
        strut lattice.
      shellThicknessOutField (Field): Shell outward thickness field input, if
        shellThicknessOut is not provided.
      trimmingBody (Body): Trim implicit body for strut lattice.
      combineBody (Body): Combine implicit body for strut lattice.
      transition (str): Transition type for outer body options.
        - SHARP
        - FILLET
        - CHAMFER
      distance (float | str): Distance for outer body options.
      distanceField (Field): Distance field input, if distance is not provided.
      verts (list[math.Point]): Node list of the custom unit cell for strut
        lattice.
      beams (list[int]): Connectivity of the custom unit cell for strut lattice.

    Returns:
      GeneralStrutLattice: The newly created GeneralStrutLattice object.
    
		"""
		pass

	def getAllChildren(self,type=None, **kwds):
		"""
		Returns a list of all children that matches the specified type.

    Args:
      type (list[Named]): Filter to use to get the children based on object type.
      **kwds : Additional keyword arguments to match other attributes of the object.

    Returns:
      list[Union[Part, Motor, BoundaryCondition, ...]]: The list of children that satisfy the supplied filters.
    
		"""
		pass

	def getAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value.

    Args:
      name (str): Attribute name to find its class.
    
		"""
		pass

	def getAttributes(self,type=None, **kwds):
		"""
		Return an dict of the attributes.
    Pass type and kwds to filter by type and Attribute properties

    Args:
      type (type): Filters the attribute based on type
      **kwds : Additional kwds argument to filter attribute by its properties

    Returns:
      dict: Return an OrderedDict of the attributes
    
		"""
		pass

	def getBody(self,name):
		"""
		To get the implicit bodies based on their names.
		"""
		pass

	def getChild(self,name=None, recursive=False, **kwds):
		"""
		Returns the child of the object which matches the specified unique name.

    Args:
      name (str): The name of the child object.
      recursive (bool):  Search all descendents.
      **kwds : Additional keyword arguments to match attributes of the object.

    Returns:
      Named: The child object which satisfies the specified filters.
    
		"""
		pass

	def getChildren(self,type=None, recursive=False, sorted=False, **kwds):
		"""
		Returns a list of children that is of the specified type.

    Args:
      type (Type[Named]): Filter objects by class.
      recursive (bool): True to get all descendent Parts and Assemblies.
      sorted (bool): Sort the children base on id.

    Returns:
      list[Named]
    
		"""
		pass

	def getClass(self,className):
		"""
		Returns the class of the object.
    
    It can be simple or qualified (with namespace). If the name is simple, we 
    prepend the cls.namespace.

    Args:
      className (Union[Part, Occurrence, Named..]) : The class name. 
     
    Returns:
      Union[Part, Occurrence, Named..] : The class for the specified className. 

    
		"""
		pass

	def getClassAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value

    Args:
      name (str): Name of the attribute
    
		"""
		pass

	def getClosestPoint(self,point):
		"""
		Get closest point on part from passed point
		"""
		pass

	def getDependents(self,recursive=False, **kwds):
		"""
		Get objects that reference this object through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getFeature(self,name=None):
		"""
		Returns the feature based on its name.
		"""
		pass

	def getFeatures(self,type=None, rep="BestRep", **kwds):
		"""
		Returns a list of features based on specified filters.

    Args:
      type ((FeaturePoint, FeatureArea, FeatureCylindrical..etc)): Filters the 
        features based on type.
      rep (str): Feature representation. See part.representations for options
      **kwds : Additional attributes to consider while filtering.

    Returns:
      list [FeaturePoint, FeatureArea, FeatureCylindrical..etc)]: List of 
        features that satisfies all the filter criteria.
    
		"""
		pass

	def getGuiAttributeNames(self):
		"""
		Return list of the attribute names that are in the gui

    Returns:
      list: Returns list of active gui attribute
    
		"""
		pass

	def getGuiValue(self,attr, **kwds):
		"""
		Get value formatted to be shown in the gui

    Args:
      attr (str): Attribute name to gets its gui value.

    Returns:
      str: Returns a string of the value with its gui units, like "5 mm/s".
    
		"""
		pass

	def getRayIntersections(self,origin, direction):
		"""
		Find list of points where ray intersects part
		"""
		pass

	def getReferences(self,recursive=False, **kwds):
		"""
		Get objects this object references through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getSerializedAttributeValues(self):
		pass

	def getValue(self,attr):
		"""
		Return the attribute value for passed attribute name.
    
    Args:
      attr (String): Attribute name to gets its value.

    Returns:
      str: Returns the attribute value
    
		"""
		pass

	def greaterOrEqualTo(self,bodyA, bodyB):
		"""
		Implicit greater or equal to operation.

    Args:
      bodyA (Body): Implicit body for math operation, use bodies property to
        get all bodies from implicit part.
      bodyB (Body): Implicit body for math operation, use bodies property to
        get all bodies from implicit part.

    Returns:
      GreaterOrEqualTo: The newly created GreaterOrEqualTo object.
    
		"""
		pass

	def greaterThan(self,bodyA, bodyB):
		"""
		Implicit greater than operation.

    Args:
      bodyA (Body): Implicit body for math operation, use bodies property to
        get all bodies from implicit part.
      bodyB (Body): Implicit body for math operation, use bodies property to
        get all bodies from implicit part.

    Returns:
      GreaterThan: The newly created GreaterThan object.
    
		"""
		pass

	@property
	def ground(self):
		pass
	@ground.setter
	def ground(self):
		pass

	@property
	def grounded(self):
		pass
	@grounded.setter
	def grounded(self):
		pass

	@property
	def holes(self):
		pass
	@holes.setter
	def holes(self):
		pass

	def identifyShape(self):
		"""
		Attempts to identify the part geometry as a known shape.

      The shapes can be:

          - Box
          - Ellipsoid
          - Sphere
          - Cylinder
          - frustum
          - axi-symmetric gear
          - rack
          
    Returns:
      Box,Ellipsoid,Sphere.. : The identified shape.
    
		"""
		pass

	@property
	def ignoreFlexibility(self):
		pass
	@ignoreFlexibility.setter
	def ignoreFlexibility(self):
		pass

	def implIf(self,bodyA, bodyB, bodyC):
		"""
		Implicit if operation.

    Args:
      bodyA (Body): Implicit body for math functions, use bodies property to
        get all bodies from implicit part.
      bodyB (Body): Implicit body for math functions, use bodies property to
        get all bodies from implicit part.
      bodyC (Body): Implicit body for math functions, use bodies property to
        get all bodies from implicit part.

    Returns:
      ImplIf: The newly created ImplIf object.
    
		"""
		pass

	def intersect(self,targets, tools, transition="SHARP", transitionValue=0.002, transitionField=None):
		"""
		The Intersection tool is used to find volumes of overlap between two or
    more implicit bodies.

    Args:
      targets (list[Body]): List of Implicit target body, use bodies property to
        get all bodies from implicit part.
      tools (list[Body]): List of Implicit tool body, use bodies property to
        get all bodies from implicit part.
      transition (str): Transition Type.
        - SHARP
        - FILLET
        - CHAMFER
      transitionValue (float | str): Transition value for boolean intersect.
      transitionField (Field): Transition field input if transitionValue is not
        provided.

    Returns:
      Intersect: The newly created Intersect object.
    
		"""
		pass

	def intersectCurve(self,targets, tools, combineCurves=False):
		"""
		Split intersecting curves or wire bodies into several curves.

  Args:
    targets (list[Part]): Parts to be intersected with tools.
    tools (list[Part]): Parts used to intersect the targets.
    combineCurves (bool): If True, combine result curves.

  Returns:
    Part: The intersect part.
  
		"""
		pass

	def intersects(self,other):
		"""
		Finds whether the two parts intersect.

    Args:
      other (Part): The 2nd part.
    Returns:
      bool: True if they intersect, False otherwise.
    
		"""
		pass

	def invert(self,body):
		"""
		The Invert tool swaps the convention of 'inside' and 'outside' for an
    implicit body by reversing the sign of all scalar values in the underlying
    field.

    Args:
      body (Body): Implicit body, use bodies property to get all bodies from
        implicit part.

    Returns:
      Invert: The newly created Invert object.
    
		"""
		pass

	@property
	def ip(self):
		pass
	@ip.setter
	def ip(self):
		pass

	def isa(self,type=None, filter=None, name=None, wildcard=None, **kwds):
		"""
		Determines if the object matches the specified settings or not.
    
    Args:
      type (Union[Part, Assembly, Contact..]): The type of the object.
      filter (method): Return value of specified callback method.
      name (str): Name that matches exactly with object name.
      wildcard (str): A pattern to match exactly with the object name.
      **kwds : Additional keyword arguments to match other attributes.

    Returns:
      bool : True, if a match is found, otherwise False.
    
		"""
		pass

	def length(self,bodyA):
		"""
		Implicit Length Vector creation.

    Args:
      bodyA (Body): Implicit body for math operation, use bodies property to
        get all bodies from implicit part.

    Returns:
      Length: The newly created Length object.
    
		"""
		pass

	def lessOrEqualTo(self,bodyA, bodyB):
		"""
		Implicit less or equal to operation.

    Args:
      bodyA (Body): Implicit body for math operation, use bodies property to
        get all bodies from implicit part.
      bodyB (Body): Implicit body for math operation, use bodies property to
        get all bodies from implicit part.

    Returns:
      LessOrEqualTo: The newly created LessOrEqualTo object.
    
		"""
		pass

	def lessThan(self,bodyA, bodyB):
		"""
		Implicit less than operation.

    Args:
      bodyA (Body): Implicit body for math operation, use bodies property to
        get all bodies from implicit part.
      bodyB (Body): Implicit body for math operation, use bodies property to
        get all bodies from implicit part.

    Returns:
      LessThan: The newly created LessThan object.
    
		"""
		pass

	def linearPattern(self,input, direction1, direction2=(0, 0, 0), bothDirection=False, spacing1="0.0", count1=3, spacing2="0.0", count2=3, instances=False, symmetry1=False, symmetry2=False, reverseDir1=False, reverseDir2=False, result="NEW_PART", mergeWithAllParts=True, mergeParts=None, copiesToSkip=None, seedOnly=False):
		"""
		Linear Pattern parts or faces along a direction.

  Args:
    input (list[Part] | list[FeatureArea]): Parts or Features to create linear
      pattern.
    direction1 (math.Vector | FeatureCurve | Axis): Direction can be a 
      reference line, edge, or axis to which the pattern will be parallel.
    direction2 (math.Vector | FeatureCurve | Axis): Direction can be a 
      reference line, edge, or axis to which the pattern will be parallel.
    bothDirection (bool): If True, sets in both direction otherwise single
      direction.
    spacing1 (float): Distance between two copies.
    count1 (int): Number of copies.
    spacing2 (float): Distance between two copies.
    count2 (int): Number of copies.
    instances (bool): If True, any changes to part or face will apply to all
      instances.
    symmetry1 (bool): Symmetry in Direction 1.
    symmetry2 (bool): Symmetry in Direction 2.
    reverseDir1 (bool): Reverse the pattern direction in Direction 1.
    reverseDir2 (bool): Reverse the pattern direction in Direction 2.
    result (str): Result type of linear pattern.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeParts.
    mergeParts (list[Part]): Parts to be merged with linear pattern.
    copiesToSkip ((dict{Part: list[tuplex,y)]}): Set copies to skip. Here x and
      y are the indices in 2D space of copy , which needs to be skipped.
    seedOnly (bool): If True, pattern the entities only along the first row and
      first column.

  Returns:
  list[Part]: List of parts created.
  
		"""
		pass

	@property
	def location(self):
		pass
	@location.setter
	def location(self):
		pass

	def makeSmooth(self,parts=None, maintainVolume=True, intensity=0.5, iterations=40):
		"""
		Smoothens parts from the selected parts with passed params.

  Args:
    parts (list[Part]): A list of parts to smooth
    maintainVolume (bool): If True part volume is targeted to be preserved.
      If false smoothening is done more aggressively every iteration
    intensity (float[0.2, 0.9]): this control how aggressive the smoothening
      operation is every iteration.
    iterations (int): The number of iterations algorithm does smoothening.
      Higher number results in smoother mesh

  
		"""
		pass

	@property
	def mass(self):
		pass
	@mass.setter
	def mass(self):
		pass

	@property
	def material(self):
		pass
	@material.setter
	def material(self):
		pass

	def max(self,bodyA, bodyB=None):
		"""
		Implicit min operation.

    Args:
      bodyA (Body): Implicit body for math functions, use bodies property to
        get all bodies from implicit part.
      bodyB (Body): Implicit body for math functions, use bodies property to
        get all bodies from implicit part.

    Returns:
      Max: The newly created Max object.
    
		"""
		pass

	@property
	def maxFreq(self):
		pass
	@maxFreq.setter
	def maxFreq(self):
		pass

	@property
	def maxMeshSize(self):
		pass
	@maxMeshSize.setter
	def maxMeshSize(self):
		pass

	@property
	def maxThickness(self):
		pass
	@maxThickness.setter
	def maxThickness(self):
		pass

	def meshInfo(self):
		pass

	def midSurface(self,part, surfaceOptions="Mid"):
		"""
		Extracts a midsurface or side faces from thin solids, and determine where
  surfaces are represented.
    
  Replacing parts with midsurfaces yields better results while increasing 
  speed when running an analysis or optimization.

  Args:
    part (Part): The part which needs midsurface extraction.
    surfaceOptions (str): This options allows you to extract the Mid, Left or Right
      surface of the part.
  
		"""
		pass

	def min(self,bodyA, bodyB=None):
		"""
		Implicit min operation.

    Args:
      bodyA (Body): Implicit body for math functions, use bodies property to
        get all bodies from implicit part.
      bodyB (Body): Implicit body for math functions, use bodies property to
        get all bodies from implicit part.

    Returns:
      Min: The newly created Min object.
    
		"""
		pass

	@property
	def minBoundingBox(self):
		pass
	@minBoundingBox.setter
	def minBoundingBox(self):
		pass

	@property
	def minGap(self):
		pass
	@minGap.setter
	def minGap(self):
		pass

	@property
	def minMeshSize(self):
		pass
	@minMeshSize.setter
	def minMeshSize(self):
		pass

	@property
	def minThickness(self):
		pass
	@minThickness.setter
	def minThickness(self):
		pass

	def mirror(self,entity, planeOrigin=None, planeNormal=None, keep=True):
		"""
		Mirrors part across a symmetry plane.

  If entity is a Part, the planeOrigin and planeNormal need to be passed

  Args:
    entity (Part | FeaturePlanar): Part from which a mirror part needs to be created
      or a Planar feature which needs to be mirrored across the plane
    planeOrigin (math.Point): The origin of the symmetry plane.
    planeNormal (math.Vector): The normal of the symmetry plane.
    keep (bool): If True it keeps the original part, if False it removes it.

  Returns:
    Part: New mirrored part created.
  
		"""
		pass

	def mod(self,bodyA, bodyB):
		"""
		Implicit Mod operation.

    Args:
      bodyA (Body): Implicit body for math operation, use bodies property to
        get all bodies from implicit part.
      bodyB (Body): Implicit body for math operation, use bodies property to
        get all bodies from implicit part.

    Returns:
      Mod: The newly created Mod object.
    
		"""
		pass

	@property
	def modeType(self):
		pass
	@modeType.setter
	def modeType(self):
		pass

	def modelPositions(self):
		"""
		Forces all objects to return the original model positions instead of the
    current analysis positions.

    Useful when defining draw methods on GeneralObjects where behaviour is 
    different while animating.
    
		"""
		pass

	@property
	def modifiable(self):
		pass
	@modifiable.setter
	def modifiable(self):
		pass

	def morph(self,bodyA, bodyB, morphValue=0.5, morphValueField=None):
		"""
		The Morph tool performs a morphing operation between two implicit
    bodies.

    Args:
      bodyA (Body): Implicit body, use bodies property to get all bodies from
        implicit part.
      bodyB (Body): Implicit body, use bodies property to get all bodies from
        implicit part.
      morphValue (float | str): The Morph Amount should lie between 0 and 100
        and this controls the percentage of the morphing operation between
        Bodies A and B. A Morph Value of 0 would result in a perfect copy of the
        Body A, and a Morph amount of 100 would result in a perfect copy of the
        Body B.
      morphValueField (Field): The Morph Amount field input, if morphValue is
        not provided.

    Returns:
      Morph: The newly created Morph object.
    
		"""
		pass

	@property
	def morphable(self):
		pass
	@morphable.setter
	def morphable(self):
		pass

	@property
	def motionContactResolution(self):
		pass
	@motionContactResolution.setter
	def motionContactResolution(self):
		pass

	@property
	def movable(self):
		pass
	@movable.setter
	def movable(self):
		pass

	def move(self,part, position):
		"""
		Translates and/or rotates a part. 

  Args:
    part (Part): The part to move.
    position (math.Matrix44): The position to move the part at.
  
		"""
		pass

	def moveBodies(self,body, position):
		"""
		The Move Bodies tool is used to transform implicit bodies in terms of
    their position and orientation in space.

    Args:
      body (Body): Implicit body, use bodies property to get all bodies from
        implicit part.
      position (math.Matrix44): Position for the body to move.

    
		"""
		pass

	def multiply(self,bodyA, bodyB):
		"""
		Implicit Multiply operation.

    Args:
      bodyA (Body): Implicit body for math operation, use bodies property to
        get all bodies from implicit part.
      bodyB (Body): Implicit body for math operation, use bodies property to
        get all bodies from implicit part.

    Returns:
      Multiply: The newly created Multiply object.
    
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	def normalize(self,bodyA):
		"""
		Implicit Normalize Vector creation.

    Args:
      bodyA (Body): Implicit body for math operation, use bodies property to
        get all bodies from implicit part.

    Returns:
      Normalize: The newly created Normalize object.
    
		"""
		pass

	@property
	def numModes(self):
		pass
	@numModes.setter
	def numModes(self):
		pass

	def offset(self,body, direction="OUTWARD", outwardOffset=0.01, outwardOffsetField=None, inwardOffset=0.01, inwardOffsetField=None, shell=False):
		"""
		The Offset tool can be used to inwardly (negative) or outwardly
    (positive) offset the surface of an implicit body. The surface always moves
    in a direction that is normal to the original surface.

    Args:
      body (Body): Implicit body, use bodies property to get all bodies from
        implicit part.
      direction(str): Direction for offset.
        - OUTWARD
        - INWARD
        - BOTH
        - SYMMETRY
        BOTH and SYMMETRY are valid only if shell is True.
      outwardOffset (float | str): Outward Offset value for implicit body.
      outwardOffsetField (Field): Outward offset field input, if outwardOffset
        is not provided.
      inwardOffset (float | str): Inward Offset value for implicit body.
      inwardOffsetField (Field): Inward offset field input, if inwardOffset
        is not provided.
      shell (True): If True, create a shell for implicit body otherwise not.

    Returns:
      Offset: The newly created Offset object.
    
		"""
		pass

	@property
	def orderType(self):
		pass
	@orderType.setter
	def orderType(self):
		pass

	@property
	def parent(self):
		pass
	@parent.setter
	def parent(self):
		pass

	def patternAlongPath(self,input, path, count=3, equalSpacing=False, spacing=0.01, instances=False, method="TRANSFORM", orientation="MAINTAIN_SEED_ORIENTATION", pathReverse=False, result="NEW_PART", mergeWithAllParts=True, mergeParts=None, copiesToSkip=None):
		"""
		Pattern parts or faces along curve.

   Args:
    input (list[Part] | list[FeatureArea]): Parts or Features to create pattern
      along the curve.
    path (list[FeatureCurve]): Path for pattern.
    count (int): Number of copies.
    equalSpacing (bool): If True, equally space the copies.
    spacing (float): Distance between two copies.
    instances (bool): If True, any changes to part or face will apply to all instances.
    method (str): Pattern method.
      - TRANSFORM
      - OFFSET
    orientation (str): Pattern Orientation.
      - TANGENT_TO_CURVE
      - MAINTAIN_SEED_ORIENTATION
    pathReverse (bool): Reverse the path of pattern.
    result (str): Result type of pattern along path.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeParts.
    mergeParts (list[Part]): Parts to be merged with pattern along path.
    copiesToSkip (dict{Part: list[indicesToSkip]}): Set copies to skip. It's
      basically a dictionary which contains Part as a key and list of indices to
      skip as values.

  Returns:
  list[Part | Feature]: List of parts/features created.
  
		"""
		pass

	def pi(self):
		"""
		Implicit pi.

    Returns:
      Pi: The newly created Pi object.
    
		"""
		pass

	def planarLattice(self,body, unitCellType="HEXAGON", solidRegion=False, coordinateSystemType="CARTESIAN", localOriginX="0", localOriginY="0", localOriginZ="0", localOrigin=None, thickness=0.005, thicknessField=None, unitCellSize=False, uniform=True, unitCellSizeX=4, unitCellSizeXField=None, unitCellSizeY=4, unitCellSizeYField=None, planeVectorX="0", planeVectorY="0", planeVectorZ=1, shell=False, combine=False, shellDirection="OUTWARD", shellThicknessIn=0.1, shellThicknessInField=None, shellThicknessOut=0.1, shellThicknessOutField=None, trimmingBody=None, combineBody=None, transition="SHARP", distance=0.01, distanceField=None):
		"""
		Planar lattices are 2.5 dimensional cellular structures, with a clearly
    defined 2D cross-section that is drawn or extruded along the third
    dimension. A popular example is a honeycomb structure.

    Args:
      body (Body): Implicit body, use bodies property to get all bodies from
        implicit part.
      unitCellType (str): UnitCellType for planar lattice.
        - HEXAGON
        - DIAMOND
        - RECTANGLE
        - TRIANGLE
        - ISOGRID
        - CIRCLE
      coordinateSystemType (str): Planar Lattice Layout.
        - CARTESIAN
        - CYLINDRICAL
        - SPHERICAL
      solidRegion (bool): if True, solid region of planar is inverted otherwise
        regular.
      localOriginX (float | str): Local origin x direction value for planar
        lattice.
      localOriginY (float | str): Local origin y direction value for planar
        lattice.
      localOriginZ (float | str): Local origin z direction value for planar
        lattice.
      localOrigin (math.Matrix44): Local origin for the planar lattice.
      thickness (float | str): Cell thickness of planar lattice.
      thicknessField (Field): Thickness field input, if thickness is not
        provided.
      unitCellSize (bool): If True, Unit cell size will be Absolute
        otherwise Cell Count.
      uniform (bool): If True, Unit cell will be uniform otherwise not.
      unitCellSizeX (float | str): Unit cell size value in X direction.
      unitCellSizeXField (Field): Unit cell size field in X direction, if
        unitCellSizeX is not provided.
      unitCellSizeY (float | str): Unit cell size value in Y direction.
      unitCellSizeYField (Field): Unit cell size field in Y direction, if
        unitCellSizeY is not provided.
      planeVectorX (float | str): Plane vector value in X direction.
      planeVectorY (float | str): Plane vector value in Y direction.
      planeVectorZ (float | str): Plane vector value in Z direction.
      shell (bool): It's a outer body option. If True, outer body of planar
        lattice will be shell otherwise not.
      combine (bool): It's a outer body option. If True, outer body of planar
        lattice will be combine otherwise not. At a time only one option can be
        true among combine and shell option.
      shellDirection (str): Shell Direction.
        - OUTWARD
        - INWARD
        - BOTH
        - SYMMETRY
      shellThicknessIn (float | str): Shell thickness inward for outer body of
        planar lattice.
      shellThicknessInField (Field): Shell inward thickness field input, if
        shellThicknessIn is not provided.
      shellThicknessOut(float | str): Shell thickness outward for outer body of
        planar lattice.
      shellThicknessOutField (Field): Shell outward thickness field input, if
        shellThicknessOut is not provided.
      trimmingBody (Body): Trim implicit body for planar lattice.
      combineBody (Body): Combine implicit body for planar lattice.
      transition (str): Transition type for outer body options.
        - SHARP
        - FILLET
        - CHAMFER
      distance (float | str): Distance for outer body options.
      distanceField (Field): Distance field input, if distance is not provided.

    Returns:
      PlanarLattice: The newly created PlanarLattice object.
    
		"""
		pass

	def pointCloud(self,points, weights, interpolation="INVERSE_DISTANCE", exponent=2):
		"""
		Create a custom implicit field or geometry from a set of points with
    scalar values attached to them.

    Args:
      points (list[math.Point]): A list of positional coordinates contained
        within the point cloud.
      weights(list[Float]): A list of scalar values associated with each point.
        A surface is created at the boundary between positive and negative
        regions.
      interpolation (str): Interpolation Type.
        - INVERSE_DISTANCE (Smooth gradient of values between the points)
        - NEAREST_NEIGHBOURS (The value in the field will correspond to the
            value associated with the closest point. This creates hard
            boundaries similar to Voronoi cells).
      exponent (float): The exponent used for the inverse distance interpolation
       1 / (Distance^Exponent). A larger value will produce a gentler gradient
       between points.

    Returns:
      PointCloud: The newly created PointCloud object.

    
		"""
		pass

	def pointEdgeSet(self,body, pointsGenerationMethod="UNIFORM_RANDOM", containment=True, seed="0", pointCount=200, minSpacing=0.02, minSpacingField=None, pointSet=None, edgesGenerationMethod="VALENCE", valence=4.0, valenceField=None, edgeSet=None):
		"""
		A point-edge set is a graph comprising points that are (optionally)
    connected by edges. Point-edge sets can be thickened into strut lattices.

    Args:
      body (Body): Implicit body, use bodies property to get all bodies from
        implicit part.
      pointsGenerationMethod (str): Points Generation Method.
        - UNIFORM_RANDOM
        - MIN_SPACING
        - IMPORT
      containment (bool): If true, containment is 'Body' otherwise 'Bound'.
      seed (float | str): Seed value for point set.
      pointCount (int | str): Number of point for 'UNIFORM RANDOM' method in point set.
      minSpacing (float | str): Minimum spacing for 'MIN SPACING' method in point set.
      minSpacingField (Field): Minimum spacing field input, if
        minSpacingField is not provided.
      pointSet (list[math.Point]): A list of positional coordinates contained
        within the point set.
      edgesGenerationMethod (str): Edges Generation Method.
        - POINT_CLOUD
        - VALENCE
        - DELAUNAY
        - IMPORT
      valence (float | str): Valence value for edge set.
      valenceField (Field): Valence field input, if valenceField is not provided.
      edgeSet (list[int]): A list of positional coordinates contained
        within the point set.

    Returns:
      PointEdgeSet: The newly created PointEdgeSet object.
    
		"""
		pass

	@property
	def position(self):
		pass
	@position.setter
	def position(self):
		pass

	def power(self,bodyA, bodyB):
		"""
		Implicit Power operation.

    Args:
      bodyA (Body): Implicit body for math operation, use bodies property to
        get all bodies from implicit part.
      bodyB (Body): Implicit body for math operation, use bodies property to
        get all bodies from implicit part.

    Returns:
      Power: The newly created Power object.
    
		"""
		pass

	def projectAndSplit(self,targets, tools, direction, trim=True, keepType="EXTERIOR", vectorDirection=None, extendProjection=True, trimExtents="THROUGH_ALL", extractProjection=False, surfaceNormal=None, resultAsSurface=False):
		"""
		Formerly known as projectAndSplit. It removes part of a surface or solid by
  projecting a profile curve on to it. OR use a set of tool surfaces to split a
  set of target surfaces.

  Args:
    targets (list[Part] | list[Feature]): List of Parts or features on which
      feature projection to be.
    tools (list[Feature]): Feature that needs to be projected on Part.
    direction (str): Valid values are: TOOL_NORMAL, X, Y, Z,
      VECTOR and CLOSEST_POINT, SURFACE_NORMAL.
    trim (bool): If True, operation type is trim otherwise split.
    keepType (str): Output to keep. Only valid for split.
      - EXTERIOR
      - INTERIOR
      - BOTH
    vectorDirection (FeatureLinear | System): Vector direction, only applicable
      when direction is 'VECTOR'.
    extendProjection (bool): If True, extends the projection.
    trimExtents (str): Trim extents, Only valid for Trim operation.
      - THROUGH_ALL
      - DIRECTION_1
      - DIRECTION_2
    extractProjection (bool): If True, extract projection without split. Valid
      only for split operation
    surfaceNormal (FeaturePlanar): Planar surface along whose normal you want
     to project the tools.
    resultAsSurface (bool): If True, Force output result being a sheet by
      removing faces on the solid target obtained by cut. Valid only for trim
      operation.

  Returns:
  list[Part]: List of parts created.
  
		"""
		pass

	def remap(self,body):
		"""
		Remap is a general field of scalar values into a signed distance field.
    After a remap, each position in the field will have a scalar value that is
    the signed distance to the closest point on the object being modelled
    (surface, point, line, etc.). Negative field values are on the inside of the
    model and positive field values are on the outside.

    Args:
      body (Body): Implicit body, use bodies property to get all bodies from
        implicit part.

    Returns:
      Remap: The newly created Remap object.
    
		"""
		pass

	def removeIsland(self,part):
		"""
		Finds small disconnected regions of a mesh part and delete them.

  Args:
    part (Part): Part having island.
  
		"""
		pass

	def removeSmooth(self,parts=None):
		"""
		
  Removes any existing smoothening from passed parts

  Args:
    parts (list[Part]): A list of parts to removing smooothing from.

  
		"""
		pass

	def replaceFromFile(self,part, filePath):
		"""
		Replace part with the contents of a file.

  Args:
    part (Part): The part to be replaced.
    filePath (str): The path to the file whose contents will replace the part.
  
		"""
		pass

	def replaceFromPart(self,part, toolPart, keepToolPart=False):
		"""
		Replace part with tool part.

  Args:
    part (Part): The part to be replaced.
    toolPart (Part): The part to replace with.
    keepToolPart (bool): Determines whether to keep the toolPart or not after replace.
  
		"""
		pass

	@property
	def representations(self):
		pass
	@representations.setter
	def representations(self):
		pass

	def rib(self,sketch, targetPart, ribThickness=0.01, flipMaterialDirection=False, offsetDirection="MID", ribDirection="NORMAL", draftAngle="0", reverseDraftDirection=False, extensionType="LINEAR"):
		"""
		Extrude rib geometry from a sketch to stiffen your model.

  Args:
    sketch (Part): Sketch profile for rib tool.
    targetPart (Part): Target part on which rib tool will be created.
    ribThickness (bool): Rib thickness.
    flipMaterialDirection (bool): If True, flip the material direction of rib
     tool otherwise not.
    offsetDirection (str): Offset direction type.
     - LEFT
     - MID
     - RIGHT
    ribDirection (str): Rib direction type.
     - NORMAL
     - PARALLEL
    draftAngle (float): Draft angle for rib creation in degree.
    reverseDraftDirection (bool): If True, reverse the draftAngle direction
     otherwise not.
    extensionType (str): Rib extension type.
     - LINEAR
     - NATURAL
  
		"""
		pass

	@property
	def rigid(self):
		pass
	@rigid.setter
	def rigid(self):
		pass

	@property
	def rigidGroup(self):
		pass
	@rigidGroup.setter
	def rigidGroup(self):
		pass

	def rotate(self,part, axis, angle, degrees=True):
		"""
		Rotates a part around the specified axis.

  This is a body rotation.

  Args:
    part (Part): The part to rotate.
    axis (Vector | str): The rotation axis. 
      If axis a string, valid choices are "x", "y", "z".
    angle (float): The rotation angle.
    degrees (bool): If True, angle is considered in degrees, if False in radians.

  
		"""
		pass

	@property
	def rotations(self):
		pass
	@rotations.setter
	def rotations(self):
		pass

	def save(self,file):
		"""
		Save the Part in the specified file.

    Args:
      file (str) : File name and path, where the file needs to be saved.
        Valid file extensions are:
          '.x_b', '.x_t', '.xmt_bin', '.xmt_txt', '.sat', '.sab', '.iges', '.igs',
          '.stl', '.step', '.stp', '.obj', '.vrml', '.vrl'.
    
		"""
		pass

	def scale(self,bodyA, bodyB):
		"""
		Implicit Scale Vector creation.

    Args:
      bodyA (Body): Implicit body for math operation, use bodies property to
        get all bodies from implicit part.
      bodyB (Body): Implicit body for math operation, use bodies property to
        get all bodies from implicit part.

    Returns:
      Scale: The newly created Scale object.
    
		"""
		pass

	def setValue(self,attr, value):
		"""
		Alias for setattr (attr, value)
    Args:
      attr (str): Attribute name to sets its value.
      value (str): Attribute value to set .
    
		"""
		pass

	def setValues(self,**kwds):
		"""
		Sets passed name/value pairs.
    
    Values are set in a standard order (the order the attribute is defined
    on the class) which is required in certain cases when an attribute's
    setter expects another attribute to have already been set.
    For example, setting a reference before a location that is wrt it.
    
    Args:
      **kwds: Set attributes in one go.
    
		"""
		pass

	@property
	def sheetThickness(self):
		pass
	@sheetThickness.setter
	def sheetThickness(self):
		pass

	def shrinkWrap(self,parts=None, voxelSize=-1, merge=True, sharpen=False):
		"""
		Creates a new part/parts from the selected parts with a single isosurface

  The shrinkwrap is useful when you want to merge optimized results with 
  non-design-space regions. 

  You would do this so you can fit a single PolyNURBS over the entire model.
  By default, the selected parts are merged into a single part. 
  This option can be disabled by setting merge to False.

  Args:
    parts (list[Part]): A list of parts to be shrink wrapped.
    voxelSize (float): Size of each voxel of the shrink wrapped part. Size
      value should be in the range 0 to 1 Defaults to -1 to auto compute the
      voxel dimension of the part.
    merge (bool): Merge the shrink wrapped parts into single or multiple parts.
    sharpen (bool): If set to True, then sharpen the edges of the new shrink
      wrapped part.

  Returns:
    Part: Returns a new shrink wrapped part
  
		"""
		pass

	def sign(self,bodyA):
		"""
		Implicit sign operation.

    Args:
      bodyA (Body): Implicit body for math functions, use bodies property to
        get all bodies from implicit part.

    Returns:
      Sign: The newly created Sign object.
    
		"""
		pass

	def simplifyHoles(self,entity, minSize="0", maxSize=None):
		"""
		Finds and removes holes and pockets, and find raised areas such as lettering.

  Args:
    entity (Part | Assembly | Feature): Part/Assembly from which you want to 
      remove the holes from or FeatureCircular which needs to be removed.
    minSize (float): Minimum size of hole.
    maxSize (float): Maximum size of hole.
  
		"""
		pass

	def simplifyImprints(self,entity):
		"""
		Finds and removes imprints from a part.

  An imprint is an edge or a point that appears on a surface that can be removed
  without changing the underlying integrity of the surface, such as scratches or
  trimmed points.

  Args:
    entity (Part | Assembly | FeatureLinear): Part/Assembly from which you want to
      remove the imprints from or FeatureLinear imprint to be removed.
  
		"""
		pass

	def simplifyPlugs(self,entity, minSize="0", maxSize=None):
		"""
		Finds holes and pockets, and plug them by filling the area with a new part

  Args:
    entity (Part | Assembly | Feature): Part/Assembly from which you want to plug 
      the holes or a Circular feature that needs to be plugged.
    minSize (float): Minimum size of plug.
    maxSize (float): Maximum size of plug.
  
		"""
		pass

	def simplifyRounds(self,entity, roundType="ALL", minSize="0", maxSize=None):
		"""
		Finds and removes both round (convex) and fillet (concave) surfaces.

  Args:
    entity (Part | Assembly | Feature): Part/Assembly from which you want to 
      remove the fillets, chamfers from or a Feature to be removed.
    roundType (str): Valid values are: ROUNDS, FILLETS, CHAMFERS and ALL.
    minSize (float): Minimum size of round.
    maxSize (float): Maximum size of round.
  
		"""
		pass

	def sin(self,bodyA):
		"""
		Implicit Trigonometry Sin operation.

    Args:
      bodyA (Body): Implicit body for math functions, use bodies property to
        get all bodies from implicit part.

    Returns:
      Sin: The newly created Sin object.
    
		"""
		pass

	def slice(self,targets, cutOrigin=None, cutNormal=None, surfaceFeature=None, extendSurface=True):
		"""
		Slices a set of solid objects with a cutting plane or cutting surface.

  You must provide cutOrigin and cutNormal or surfaceFeature.

  Args:
    targets (list[Part]): The parts to slice across the cutting plane.
    cutOrigin (math.Point): The origin of the cutting plane.
    cutNormal (math.Vector): The normal of the cutting plane.
    surfaceFeature (FeatureArea): The surface to slice the enity accross.
    extendSurface (bool): Set Automatic extension On/Off for tool Surface.

  Returns:
    Part: The new sliced part created.
  
		"""
		pass

	def smooth(self,body, type="GAUSSIAN", width=1, iterations=1, strength=100):
		"""
		The Smooth tool is used to reduce the size of, or remove, unwanted small
    and/or sharp features in an implicit body. It is analogous to �blurring� in
    digital image processing. It operates by moving a window through the
    underlying field, performing filtering operations on the field values that
    fall within the window. Example smoothing filters include Mean, Median,
    Gaussian and Laplacian. Each of these have relative pros and cons, giving
    different smoothing effects.

    Args:
      body (Body): Implicit body, use bodies property to get all bodies from
        implicit part.
      type (str): Smoothing type.
        - GAUSSIAN
        - LAPLACIAN
        - MEDIAN
        - MEAN
      width (int | str): Size of the smoothing kernel.
      iterations (int | str): Number of times the smoothing kernel runs for.
      strength (float | str): Smooth strength from 0 to 100.

    Returns:
      Smooth: The newly created Smooth object.
    
		"""
		pass

	@property
	def spiders(self):
		pass
	@spiders.setter
	def spiders(self):
		pass

	def sqrt(self,bodyA):
		"""
		Implicit sqrt operation.

    Args:
      bodyA (Body): Implicit body for math functions, use bodies property to
        get all bodies from implicit part.

    Returns:
      Sqrt: The newly created Sqrt object.
    
		"""
		pass

	def step(self,bodyA, bodyB):
		"""
		Implicit step operation.

    Args:
      bodyA (Body): Implicit body for math functions, use bodies property to
        get all bodies from implicit part.
      bodyB (Body): Implicit body for math functions, use bodies property to
        get all bodies from implicit part.

    Returns:
      Step: The newly created Step object.
    
		"""
		pass

	def stochasticStrutLattice(self,body, hollow=False, solidRegion=False, strutDiameter=0.005, strutDiameterField=None, strutInnerDiameter=0.003, strutInnerDiameterField=None, shell=False, combine=False, shellDirection="OUTWARD", shellThicknessIn=0.1, shellThicknessInField=None, shellThicknessOut=0.1, shellThicknessOutField=None, trimmingBody=None, combineBody=None, transition="SHARP", distance=0.01, distanceField=None):
		"""
		Stochastic lattice is built by thickening a point-edge set, which is a
    graph of points that are connected by edges. If the points are randomly
    arranged and/or the edges between them are randomly created, this creates a
    stochastic (randomized) lattice structure.

    Args:
      body (PointEdgeSet): PointEdgeSet body, use bodies property to get all
        bodies from implicit part.
      hollow (bool): if True, Stochastic surface type will be hollow otherwise
        solid.
      solidRegion (bool): if True, solid region of strut is inverted otherwise
        regular.
      strutDiameter (float | str): Stochastic thickness of struct lattice.
      strutDiameterField (Field): Stochastic diameter field input, if strutDiameter
        is not provided.
      strutInnerDiameter (float | str): Shell thickness of strut lattice if it
        is hollow.
      strutInnerDiameterField (Field): Stochastic inner diameter field input, if
        stochastic is not provided.
      shell (bool): It's a outer body option. If True, outer body of stochastic
        lattice will be shell otherwise not.
      combine (bool): It's a outer body option. If True, outer body of stochastic
        lattice will be combine otherwise not. At a time only one option can be
        true among combine and shell option.
      shellDirection (str): Shell Direction.
        - OUTWARD
        - INWARD
        - BOTH
        - SYMMETRY
      shellThicknessIn (float | str): Shell thickness inward for outer body of
        stochastic lattice.
      shellThicknessInField (Field): Shell inward thickness field input, if
        shellThicknessIn is not provided.
      shellThicknessOut(float | str): Shell thickness outward for outer body of
        stochastic lattice.
      shellThicknessOutField (Field): Shell outward thickness field input, if
        shellThicknessOut is not provided.
      trimmingBody (Body): Trim implicit body for stochastic lattice.
      combineBody (Body): Combine implicit body for stochastic lattice.
      transition (str): Transition type for outer body options.
        - SHARP
        - FILLET
        - CHAMFER
      distance (float | str): Distance for outer body options.
      distanceField (Field): Distance field input, if distance is not provided.

    Returns:
      StochasticStrutLattice: The newly created StochasticStrutLattice object.
    
		"""
		pass

	@property
	def strainCalculation(self):
		pass
	@strainCalculation.setter
	def strainCalculation(self):
		pass

	@property
	def stressCalculation(self):
		pass
	@stressCalculation.setter
	def stressCalculation(self):
		pass

	def strutLattice(self,body, unitCellType="CORNERDIAGONAL", hollow=False, solidRegion=False, coordinateSystemType="CARTESIAN", localOriginX="0", localOriginY="0", localOriginZ="0", localOrigin=None, strutDiameter=0.005, strutDiameterField=None, strutInnerDiameter=0.003, strutInnerDiameterField=None, unitCellSize=False, uniform=True, cellSizeX=4, cellSizeY=4, cellSizeZ=4, shell=False, combine=False, shellDirection="OUTWARD", shellThicknessIn=0.1, shellThicknessInField=None, shellThicknessOut=0.1, shellThicknessOutField=None, trimmingBody=None, combineBody=None, transition="SHARP", distance=0.01, distanceField=None, unitCellName=None, nodes=None, connectivity=None):
		"""
		Strut lattices are constructed from nodes and these nodes are connected
    by beams. Typically, there is a base unit cell that is tiled/patterned in
    one, two, or three dimensions to form the overall lattices structure. A
    popular example is the Body Centred Cubic lattice.

    Args:
      body (Body): Implicit body, use bodies property to get all bodies from
        implicit part.
      unitCellType (str): UnitCellType for strut lattice.
        - CORNERDIAGONAL
        - FACECENTRE
        - FACEDIAGONAL
        - FACEEDGE
        - OCTAGON
        - HEXTRUSS
        - TETRAKAIDECAHEDRONEDGE
        - CUSTOM_UNIT_CELL
      hollow (bool): if True, Strut surface type will be hollow otherwise
        solid.
      solidRegion (bool): if True, solid region of strut is inverted otherwise
        regular.
      coordinateSystemType (str): Strut Lattice Layout.
        - CARTESIAN
        - CYLINDRICAL
        - SPHERICAL
      localOriginX (float | str): Local origin x direction value for strut
        lattice.
      localOriginY (float | str): Local origin y direction value for strut
        lattice.
      localOriginZ (float | str): Local origin z direction value for strut
        lattice.
      localOrigin (math.Matrix44): Local origin for the strut lattice.
      strutDiameter (float | str): Strut thickness of struct lattice.
      strutDiameterField (Field): Strut diameter field input, if strutDiameter
        is not provided.
      strutInnerDiameter (float | str): Shell thickness of strut lattice if it
        is hollow.
      strutInnerDiameterField (Field): Strut inner diameter field input, if
        strutInnerDiameter is not provided.
      unitCellSize (bool): If True, Unit cell size will be Absolute otherwise
        Cell Count.
      uniform (bool): If True, Unit cell will be uniform otherwise not.
      cellSizeX (float | str): Cell size for strut lattice in X direction.
      cellSizeY (float | str): Cell size for strut lattice in Y direction.
      cellSizeZ (float | str): Cell size for strut lattice in Z direction.
      shell (bool): It's a outer body option. If True, outer body of strut
        lattice will be shell otherwise not.
      combine (bool): It's a outer body option. If True, outer body of strut
        lattice will be combine otherwise not. At a time only one option can be
        true among combine and shell option.
      shellDirection (str): Shell Direction.
        - OUTWARD
        - INWARD
        - BOTH
        - SYMMETRY
      shellThicknessIn (float | str): Shell thickness inward for outer body of
        strut lattice.
      shellThicknessInField (Field): Shell inward thickness field input, if
        shellThicknessIn is not provided.
      shellThicknessOut(float | str): Shell thickness outward for outer body of
        strut lattice.
      shellThicknessOutField (Field): Shell outward thickness field input, if
        shellThicknessOut is not provided.
      trimmingBody (Body): Trim implicit body for strut lattice.
      combineBody (Body): Combine implicit body for strut lattice.
      transition (str): Transition type for outer body options.
        - SHARP
        - FILLET
        - CHAMFER
      distance (float | str): Distance for outer body options.
      distanceField (Field): Distance field input, if distance is not provided.
      unitCellName (str): Name of the custom unit cell for strut lattice.
      nodes (list[math.Point]): Node list of the custom unit cell for strut
        lattice.
      connectivity (list[int]): Connectivity of the custom unit cell for strut
        lattice.

    Returns:
      StrutLattice: The newly created StrutLattice object.
    
		"""
		pass

	def subtract(self,bodyA, bodyB):
		"""
		Implicit Subtract operation.

    Args:
      bodyA (Body): Implicit body for math operation, use bodies property to
        get all bodies from implicit part.
      bodyB (Body): Implicit body for math operation, use bodies property to
        get all bodies from implicit part.

    Returns:
      Subtract: The newly created Subtract object.
    
		"""
		pass

	def surfaceLattice(self,body, unitCellType="GYROID", surfaceType=True, solidRegion=False, coordinateSystemType="CARTESIAN", localOriginX="0", localOriginY="0", localOriginZ="0", localOrigin=None, density=0.5, densityField=None, bias=0.5, unitCellSize=False, uniform=True, cellSizeX=4, cellSizeXField=None, cellSizeY=4, cellSizeYField=None, cellSizeZ=4, cellSizeZField=None, shell=False, combine=False, shellDirection="OUTWARD", shellThicknessIn=0.1, shellThicknessInField=None, shellThicknessOut=0.1, shellThicknessOutField=None, trimmingBody=None, combineBody=None, transition="SHARP", distance=0.01, distanceField=None):
		"""
		Surface lattices are cellular structures constructed from one or
    sometimes two surfaces. Rather than tiling/patterning a base unit cell, the
    natural repetition of the surfaces creates a lattice-like structure
    automatically. Popular examples are Triply Periodic Minimal Surfaces (TPMS),
    such as the Gyroid.

    Args:
      body (Body): Implicit body, use bodies property to get all bodies from
        implicit part.
      unitCellType (str): Surface type for surface lattice.
        - GYROID
        - SCHWARZ_P
        - SCHWARZ_D
        - NEOVIUS
        - LIDINOID
        - FISCHER_KOCH_S
        - FISCHER_KOCH_Cs
        - FISCHER_KOCH_Y
        - FISCHER_KOCH_Cy
        - FRD
        - IWP
        - SPLIT_P
        - KARCHER_K
        - G_PRIME
      surfaceType (bool): If True, Surface type will be Single otherwise Double.
      solidRegion (bool): if True, solid region of surface is inverted otherwise
        regular.
      coordinateSystemType (str): Surface Lattice Layout.
        - CARTESIAN
        - CYLINDRICAL
        - SPHERICAL
      localOriginX (float | str): Local origin x direction value for surface
        lattice.
      localOriginY (float | str): Local origin y direction value for surface
        lattice.
      localOriginZ (float | str): Local origin z direction value for surface
        lattice.
      localOrigin (math.Matrix44): Local origin for the surface lattice.
      density (float | str): Density for surface lattice. Value range from
        0 to 100.
      densityField (Field): Density field input, if density is not provided.
      bias (float | str): Bias for surface lattice. Applicable only when
        surfaceType
        is Double.
      unitCellSize (bool): If True, Unit cell size will be Absolute otherwise
        Cell Count.
      uniform (bool): If True, Unit cell will be uniform otherwise not.
      cellSizeX (float | str): Cell size for surface lattice in X direction.
      cellSizeXField (Field): Cell size field input, if cellSizeX not provided.
      cellSizeY (float | str): Cell size for surface lattice in Y direction.
      cellSizeYField (Field): Cell size field input, if cellSizeY not provided.
      cellSizeZ (float | str): Cell size for surface lattice in Z direction.
      cellSizeZField (Field): Cell size field input, if cellSizeZ not provided.
      shell (bool): It's a outer body option. If True, outer body of surface
        lattice will be shell otherwise not.
      combine (bool): It's a outer body option. If True, outer body of surface
        lattice will be combine otherwise not. At a time only one option can be
        true among combine and shell option.
      shellDirection (str): Shell Direction.
        - OUTWARD
        - INWARD
        - BOTH
        - SYMMETRY
      shellThicknessIn (float | str): Shell thickness inward for outer body of
        surface
        lattice.
      shellThicknessInField (Field): Shell inward thickness field input, if
        shellThicknessIn is not provided.
      shellThicknessOut(float | str): Shell thickness outward for outer body of
        surface lattice.
      shellThicknessOutField (Field): Shell outward thickness field input, if
        shellThicknessOut is not provided.
      trimmingBody (Body): Trim implicit body for surface lattice.
      combineBody (Body): Combine implicit body for surface lattice.
      transition (str): Transition type for outer body options.
        - SHARP
        - FILLET
        - CHAMFER
      distance (float | str): Distance for outer body options.
      distanceField (Field): Distance field input, if distance is not provided.

    Returns:
      SurfaceLattice: The newly created SurfaceLattice object.
    
		"""
		pass

	@property
	def symmetryConstraints(self):
		pass
	@symmetryConstraints.setter
	def symmetryConstraints(self):
		pass

	def tan(self,bodyA):
		"""
		Implicit Trigonometry Tan operation.

    Args:
      bodyA (Body): Implicit body for math functions, use bodies property to
        get all bodies from implicit part.

    Returns:
      Tan: The newly created Tan object.
    
		"""
		pass

	@property
	def temperatures(self):
		pass
	@temperatures.setter
	def temperatures(self):
		pass

	def thicken(self,parts, value, symmetric=True):
		"""
		Thicken surface parts and convert them to solids, or thicken and hollow 
  solid parts.

  When used on a solid part, the Thicken tool yields a hollow solid.
  When used on a surface part, the Thicken tool yields a solid part.

  Args:
    parts (list[Part])
    value (float): Desired offset distance. Negative value means inward direction.
    symmetric (bool): If True, offsets symmetrically on both sides of the part surface.
  
		"""
		pass

	def translate(self,part, x="0", y=None, z=None):
		"""
		Translates by the specified distance.

  If y is None, x is assumed to be a list of 3 floats.

  Args:
    part (Part): The part to translate.
    x (float): The distance to translate the 'x' vector. 
    y (float): The distance to translate the 'y' vector.
    z (float): The distance to translate the 'z' vector.
  
		"""
		pass

	@property
	def transparency(self):
		pass
	@transparency.setter
	def transparency(self):
		pass

	def trimAndSplit(self,targets, tools, direction, trim=True, keepType="EXTERIOR", vectorDirection=None, extendProjection=True, trimExtents="THROUGH_ALL", extractProjection=False, surfaceNormal=None, resultAsSurface=False):
		"""
		Formerly known as projectAndSplit. It removes part of a surface or solid by
  projecting a profile curve on to it. OR use a set of tool surfaces to split a
  set of target surfaces.

  Args:
    targets (list[Part] | list[Feature]): List of Parts or features on which
      feature projection to be.
    tools (list[Feature]): Feature that needs to be projected on Part.
    direction (str): Valid values are: TOOL_NORMAL, X, Y, Z,
      VECTOR and CLOSEST_POINT, SURFACE_NORMAL.
    trim (bool): If True, operation type is trim otherwise split.
    keepType (str): Output to keep. Only valid for split.
      - EXTERIOR
      - INTERIOR
      - BOTH
    vectorDirection (FeatureLinear | System): Vector direction, only applicable
      when direction is 'VECTOR'.
    extendProjection (bool): If True, extends the projection.
    trimExtents (str): Trim extents, Only valid for Trim operation.
      - THROUGH_ALL
      - DIRECTION_1
      - DIRECTION_2
    extractProjection (bool): If True, extract projection without split. Valid
      only for split operation
    surfaceNormal (FeaturePlanar): Planar surface along whose normal you want
     to project the tools.
    resultAsSurface (bool): If True, Force output result being a sheet by
      removing faces on the solid target obtained by cut. Valid only for trim
      operation.

  Returns:
  list[Part]: List of parts created.
  
		"""
		pass

	def vectorElement(self,bodyA, index):
		"""
		Implicit vector element creation.

    Args:
      bodyA (Body): Implicit body for math operation, use bodies property to
        get all bodies from implicit part.
      index (int): The index of the vector component to be returned.

    Returns:
      VectorElement: The newly created VectorElement object.
    
		"""
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

	@property
	def visualizationQuality(self):
		pass
	@visualizationQuality.setter
	def visualizationQuality(self):
		pass

	@property
	def volume(self):
		pass
	@volume.setter
	def volume(self):
		pass

	def wasValueSet(self,attr):
		"""
		Check if attribute was set

    Args:
      attr (str): Attribute name to check it value set or not

    Returns:
      bool: True, if value was set else false.
    
		"""
		pass

	def xRef(self):
		"""
		Implicit X Reference.

    Returns:
      XRef: The newly created XRef object.
    
		"""
		pass

	def yRef(self):
		"""
		Implicit Y Reference.

    Returns:
      YRef: The newly created YRef object.
    
		"""
		pass

	def zRef(self):
		"""
		Implicit Z Reference.

    Returns:
      ZRef: The newly created ZRef object.
    
		"""
		pass

class ImplicitMathBinaryOperation:
	def __init__(self,**kwds):
		"""
Implicit math operations base class.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class ImplicitMathTernaryOperation:
	def __init__(self,**kwds):
		"""
Implicit math operations base class.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class ImplicitMathUnaryOperation:
	def __init__(self,**kwds):
		"""
Implicit math trignometry operations base class.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class Inertia:
	def __init__(self,fget=None, fset=None, doc=None, default=None, **kwds):
		"""
Inertial attributes is used to store any inertial values.

    Components of the inertia property are ixx, iyy, izz, ixy, izy, iyz.
  
"""
		pass

	def apply(self,**kwds):
		"""
		Context manager to specify Attribute constructor kwds
    Useful to avoid repeating kwds while defining a related group
    
		"""
		pass

	def castForGet(self,obj, value):
		"""
		Converts and returns the attribute value to its external type.

    Args:
      obj (GeneralObject): Object this attribute belongs to.
      value (Any): Value of the attribute to be converted.

    Returns:
      value (Any): Converted value.
    
		"""
		pass

	def castForSet(self,obj, value):
		"""
		Converts and validates the value of the attribute before setting.

      Converts the value it to its internal type (and base units if applicable).

    Args:
      obj (GeneralObject): Object this attribute belongs to.
      value (Any): Value of the attribute to set.

    Returns:
      value (Any): Validated and converted value.
    
		"""
		pass

	def classifyObject(self,obj):
		pass

	def createList(self,listAttr, obj):
		pass

	def createListList(self,listAttr, obj):
		pass

	def disable(self,obj):
		"""
		Called by GeneralObject when destroyed (or undo of a create)
		"""
		pass

	def enable(self,obj):
		"""
		Called by GeneralObject when created (or undo of a destroy)
		"""
		pass

	def getCreateArgs(self):
		"""
		Helper used in create methods
		"""
		pass

	def getDisplayName(self,obj):
		pass

	def getGuiValue(self,obj):
		"""
		Returns the formatted value, as shown in the Property Editor.
		"""
		pass

	def getInCoreValue(self,obj):
		pass

	def getReadonly(self,obj):
		pass

	def getUnits(self,obj):
		pass

	def getValue(self,obj):
		pass

	def getValueList(self,obj):
		pass

	def getValueListList(self,obj):
		pass

	def initialize(self,objCls, name):
		"""
		Initializes the attribute.

    Args:
      objCls (class): Object class this attribute belongs to.
      name (str): Name of the attribute.
    
		"""
		pass

	def loadValue(self,obj, value):
		"""
		Called by GeneralObject.loadAttributeValues during stmod deserialization
		"""
		pass

	def populateGuiValue(self,obj, prop):
		"""
		Override to customize, prop.value, displayValue, allowedValues.
    
    The prop.value type determines which editor widget used:
    - bool -> checkbox
    - str  -> line edit
    - hwtypes.Color -> color picker
    
    Setting prop.allowedValues yields a ComboBox.
    
    prop.displayValue is a str shown when the editor loses focus.
    
		"""
		pass

	def populatePropertyEditor(self,obj, prop, **kwds):
		"""
		Customize how attribute appears in Property Editor and ObjectTables.
    
    Args:
      obj (GeneralObject)
      prop (hwt::Property): Property Editor interface.
      component (int): 0, 1, 2
        Only passed when showing Triples 1 value at a time.
    
		"""
		pass

	def setInCoreValue(self,obj, value):
		pass

	def setValue(self,obj, value):
		pass

	def setValueList(self,obj, value):
		pass

	def setValueListList(self,obj, value):
		pass

	def usingUnits(self,units):
		pass

class InspireAnalysisResults:
	def __init__(self):
		pass

	@property
	def collectionType(self):
		pass
	@collectionType.setter
	def collectionType(self):
		pass

	def getResultTypeId(self,name):
		pass

	def getResultTypeName(self,id):
		pass

	@property
	def items(self):
		pass
	@items.setter
	def items(self):
		pass

	def release(self,forceUnloadPostdata=False):
		pass

	def reset(self):
		pass

	@property
	def runs(self):
		pass
	@runs.setter
	def runs(self):
		pass

class Int:
	def __init__(self,default="0", **kwds):
		"""
Store integer value
"""
		pass

	def apply(self,**kwds):
		"""
		Context manager to specify Attribute constructor kwds
    Useful to avoid repeating kwds while defining a related group
    
		"""
		pass

	def castForGet(self,obj, value):
		"""
		Converts and returns the attribute value to its external type.

    Args:
      obj (GeneralObject): Object this attribute belongs to.
      value (Any): Value of the attribute to be converted.

    Returns:
      value (Any): Converted value.
    
		"""
		pass

	def castForSet(self,obj, value):
		"""
		Converts and validates the value of the attribute before setting.

      Converts the value it to its internal type (and base units if applicable).

    Args:
      obj (GeneralObject): Object this attribute belongs to.
      value (Any): Value of the attribute to set.

    Returns:
      value (Any): Validated and converted value.
    
		"""
		pass

	def classifyObject(self,obj):
		pass

	def create(self,obj):
		pass

	def createList(self,listAttr, obj):
		pass

	def createListList(self,listAttr, obj):
		pass

	def disable(self,obj):
		"""
		Called by GeneralObject when destroyed (or undo of a create)
		"""
		pass

	def enable(self,obj):
		"""
		Called by GeneralObject when created (or undo of a destroy)
		"""
		pass

	def getCreateArgs(self):
		"""
		Helper used in create methods
		"""
		pass

	def getDisplayName(self,obj):
		pass

	def getGuiValue(self,obj):
		"""
		Returns the formatted value, as shown in the Property Editor.
		"""
		pass

	def getInCoreValue(self,obj):
		pass

	def getReadonly(self,obj):
		pass

	def getUnits(self,obj):
		pass

	def getValue(self,obj):
		pass

	def getValueList(self,obj):
		pass

	def getValueListList(self,obj):
		pass

	def initialize(self,objCls, name):
		"""
		Initializes the attribute.

    Args:
      objCls (class): Object class this attribute belongs to.
      name (str): Name of the attribute.
    
		"""
		pass

	def loadValue(self,obj, value):
		"""
		Called by GeneralObject.loadAttributeValues during stmod deserialization
		"""
		pass

	def populateGuiValue(self,obj, prop):
		"""
		Override to customize, prop.value, displayValue, allowedValues.
    
    The prop.value type determines which editor widget used:
    - bool -> checkbox
    - str  -> line edit
    - hwtypes.Color -> color picker
    
    Setting prop.allowedValues yields a ComboBox.
    
    prop.displayValue is a str shown when the editor loses focus.
    
		"""
		pass

	def populatePropertyEditor(self,obj, prop, **kwds):
		"""
		Customize how attribute appears in Property Editor and ObjectTables.
    
    Args:
      obj (GeneralObject)
      prop (hwt::Property): Property Editor interface.
      component (int): 0, 1, 2
        Only passed when showing Triples 1 value at a time.
    
		"""
		pass

	def setInCoreValue(self,obj, value):
		pass

	def setValue(self,obj, value):
		pass

	def setValueList(self,obj, value):
		pass

	def setValueListList(self,obj, value):
		pass

	def usingUnits(self,units):
		pass

class IntListImplicit:
	def __init__(self,cppName: str="",doc: str=""):
		"""
list[int]
"""
		pass

class Intersect:
	def __init__(self,**kwds):
		"""
The Intersection tool is used to find volumes of overlap between two or
  more implicit bodies.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class Invert:
	def __init__(self,**kwds):
		"""
The Invert tool swaps the convention of 'inside' and 'outside' for an
  implicit body by reversing the sign of all scalar values in the underlying
  field.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class Ip:
	def __init__(self,iterable=None):
		pass

	@property
	def eigenvalues(self):
		pass
	@eigenvalues.setter
	def eigenvalues(self):
		pass

	@property
	def isPositiveDefinite(self):
		pass
	@isPositiveDefinite.setter
	def isPositiveDefinite(self):
		pass

	@property
	def is_invalid(self):
		pass
	@is_invalid.setter
	def is_invalid(self):
		pass

class JobManager:
	def __init__(self):
		pass

	def AddServer(self,*args):
		pass

	def AddServersFromConfigFile(self,path: hwString):
		pass

	def AsConcreteListener(self):
		pass

	def AsListener(self):
		pass

	def AuthenticateServer(self,*args):
		pass

	def AuthorizeServer(self,strServerID: hwString, strUserName: hwString, strPassword: hwString):
		pass

	def Disconnect(self,sender: hwTSignal, force: bool  = False):
		pass

	def DisconnectAll(self,force: bool  = False):
		pass

	def EnsureLocalServerExists(self):
		pass

	def EnsureNativeServerExists(self):
		pass

	def GetCloudHostName(self,synth: hwfdmSynthesis):
		pass

	def GetCloudUserName(self):
		pass

	def GetCurrentServerId(self):
		pass

	def GetJobInfo(self,*args):
		pass

	def GetJobManager(self):
		pass

	def GetMessage(self,*args):
		pass

	def GetServerIds(self,servers: hwStringList):
		pass

	def GetServerLabel(self,*args):
		pass

	def GetServiceProperty(self,which: hwStringList = None):
		pass

	def IsCloudFeatureAvailable(self):
		pass

	def IsCloudMode(self):
		pass

	def IsRemoteFeatureAvailable(self):
		pass

	def IsServerAvailable(self,serverId: hwString):
		pass

	def IsServerEditable(self,*args):
		pass

	def IsServerLocal(self,*args):
		pass

	def IsServerNative(self,*args):
		pass

	def IsServerOnCloud(self,*args):
		pass

	def IsServerReady(self,*args):
		pass

	def IsServerRemote(self,*args):
		pass

	def IsSupported(self):
		pass

	def OnCurrentServerSelected(self):
		pass

	def OnServerAdded(self):
		pass

	def OnServerRemoved(self):
		pass

	def RemoveServer(self,serverId: hwString):
		pass

	def SetCurrentServer(self,serverId: hwString):
		pass

	def SetServerConfigUserFile(self,path: hwString):
		pass

	def SetServiceProperty(self,name: hwString, value: hwVariant):
		pass

	def SetSubmitParameter(self,param: hwString, value: hwVariant):
		pass

	def SubmitJob(self,*args):
		pass

	def TerminateJob(self,jobId: hwString):
		pass

	def UpdateFromServerConfigFiles(self):
		pass

	def UpdateServerAuthorization(self):
		pass

	def UpdateServersAvailability(self):
		pass

	def addServer(self,serverId, host, port=22, **kwds):
		"""
		Registers a remote server.

    Args:
      serverId (str): The unique identifier for the server.
      host (str): The name or IP address of the remote host.
      port (int): The port number on the remote host that accepts this service.
    
		"""
		pass

	def get(self):
		pass

	def removeServer(self,serverId):
		"""
		Ensures that a server configured with the given identifier is not registered.

    Args:
      serverId (str): The unique identifier for the server.
    
		"""
		pass

	@property
	def serverIds(self):
		pass
	@serverIds.setter
	def serverIds(self):
		pass

	@property
	def thisown(self):
		pass
	@thisown.setter
	def thisown(self):
		pass

	def useServer(self,serverId, username=None, password=None, parallelRun=False):
		"""
		A context manager to use for running an analysis on specified server.

    Args:
      serverId (str): The unique identifier for the server.
      username (str): The authentication name on the remote host.
      password (str): The authentication word on the remote host.
      parallelRun (bool): If True, Analysis will run in parallel.
    
		"""
		pass

class Joint:
	def __init__(self,connection=None,name: str="", **kwds):
		"""
Joint connect parts together while allowing movement at the joint location.

  Every joint has a type, such as Pin or Hinge, and state, which can be set to 
  Locked, Active, or Free.
  
"""
		pass

	def Enable(self):
		pass

	def SetAttribute(self,attr, value, *args):
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	@property
	def activeForStaticAnalysis(self):
		pass
	@activeForStaticAnalysis.setter
	def activeForStaticAnalysis(self):
		pass

	@property
	def angle(self):
		pass
	@angle.setter
	def angle(self):
		pass

	@property
	def autoCalculateAllowableForces(self):
		pass
	@autoCalculateAllowableForces.setter
	def autoCalculateAllowableForces(self):
		pass

	@property
	def autoCalculatePosition(self):
		pass
	@autoCalculatePosition.setter
	def autoCalculatePosition(self):
		pass

	@property
	def axialForce(self):
		pass
	@axialForce.setter
	def axialForce(self):
		pass

	@property
	def axialStiffness(self):
		pass
	@axialStiffness.setter
	def axialStiffness(self):
		pass

	@property
	def axis(self):
		pass
	@axis.setter
	def axis(self):
		pass

	@property
	def ballRadius(self):
		pass
	@ballRadius.setter
	def ballRadius(self):
		pass

	@property
	def behavior(self):
		pass
	@behavior.setter
	def behavior(self):
		pass

	@property
	def bendingArm(self):
		pass
	@bendingArm.setter
	def bendingArm(self):
		pass

	@property
	def bristleStiffness(self):
		pass
	@bristleStiffness.setter
	def bristleStiffness(self):
		pass

	@property
	def c(self):
		pass
	@c.setter
	def c(self):
		pass

	@property
	def calculateGeometryParams(self):
		pass
	@calculateGeometryParams.setter
	def calculateGeometryParams(self):
		pass

	@property
	def collisionType(self):
		pass
	@collisionType.setter
	def collisionType(self):
		pass

	@property
	def color(self):
		pass
	@color.setter
	def color(self):
		pass

	@property
	def connectionRadius(self):
		pass
	@connectionRadius.setter
	def connectionRadius(self):
		pass

	@property
	def contact(self):
		pass
	@contact.setter
	def contact(self):
		pass

	@property
	def contactInfo(self):
		pass
	@contactInfo.setter
	def contactInfo(self):
		pass

	@property
	def ct(self):
		pass
	@ct.setter
	def ct(self):
		pass

	@property
	def ctx(self):
		pass
	@ctx.setter
	def ctx(self):
		pass

	@property
	def cty(self):
		pass
	@cty.setter
	def cty(self):
		pass

	@property
	def ctz(self):
		pass
	@ctz.setter
	def ctz(self):
		pass

	@property
	def cx(self):
		pass
	@cx.setter
	def cx(self):
		pass

	@property
	def cy(self):
		pass
	@cy.setter
	def cy(self):
		pass

	@property
	def cz(self):
		pass
	@cz.setter
	def cz(self):
		pass

	@property
	def damping(self):
		pass
	@damping.setter
	def damping(self):
		pass

	@property
	def dampingCoefficient(self):
		pass
	@dampingCoefficient.setter
	def dampingCoefficient(self):
		pass

	def destroy(self):
		"""
		Delete the object removing it from the model.
    
    The object may come back due to an undo/redo.
    
		"""
		pass

	@property
	def direction(self):
		pass
	@direction.setter
	def direction(self):
		pass

	@property
	def dynamicCoefficient(self):
		pass
	@dynamicCoefficient.setter
	def dynamicCoefficient(self):
		pass

	@property
	def effectType(self):
		pass
	@effectType.setter
	def effectType(self):
		pass

	@property
	def enableAllowableForces(self):
		pass
	@enableAllowableForces.setter
	def enableAllowableForces(self):
		pass

	@property
	def enableFriction(self):
		pass
	@enableFriction.setter
	def enableFriction(self):
		pass

	@property
	def enableMoment(self):
		pass
	@enableMoment.setter
	def enableMoment(self):
		pass

	@property
	def enablePreload(self):
		pass
	@enablePreload.setter
	def enablePreload(self):
		pass

	@property
	def enablePretension(self):
		pass
	@enablePretension.setter
	def enablePretension(self):
		pass

	@property
	def enableReaction(self):
		pass
	@enableReaction.setter
	def enableReaction(self):
		pass

	@property
	def enableTorsional(self):
		pass
	@enableTorsional.setter
	def enableTorsional(self):
		pass

	@property
	def exponent(self):
		pass
	@exponent.setter
	def exponent(self):
		pass

	@property
	def featureLists(self):
		pass
	@featureLists.setter
	def featureLists(self):
		pass

	@property
	def features(self):
		pass
	@features.setter
	def features(self):
		pass

	@property
	def frictionArm(self):
		pass
	@frictionArm.setter
	def frictionArm(self):
		pass

	def getAllChildren(self,type=None, **kwds):
		"""
		Returns a list of all children that matches the specified type.

    Args:
      type (list[Named]): Filter to use to get the children based on object type.
      **kwds : Additional keyword arguments to match other attributes of the object.

    Returns:
      list[Union[Part, Motor, BoundaryCondition, ...]]: The list of children that satisfy the supplied filters.
    
		"""
		pass

	def getAllowedTypes(self):
		"""
		Returns a list of allowed realization types of joint.

      This is a subset of type depending on the contact.
    
		"""
		pass

	def getAllowedTypesFromKeyFeatures(self,keyFeatures):
		"""
		Return a list of valid joint types for a given keyFeatures.
       
    Args:
      keyFeatures (str):Filters the contact type based on keyFeatures.
        Refer keyFeatures property for valid list of keyFeatures.

    Returns:
      List: Allowed types for Joint.
    
		"""
		pass

	def getAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value.

    Args:
      name (str): Attribute name to find its class.
    
		"""
		pass

	def getAttributes(self,type=None, **kwds):
		"""
		Return an dict of the attributes.
    Pass type and kwds to filter by type and Attribute properties

    Args:
      type (type): Filters the attribute based on type
      **kwds : Additional kwds argument to filter attribute by its properties

    Returns:
      dict: Return an OrderedDict of the attributes
    
		"""
		pass

	def getChild(self,name=None, recursive=False, **kwds):
		"""
		Returns the child of the object which matches the specified unique name.

    Args:
      name (str): The name of the child object.
      recursive (bool):  Search all descendents.
      **kwds : Additional keyword arguments to match attributes of the object.

    Returns:
      Named: The child object which satisfies the specified filters.
    
		"""
		pass

	def getChildren(self,type=None, recursive=False, sorted=False, **kwds):
		"""
		Returns a list of children that is of the specified type.

    Args:
      type (Type[Named]): Filter objects by class.
      recursive (bool): True to get all descendent Parts and Assemblies.
      sorted (bool): Sort the children base on id.

    Returns:
      list[Named]
    
		"""
		pass

	def getClass(self,className):
		"""
		Returns the class of the object.
    
    It can be simple or qualified (with namespace). If the name is simple, we 
    prepend the cls.namespace.

    Args:
      className (Union[Part, Occurrence, Named..]) : The class name. 
     
    Returns:
      Union[Part, Occurrence, Named..] : The class for the specified className. 

    
		"""
		pass

	def getClassAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value

    Args:
      name (str): Name of the attribute
    
		"""
		pass

	def getConnectionCandidates(self,keyFeatures, holes=None, visibleOnly=True, parts=None):
		"""
		Returns a list of objects that are valid connection candidates to create a
      joint.

    Args:
      keyFeatures (str): Filters the contact type based on keyFeatures.
        Refer keyFeatures property for valid list of keyFeatures.
      holes (Holes): Holes to consider, defaults to all holes in model.
      visibleOnly (bool): Only consider contacts between visible Parts.
      parts (list[Part]): Only consider contacts between passed parts.

    Returns:
      ConnectionCandidates: All valid connection candidates from the key features.
    
		"""
		pass

	def getDefaultGraphicScale(self):
		pass

	def getDefaultPosition(self):
		pass

	def getDependents(self,recursive=False, **kwds):
		"""
		Get objects that reference this object through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getGuiAttributeNames(self):
		"""
		Return list of the attribute names that are in the gui

    Returns:
      list: Returns list of active gui attribute
    
		"""
		pass

	def getGuiValue(self,attr, **kwds):
		"""
		Get value formatted to be shown in the gui

    Args:
      attr (str): Attribute name to gets its gui value.

    Returns:
      str: Returns a string of the value with its gui units, like "5 mm/s".
    
		"""
		pass

	def getReferences(self,recursive=False, **kwds):
		"""
		Get objects this object references through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getSerializedAttributeValues(self):
		pass

	def getValue(self,attr):
		"""
		Return the attribute value for passed attribute name.
    
    Args:
      attr (String): Attribute name to gets its value.

    Returns:
      str: Returns the attribute value
    
		"""
		pass

	@property
	def graphicScale(self):
		pass
	@graphicScale.setter
	def graphicScale(self):
		pass

	@property
	def grounded(self):
		pass
	@grounded.setter
	def grounded(self):
		pass

	@property
	def hasClip(self):
		pass
	@hasClip.setter
	def hasClip(self):
		pass

	@property
	def initialOverlap(self):
		pass
	@initialOverlap.setter
	def initialOverlap(self):
		pass

	def isa(self,type=None, filter=None, name=None, wildcard=None, **kwds):
		"""
		Determines if the object matches the specified settings or not.
    
    Args:
      type (Union[Part, Assembly, Contact..]): The type of the object.
      filter (method): Return value of specified callback method.
      name (str): Name that matches exactly with object name.
      wildcard (str): A pattern to match exactly with the object name.
      **kwds : Additional keyword arguments to match other attributes.

    Returns:
      bool : True, if a match is found, otherwise False.
    
		"""
		pass

	@property
	def k(self):
		pass
	@k.setter
	def k(self):
		pass

	@property
	def keyFeatures(self):
		pass
	@keyFeatures.setter
	def keyFeatures(self):
		pass

	@property
	def kt(self):
		pass
	@kt.setter
	def kt(self):
		pass

	@property
	def ktx(self):
		pass
	@ktx.setter
	def ktx(self):
		pass

	@property
	def kty(self):
		pass
	@kty.setter
	def kty(self):
		pass

	@property
	def ktz(self):
		pass
	@ktz.setter
	def ktz(self):
		pass

	@property
	def kx(self):
		pass
	@kx.setter
	def kx(self):
		pass

	@property
	def ky(self):
		pass
	@ky.setter
	def ky(self):
		pass

	@property
	def kz(self):
		pass
	@kz.setter
	def kz(self):
		pass

	@property
	def layerDepth(self):
		pass
	@layerDepth.setter
	def layerDepth(self):
		pass

	@property
	def location(self):
		pass
	@location.setter
	def location(self):
		pass

	@property
	def material(self):
		pass
	@material.setter
	def material(self):
		pass

	def modelPositions(self):
		"""
		Forces all objects to return the original model positions instead of the
    current analysis positions.

    Useful when defining draw methods on GeneralObjects where behaviour is 
    different while animating.
    
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	@property
	def normalVelocity(self):
		pass
	@normalVelocity.setter
	def normalVelocity(self):
		pass

	@property
	def overlapDelta(self):
		pass
	@overlapDelta.setter
	def overlapDelta(self):
		pass

	@property
	def parent(self):
		pass
	@parent.setter
	def parent(self):
		pass

	@property
	def parts(self):
		pass
	@parts.setter
	def parts(self):
		pass

	@property
	def partsInHoles(self):
		pass
	@partsInHoles.setter
	def partsInHoles(self):
		pass

	@property
	def penalty(self):
		pass
	@penalty.setter
	def penalty(self):
		pass

	@property
	def penetrationDepth(self):
		pass
	@penetrationDepth.setter
	def penetrationDepth(self):
		pass

	@property
	def pinRadius(self):
		pass
	@pinRadius.setter
	def pinRadius(self):
		pass

	@property
	def position(self):
		pass
	@position.setter
	def position(self):
		pass

	@property
	def preloadForce(self):
		pass
	@preloadForce.setter
	def preloadForce(self):
		pass

	@property
	def preloadTorque(self):
		pass
	@preloadTorque.setter
	def preloadTorque(self):
		pass

	@property
	def pretensionForce(self):
		pass
	@pretensionForce.setter
	def pretensionForce(self):
		pass

	@property
	def radius(self):
		pass
	@radius.setter
	def radius(self):
		pass

	@property
	def rateType(self):
		pass
	@rateType.setter
	def rateType(self):
		pass

	@property
	def reactionArm(self):
		pass
	@reactionArm.setter
	def reactionArm(self):
		pass

	def resetGraphicScale(self):
		pass

	def resetPosition(self):
		"""
		Reset location/orientation to the default computed from geometry.
		"""
		pass

	@property
	def restitutionCoefficient(self):
		pass
	@restitutionCoefficient.setter
	def restitutionCoefficient(self):
		pass

	def setValue(self,attr, value):
		"""
		Alias for setattr (attr, value)
    Args:
      attr (str): Attribute name to sets its value.
      value (str): Attribute value to set .
    
		"""
		pass

	def setValues(self,**kwds):
		"""
		Sets attribute on name and value pairs in order of attributes defined.
		"""
		pass

	@property
	def shearForce(self):
		pass
	@shearForce.setter
	def shearForce(self):
		pass

	@property
	def shearStiffness(self):
		pass
	@shearStiffness.setter
	def shearStiffness(self):
		pass

	@property
	def solverVariables(self):
		pass
	@solverVariables.setter
	def solverVariables(self):
		pass

	@property
	def state(self):
		pass
	@state.setter
	def state(self):
		pass

	@property
	def staticCoefficient(self):
		pass
	@staticCoefficient.setter
	def staticCoefficient(self):
		pass

	@property
	def stictionTransitionVelocity(self):
		pass
	@stictionTransitionVelocity.setter
	def stictionTransitionVelocity(self):
		pass

	@property
	def stiffness(self):
		pass
	@stiffness.setter
	def stiffness(self):
		pass

	@property
	def type(self):
		pass
	@type.setter
	def type(self):
		pass

	@property
	def viscousCoefficient(self):
		pass
	@viscousCoefficient.setter
	def viscousCoefficient(self):
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

	def wasValueSet(self,attr):
		"""
		Check if attribute was set

    Args:
      attr (str): Attribute name to check it value set or not

    Returns:
      bool: True, if value was set else false.
    
		"""
		pass

class Length:
	def __init__(self,**kwds):
		"""
Implicit Length Vector creation.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class LengthMeasure:
	def __init__(self,location1, location2, **kwds):
		"""
Measures the length between two points.

  Length measure creates displacement velocity and acceleration requests
  expressed in global.

  Optionally a system can be defined on the point to point measure.
  If defined the system will be used as RM marker.
  
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	def destroy(self):
		"""
		Delete the object removing it from the model.
    
    The object may come back due to an undo/redo.
    
		"""
		pass

	@property
	def entity1(self):
		pass
	@entity1.setter
	def entity1(self):
		pass

	@property
	def entity2(self):
		pass
	@entity2.setter
	def entity2(self):
		pass

	def getAllChildren(self,type=None, **kwds):
		"""
		Returns a list of all children that matches the specified type.

    Args:
      type (list[Named]): Filter to use to get the children based on object type.
      **kwds : Additional keyword arguments to match other attributes of the object.

    Returns:
      list[Union[Part, Motor, BoundaryCondition, ...]]: The list of children that satisfy the supplied filters.
    
		"""
		pass

	def getAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value.

    Args:
      name (str): Attribute name to find its class.
    
		"""
		pass

	def getAttributes(self,type=None, **kwds):
		"""
		Return an dict of the attributes.
    Pass type and kwds to filter by type and Attribute properties

    Args:
      type (type): Filters the attribute based on type
      **kwds : Additional kwds argument to filter attribute by its properties

    Returns:
      dict: Return an OrderedDict of the attributes
    
		"""
		pass

	def getChild(self,name=None, recursive=False, **kwds):
		"""
		Returns the child of the object which matches the specified unique name.

    Args:
      name (str): The name of the child object.
      recursive (bool):  Search all descendents.
      **kwds : Additional keyword arguments to match attributes of the object.

    Returns:
      Named: The child object which satisfies the specified filters.
    
		"""
		pass

	def getChildren(self,type=None, recursive=False, sorted=False, **kwds):
		"""
		Returns a list of children that is of the specified type.

    Args:
      type (Type[Named]): Filter objects by class.
      recursive (bool): True to get all descendent Parts and Assemblies.
      sorted (bool): Sort the children base on id.

    Returns:
      list[Named]
    
		"""
		pass

	def getClass(self,className):
		"""
		Returns the class of the object.
    
    It can be simple or qualified (with namespace). If the name is simple, we 
    prepend the cls.namespace.

    Args:
      className (Union[Part, Occurrence, Named..]) : The class name. 
     
    Returns:
      Union[Part, Occurrence, Named..] : The class for the specified className. 

    
		"""
		pass

	def getClassAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value

    Args:
      name (str): Name of the attribute
    
		"""
		pass

	def getDependents(self,recursive=False, **kwds):
		"""
		Get objects that reference this object through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getGuiAttributeNames(self):
		"""
		Return list of the attribute names that are in the gui

    Returns:
      list: Returns list of active gui attribute
    
		"""
		pass

	def getGuiValue(self,attr, **kwds):
		"""
		Get value formatted to be shown in the gui

    Args:
      attr (str): Attribute name to gets its gui value.

    Returns:
      str: Returns a string of the value with its gui units, like "5 mm/s".
    
		"""
		pass

	def getReferences(self,recursive=False, **kwds):
		"""
		Get objects this object references through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getSerializedAttributeValues(self):
		pass

	def getValue(self,attr):
		"""
		Return the attribute value for passed attribute name.
    
    Args:
      attr (String): Attribute name to gets its value.

    Returns:
      str: Returns the attribute value
    
		"""
		pass

	def isa(self,type=None, filter=None, name=None, wildcard=None, **kwds):
		"""
		Determines if the object matches the specified settings or not.
    
    Args:
      type (Union[Part, Assembly, Contact..]): The type of the object.
      filter (method): Return value of specified callback method.
      name (str): Name that matches exactly with object name.
      wildcard (str): A pattern to match exactly with the object name.
      **kwds : Additional keyword arguments to match other attributes.

    Returns:
      bool : True, if a match is found, otherwise False.
    
		"""
		pass

	@property
	def length(self):
		pass
	@length.setter
	def length(self):
		pass

	@property
	def location(self):
		pass
	@location.setter
	def location(self):
		pass

	@property
	def location1(self):
		pass
	@location1.setter
	def location1(self):
		pass

	@property
	def location2(self):
		pass
	@location2.setter
	def location2(self):
		pass

	@property
	def locations(self):
		pass
	@locations.setter
	def locations(self):
		pass

	def modelPositions(self):
		"""
		Forces all objects to return the original model positions instead of the
    current analysis positions.

    Useful when defining draw methods on GeneralObjects where behaviour is 
    different while animating.
    
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	@property
	def parent(self):
		pass
	@parent.setter
	def parent(self):
		pass

	@property
	def parts(self):
		pass
	@parts.setter
	def parts(self):
		pass

	def setValue(self,attr, value):
		"""
		Alias for setattr (attr, value)
    Args:
      attr (str): Attribute name to sets its value.
      value (str): Attribute value to set .
    
		"""
		pass

	def setValues(self,**kwds):
		"""
		Sets passed name/value pairs.
    
    Values are set in a standard order (the order the attribute is defined
    on the class) which is required in certain cases when an attribute's
    setter expects another attribute to have already been set.
    For example, setting a reference before a location that is wrt it.
    
    Args:
      **kwds: Set attributes in one go.
    
		"""
		pass

	@property
	def system(self):
		pass
	@system.setter
	def system(self):
		pass

	@property
	def textColor(self):
		pass
	@textColor.setter
	def textColor(self):
		pass

	@property
	def textHeader(self):
		pass
	@textHeader.setter
	def textHeader(self):
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

	def wasValueSet(self,attr):
		"""
		Check if attribute was set

    Args:
      attr (str): Attribute name to check it value set or not

    Returns:
      bool: True, if value was set else false.
    
		"""
		pass

class LessOrEqualTo:
	def __init__(self,**kwds):
		"""
Implicit less or equal to operation.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class LessThan:
	def __init__(self,**kwds):
		"""
Implicit less than operation.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class Line:
	def __init__(self,**kwds):
		"""
Create a line implicit body.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class List:
	def __init__(self,type, default=[], **kwds):
		"""
Store a list of values in a single attribute.
  
  For example:
    integers = List(Int)
    features = List(Reference(Feature))
  
"""
		pass

	def apply(self,**kwds):
		"""
		Context manager to specify Attribute constructor kwds
    Useful to avoid repeating kwds while defining a related group
    
		"""
		pass

	def castForGet(self,obj, value):
		"""
		Converts and returns the attribute value to its external type.

    Args:
      obj (GeneralObject): Object this attribute belongs to.
      value (Any): Value of the attribute to be converted.

    Returns:
      value (Any): Converted value.
    
		"""
		pass

	def castForSet(self,obj, value):
		pass

	def classifyObject(self,obj):
		pass

	def create(self,obj):
		pass

	def createList(self,listAttr, obj):
		pass

	def createListList(self,listAttr, obj):
		pass

	def disable(self,obj):
		pass

	def enable(self,obj):
		pass

	def getCreateArgs(self):
		"""
		Helper used in create methods
		"""
		pass

	def getDisplayName(self,obj):
		pass

	def getGuiValue(self,obj):
		pass

	def getInCoreValue(self,obj):
		pass

	def getReadonly(self,obj):
		pass

	def getUnits(self,obj):
		pass

	def getValue(self,obj):
		pass

	def getValueList(self,obj):
		pass

	def getValueListList(self,obj):
		pass

	def initialize(self,objCls, name):
		pass

	def loadValue(self,obj, value):
		"""
		Called by GeneralObject.loadAttributeValues during stmod deserialization
		"""
		pass

	def populateGuiValue(self,obj, prop):
		"""
		Override to customize, prop.value, displayValue, allowedValues.
    
    The prop.value type determines which editor widget used:
    - bool -> checkbox
    - str  -> line edit
    - hwtypes.Color -> color picker
    
    Setting prop.allowedValues yields a ComboBox.
    
    prop.displayValue is a str shown when the editor loses focus.
    
		"""
		pass

	def populatePropertyEditor(self,obj, prop, **kwds):
		"""
		Customize how attribute appears in Property Editor and ObjectTables.
    
    Args:
      obj (GeneralObject)
      prop (hwt::Property): Property Editor interface.
      component (int): 0, 1, 2
        Only passed when showing Triples 1 value at a time.
    
		"""
		pass

	def setInCoreValue(self,obj, value):
		pass

	def setValue(self,obj, value):
		pass

	def setValueList(self,obj, value):
		pass

	def setValueListList(self,obj, value):
		pass

	def usingUnits(self,units):
		pass

class ListOfHoles:
	def __init__(self,holes=None):
		"""
List of HoleData
"""
		pass

	def addAdjacentFeature(self,feature):
		"""
		Add the supplied feature to the HoleData
    
		"""
		pass

	def append(self,item):
		"""
		Overloaded list method to cast the item to a HoleData
    
		"""
		pass

	@property
	def axis(self):
		pass
	@axis.setter
	def axis(self):
		pass

	def copy(self):
		"""
		 Return the copied hole
		"""
		pass

	@property
	def fasteners(self):
		pass
	@fasteners.setter
	def fasteners(self):
		pass

	@property
	def features(self):
		pass
	@features.setter
	def features(self):
		pass

	def isOpen(self):
		pass

	def isaRegularCylinder(self):
		"""
		Return true, if cylindrical hole has perpendicular faces
    
		"""
		pass

	@property
	def isslot(self):
		pass
	@isslot.setter
	def isslot(self):
		pass

	@property
	def isvalid(self):
		pass
	@isvalid.setter
	def isvalid(self):
		pass

	@property
	def location(self):
		pass
	@location.setter
	def location(self):
		pass

	@property
	def origBoltParts(self):
		pass
	@origBoltParts.setter
	def origBoltParts(self):
		pass

	@property
	def parts(self):
		pass
	@parts.setter
	def parts(self):
		pass

	@property
	def radius(self):
		pass
	@radius.setter
	def radius(self):
		pass

	def removeFeature(self,feature):
		"""
		Remove a feature from this hole
    
		"""
		pass

	@property
	def shape(self):
		pass
	@shape.setter
	def shape(self):
		pass

	@property
	def size(self):
		pass
	@size.setter
	def size(self):
		pass

	@property
	def type(self):
		pass
	@type.setter
	def type(self):
		pass

class ListOfList:
	def __init__(self,type, default=[], **kwds):
		"""
Store list of lists of values in a single attribute.
  
  For example:
    obj.intLists = [[1,2],[3,4,5]]
  
"""
		pass

	def apply(self,**kwds):
		"""
		Context manager to specify Attribute constructor kwds
    Useful to avoid repeating kwds while defining a related group
    
		"""
		pass

	def castForGet(self,obj, value):
		"""
		Converts and returns the attribute value to its external type.

    Args:
      obj (GeneralObject): Object this attribute belongs to.
      value (Any): Value of the attribute to be converted.

    Returns:
      value (Any): Converted value.
    
		"""
		pass

	def castForSet(self,obj, value):
		pass

	def classifyObject(self,obj):
		pass

	def create(self,obj):
		pass

	def createList(self,listAttr, obj):
		pass

	def createListList(self,listAttr, obj):
		pass

	def disable(self,obj):
		pass

	def enable(self,obj):
		pass

	def getCreateArgs(self):
		"""
		Helper used in create methods
		"""
		pass

	def getDisplayName(self,obj):
		pass

	def getGuiValue(self,obj):
		pass

	def getInCoreValue(self,obj):
		pass

	def getReadonly(self,obj):
		pass

	def getUnits(self,obj):
		pass

	def getValue(self,obj):
		pass

	def getValueList(self,obj):
		pass

	def getValueListList(self,obj):
		pass

	def initialize(self,objCls, name):
		pass

	def loadValue(self,obj, value):
		"""
		Called by GeneralObject.loadAttributeValues during stmod deserialization
		"""
		pass

	def populateGuiValue(self,obj, prop):
		"""
		Override to customize, prop.value, displayValue, allowedValues.
    
    The prop.value type determines which editor widget used:
    - bool -> checkbox
    - str  -> line edit
    - hwtypes.Color -> color picker
    
    Setting prop.allowedValues yields a ComboBox.
    
    prop.displayValue is a str shown when the editor loses focus.
    
		"""
		pass

	def populatePropertyEditor(self,obj, prop, **kwds):
		"""
		Customize how attribute appears in Property Editor and ObjectTables.
    
    Args:
      obj (GeneralObject)
      prop (hwt::Property): Property Editor interface.
      component (int): 0, 1, 2
        Only passed when showing Triples 1 value at a time.
    
		"""
		pass

	def setInCoreValue(self,obj, value):
		pass

	def setValue(self,obj, value):
		pass

	def setValueList(self,obj, value):
		pass

	def setValueListList(self,obj, value):
		pass

	def usingUnits(self,units):
		pass

class LoadCase:
	def __init__(self,loads=[],name: str="", **kwds):
		"""
A collection of BoundaryConditions/Grounded PartsConnectors (Fastener, Joint). 

  The same BoundaryConditions/Grounded PartsConnectors can appear in 
  multiple LoadCases, while duplicates are not allowed.
  
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	def add(self,items):
		"""
		Adds one or more BoundaryConditions/Grounded PartsConnectors to this load case.

    Args:
      items (Union[Union[BoundaryCondition, PartsConnector], list[Union[BoundaryCondition, PartsConnector]]]) : List of entities to add to loadcase.

    Returns:
      bool : Returns True, if added to load case, else False.       
    
		"""
		pass

	def destroy(self):
		"""
		Delete the object removing it from the model.
    
    The object may come back due to an undo/redo.
    
		"""
		pass

	def getAllChildren(self,type=None, **kwds):
		"""
		Returns a list of all children that matches the specified type.

    Args:
      type (list[Named]): Filter to use to get the children based on object type.
      **kwds : Additional keyword arguments to match other attributes of the object.

    Returns:
      list[Union[Part, Motor, BoundaryCondition, ...]]: The list of children that satisfy the supplied filters.
    
		"""
		pass

	def getAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value.

    Args:
      name (str): Attribute name to find its class.
    
		"""
		pass

	def getAttributes(self,type=None, **kwds):
		"""
		Return an dict of the attributes.
    Pass type and kwds to filter by type and Attribute properties

    Args:
      type (type): Filters the attribute based on type
      **kwds : Additional kwds argument to filter attribute by its properties

    Returns:
      dict: Return an OrderedDict of the attributes
    
		"""
		pass

	def getChild(self,name=None, recursive=False, **kwds):
		"""
		Returns the child of the object which matches the specified unique name.

    Args:
      name (str): The name of the child object.
      recursive (bool):  Search all descendents.
      **kwds : Additional keyword arguments to match attributes of the object.

    Returns:
      Named: The child object which satisfies the specified filters.
    
		"""
		pass

	def getChildren(self,type=None, recursive=False, sorted=False, **kwds):
		"""
		Returns a list of children that is of the specified type.

    Args:
      type (Type[Named]): Filter objects by class.
      recursive (bool): True to get all descendent Parts and Assemblies.
      sorted (bool): Sort the children base on id.

    Returns:
      list[Named]
    
		"""
		pass

	def getClass(self,className):
		"""
		Returns the class of the object.
    
    It can be simple or qualified (with namespace). If the name is simple, we 
    prepend the cls.namespace.

    Args:
      className (Union[Part, Occurrence, Named..]) : The class name. 
     
    Returns:
      Union[Part, Occurrence, Named..] : The class for the specified className. 

    
		"""
		pass

	def getClassAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value

    Args:
      name (str): Name of the attribute
    
		"""
		pass

	def getDependents(self,recursive=False, **kwds):
		"""
		Get objects that reference this object through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getGuiAttributeNames(self):
		"""
		Return list of the attribute names that are in the gui

    Returns:
      list: Returns list of active gui attribute
    
		"""
		pass

	def getGuiValue(self,attr, **kwds):
		"""
		Get value formatted to be shown in the gui

    Args:
      attr (str): Attribute name to gets its gui value.

    Returns:
      str: Returns a string of the value with its gui units, like "5 mm/s".
    
		"""
		pass

	def getReferences(self,recursive=False, **kwds):
		"""
		Get objects this object references through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getSerializedAttributeValues(self):
		pass

	def getValue(self,attr):
		"""
		Return the attribute value for passed attribute name.
    
    Args:
      attr (String): Attribute name to gets its value.

    Returns:
      str: Returns the attribute value
    
		"""
		pass

	def isa(self,type=None, filter=None, name=None, wildcard=None, **kwds):
		"""
		Determines if the object matches the specified settings or not.
    
    Args:
      type (Union[Part, Assembly, Contact..]): The type of the object.
      filter (method): Return value of specified callback method.
      name (str): Name that matches exactly with object name.
      wildcard (str): A pattern to match exactly with the object name.
      **kwds : Additional keyword arguments to match other attributes.

    Returns:
      bool : True, if a match is found, otherwise False.
    
		"""
		pass

	@property
	def loads(self):
		pass
	@loads.setter
	def loads(self):
		pass

	def modelPositions(self):
		"""
		Forces all objects to return the original model positions instead of the
    current analysis positions.

    Useful when defining draw methods on GeneralObjects where behaviour is 
    different while animating.
    
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	@property
	def parent(self):
		pass
	@parent.setter
	def parent(self):
		pass

	def remove(self,items):
		"""
		Removes one or more BoundaryConditions/Grounded PartsConnectors to this load case.
    
    Args:
      items (Union[Union[BoundaryCondition, PartsConnector], list[Union[BoundaryCondition, PartsConnector]]]) : List of entities to add to loadcase.

    Returns:
      bool : Returns True, if removed from load case, else False.    
    
		"""
		pass

	def setValue(self,attr, value):
		"""
		Alias for setattr (attr, value)
    Args:
      attr (str): Attribute name to sets its value.
      value (str): Attribute value to set .
    
		"""
		pass

	def setValues(self,**kwds):
		"""
		Sets passed name/value pairs.
    
    Values are set in a standard order (the order the attribute is defined
    on the class) which is required in certain cases when an attribute's
    setter expects another attribute to have already been set.
    For example, setting a reference before a location that is wrt it.
    
    Args:
      **kwds: Set attributes in one go.
    
		"""
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

	def wasValueSet(self,attr):
		"""
		Check if attribute was set

    Args:
      attr (str): Attribute name to check it value set or not

    Returns:
      bool: True, if value was set else false.
    
		"""
		pass

class LocalTransformImplicit:
	def __init__(self,cppName: str="",doc: str=""):
		"""
math.Matrix44
"""
		pass

class Location:
	def __init__(self,default=(0, 0, 0), **kwds):
		"""
Store a location relative to another entity.
  
  Locations are get or set in global coordinates.
  
  Locations relative to Features have special code to stay at the same point 
  on the feature after feature modifications like push/pull.
  
"""
		pass

	def OnAttributeModify(self,obj, attr, *args):
		pass

	def activateListener(self,obj):
		"""
		Listen to referenced object for any changes.
		"""
		pass

	def apply(self,**kwds):
		"""
		Context manager to specify Attribute constructor kwds
    Useful to avoid repeating kwds while defining a related group
    
		"""
		pass

	def castForGet(self,obj, value):
		"""
		Converts and returns the attribute value to its external type.

    Args:
      obj (GeneralObject): Object this attribute belongs to.
      value (Any): Value of the attribute to be converted.

    Returns:
      value (Any): Converted value.
    
		"""
		pass

	def castForSet(self,obj, value):
		pass

	def classifyObject(self,obj):
		pass

	def create(self,obj):
		pass

	def createList(self,listAttr, obj):
		pass

	def createListList(self,listAttr, obj):
		pass

	def deactivateListener(self,obj):
		"""
		Stop listening to referenced objects.
		"""
		pass

	def disable(self,obj):
		pass

	def enable(self,obj):
		pass

	def getCoord(self,feature, point):
		"""
		Converts the location on the feature into UV coordinates.

      None is returned if point is not touching feature

    Args:
      feature (Feature): Feature from which coordinates are extracted from.
      point (Point): Point on the feature for which UV coordinates are derived.

    Returns:
      UV Coordinates: Coordinates from the converted location.
    
		"""
		pass

	def getCoordLocation(self,feature, coord, normalized=False):
		"""
		Convert coordinates to location from the specified feature.

    Args:
      feature (Feature): Feature on which location is extracted.
      coord (list[Point]): Coordinates from which the location is derived.
      normalized (bool): If True normalize the locations, defaults to False.

    Returns:
      Location: Converted UV coordinates to location value.
    
		"""
		pass

	def getCreateArgs(self):
		"""
		Helper used in create methods
		"""
		pass

	def getDisplayName(self,obj):
		pass

	def getGuiValue(self,obj, format="modeling"):
		pass

	def getInCoreValue(self,obj):
		pass

	def getReadonly(self,obj):
		pass

	def getReferenceFrame(self,obj):
		"""
		Get Matrix44 from referenced object in base units.
		"""
		pass

	def getUnits(self,obj):
		pass

	def getValue(self,obj):
		pass

	def getValueList(self,obj):
		pass

	def getValueListList(self,obj):
		pass

	def getWrt(self,obj):
		"""
		Get object this attribute is relative to.
		"""
		pass

	def initialize(self,objCls, name):
		"""
		Initializes the attribute.

    Args:
      objCls (class): Object class this attribute belongs to.
      name (str): Name of the attribute.
    
		"""
		pass

	def loadValue(self,obj, value):
		pass

	def populateGuiValue(self,obj, prop, component=None):
		pass

	def populatePropertyEditor(self,obj, prop, **kwds):
		"""
		Customize how attribute appears in Property Editor and ObjectTables.
    
    Args:
      obj (GeneralObject)
      prop (hwt::Property): Property Editor interface.
      component (int): 0, 1, 2
        Only passed when showing Triples 1 value at a time.
    
		"""
		pass

	def setInCoreValue(self,obj, value):
		pass

	def setValue(self,obj, value):
		pass

	def setValueList(self,obj, value):
		pass

	def setValueListList(self,obj, value):
		pass

	def toGlobal(self,obj, value):
		pass

	def toLocal(self,obj, value):
		pass

	def usingUnits(self,units):
		pass

class Material:
	def __init__(self,name: str="", **kwds):
		"""
A material is the physical substance that a part is made of, such as steel,
    aluminum, or plastic.

    The type of material does not determine the visual appearance of a part,
    only its physical properties.

    Base class for all user defined material.
  
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	@property
	def density(self):
		pass
	@density.setter
	def density(self):
		pass

	def destroy(self):
		"""
		Removes the material from the database.
    
    Returns:
      bool : True, if deleted, else False. 
    
		"""
		pass

	def get(self,material=None):
		"""
		Returns the material by its name.

    Args:
      material (str): Name of the material.

    Returns:
      Material : Material found by its name.
    
		"""
		pass

	def getAllChildren(self,type=None, **kwds):
		"""
		Returns a list of all children that matches the specified type.

    Args:
      type (list[Named]): Filter to use to get the children based on object type.
      **kwds : Additional keyword arguments to match other attributes of the object.

    Returns:
      list[Union[Part, Motor, BoundaryCondition, ...]]: The list of children that satisfy the supplied filters.
    
		"""
		pass

	def getAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value.

    Args:
      name (str): Attribute name to find its class.
    
		"""
		pass

	def getAttributes(self,type=None, **kwds):
		"""
		Return an dict of the attributes.
    Pass type and kwds to filter by type and Attribute properties

    Args:
      type (type): Filters the attribute based on type
      **kwds : Additional kwds argument to filter attribute by its properties

    Returns:
      dict: Return an OrderedDict of the attributes
    
		"""
		pass

	def getChild(self,name=None, recursive=False, **kwds):
		"""
		Returns the child of the object which matches the specified unique name.

    Args:
      name (str): The name of the child object.
      recursive (bool):  Search all descendents.
      **kwds : Additional keyword arguments to match attributes of the object.

    Returns:
      Named: The child object which satisfies the specified filters.
    
		"""
		pass

	def getChildren(self,type=None, recursive=False, sorted=False, **kwds):
		"""
		Returns a list of children that is of the specified type.

    Args:
      type (Type[Named]): Filter objects by class.
      recursive (bool): True to get all descendent Parts and Assemblies.
      sorted (bool): Sort the children base on id.

    Returns:
      list[Named]
    
		"""
		pass

	def getClass(self,className):
		"""
		Returns the class of the object.
    
    It can be simple or qualified (with namespace). If the name is simple, we 
    prepend the cls.namespace.

    Args:
      className (Union[Part, Occurrence, Named..]) : The class name. 
     
    Returns:
      Union[Part, Occurrence, Named..] : The class for the specified className. 

    
		"""
		pass

	def getClassAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value

    Args:
      name (str): Name of the attribute
    
		"""
		pass

	def getDefault(self):
		"""
		Returns project default material.

    Returns:
      Material : The default material.
    
		"""
		pass

	def getDependents(self,recursive=False, **kwds):
		"""
		Get objects that reference this object through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getGuiAttributeNames(self):
		"""
		Return list of the attribute names that are in the gui

    Returns:
      list: Returns list of active gui attribute
    
		"""
		pass

	def getGuiValue(self,attr, **kwds):
		"""
		Get value formatted to be shown in the gui

    Args:
      attr (str): Attribute name to gets its gui value.

    Returns:
      str: Returns a string of the value with its gui units, like "5 mm/s".
    
		"""
		pass

	def getMaterials(self):
		"""
		Returns a dictionary of the defined material keys to the material name.

    Returns:
      dict : Return a dictionary of all the material keyed by name.
    
		"""
		pass

	def getReferences(self,recursive=False, **kwds):
		"""
		Get objects this object references through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getSerializedAttributeValues(self):
		pass

	def getValue(self,attr):
		"""
		Return the attribute value for passed attribute name.
    
    Args:
      attr (String): Attribute name to gets its value.

    Returns:
      str: Returns the attribute value
    
		"""
		pass

	def isa(self,type=None, filter=None, name=None, wildcard=None, **kwds):
		"""
		Determines if the object matches the specified settings or not.
    
    Args:
      type (Union[Part, Assembly, Contact..]): The type of the object.
      filter (method): Return value of specified callback method.
      name (str): Name that matches exactly with object name.
      wildcard (str): A pattern to match exactly with the object name.
      **kwds : Additional keyword arguments to match other attributes.

    Returns:
      bool : True, if a match is found, otherwise False.
    
		"""
		pass

	def modelPositions(self):
		"""
		Forces all objects to return the original model positions instead of the
    current analysis positions.

    Useful when defining draw methods on GeneralObjects where behaviour is 
    different while animating.
    
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	@property
	def parent(self):
		pass
	@parent.setter
	def parent(self):
		pass

	@property
	def poissonRatio(self):
		pass
	@poissonRatio.setter
	def poissonRatio(self):
		pass

	def setDefault(self,material):
		"""
		Sets projects default material.

    Args:
      material (Material) : Material to be set for the project.
        
    Returns:
      Material : The default material.
    
		"""
		pass

	def setValue(self,attr, value):
		"""
		Alias for setattr (attr, value)
    Args:
      attr (str): Attribute name to sets its value.
      value (str): Attribute value to set .
    
		"""
		pass

	def setValues(self,**kwds):
		"""
		Sets passed name/value pairs.
    
    Values are set in a standard order (the order the attribute is defined
    on the class) which is required in certain cases when an attribute's
    setter expects another attribute to have already been set.
    For example, setting a reference before a location that is wrt it.
    
    Args:
      **kwds: Set attributes in one go.
    
		"""
		pass

	@property
	def stress(self):
		pass
	@stress.setter
	def stress(self):
		pass

	@property
	def thermalConductivity(self):
		pass
	@thermalConductivity.setter
	def thermalConductivity(self):
		pass

	@property
	def thermalExpansion(self):
		pass
	@thermalExpansion.setter
	def thermalExpansion(self):
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

	def wasValueSet(self,attr):
		"""
		Check if attribute was set

    Args:
      attr (str): Attribute name to check it value set or not

    Returns:
      bool: True, if value was set else false.
    
		"""
		pass

	@property
	def youngModulus(self):
		pass
	@youngModulus.setter
	def youngModulus(self):
		pass

class Max:
	def __init__(self,**kwds):
		"""
Implicit max operation.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class Measure:
	def __init__(self):
		"""
Measures the distance between two points, the length of a feature or an angle between three points.

    Measure supports:

      - Length: It has two connecting points.
      - Angle: It has three connecting points.
  
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	def destroy(self):
		"""
		Delete the object removing it from the model.
    
    The object may come back due to an undo/redo.
    
		"""
		pass

	def getAllChildren(self,type=None, **kwds):
		"""
		Returns a list of all children that matches the specified type.

    Args:
      type (list[Named]): Filter to use to get the children based on object type.
      **kwds : Additional keyword arguments to match other attributes of the object.

    Returns:
      list[Union[Part, Motor, BoundaryCondition, ...]]: The list of children that satisfy the supplied filters.
    
		"""
		pass

	def getAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value.

    Args:
      name (str): Attribute name to find its class.
    
		"""
		pass

	def getAttributes(self,type=None, **kwds):
		"""
		Return an dict of the attributes.
    Pass type and kwds to filter by type and Attribute properties

    Args:
      type (type): Filters the attribute based on type
      **kwds : Additional kwds argument to filter attribute by its properties

    Returns:
      dict: Return an OrderedDict of the attributes
    
		"""
		pass

	def getChild(self,name=None, recursive=False, **kwds):
		"""
		Returns the child of the object which matches the specified unique name.

    Args:
      name (str): The name of the child object.
      recursive (bool):  Search all descendents.
      **kwds : Additional keyword arguments to match attributes of the object.

    Returns:
      Named: The child object which satisfies the specified filters.
    
		"""
		pass

	def getChildren(self,type=None, recursive=False, sorted=False, **kwds):
		"""
		Returns a list of children that is of the specified type.

    Args:
      type (Type[Named]): Filter objects by class.
      recursive (bool): True to get all descendent Parts and Assemblies.
      sorted (bool): Sort the children base on id.

    Returns:
      list[Named]
    
		"""
		pass

	def getClass(self,className):
		"""
		Returns the class of the object.
    
    It can be simple or qualified (with namespace). If the name is simple, we 
    prepend the cls.namespace.

    Args:
      className (Union[Part, Occurrence, Named..]) : The class name. 
     
    Returns:
      Union[Part, Occurrence, Named..] : The class for the specified className. 

    
		"""
		pass

	def getClassAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value

    Args:
      name (str): Name of the attribute
    
		"""
		pass

	def getDependents(self,recursive=False, **kwds):
		"""
		Get objects that reference this object through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getGuiAttributeNames(self):
		"""
		Return list of the attribute names that are in the gui

    Returns:
      list: Returns list of active gui attribute
    
		"""
		pass

	def getGuiValue(self,attr, **kwds):
		"""
		Get value formatted to be shown in the gui

    Args:
      attr (str): Attribute name to gets its gui value.

    Returns:
      str: Returns a string of the value with its gui units, like "5 mm/s".
    
		"""
		pass

	def getReferences(self,recursive=False, **kwds):
		"""
		Get objects this object references through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getSerializedAttributeValues(self):
		pass

	def getValue(self,attr):
		"""
		Return the attribute value for passed attribute name.
    
    Args:
      attr (String): Attribute name to gets its value.

    Returns:
      str: Returns the attribute value
    
		"""
		pass

	def isa(self,type=None, filter=None, name=None, wildcard=None, **kwds):
		"""
		Determines if the object matches the specified settings or not.
    
    Args:
      type (Union[Part, Assembly, Contact..]): The type of the object.
      filter (method): Return value of specified callback method.
      name (str): Name that matches exactly with object name.
      wildcard (str): A pattern to match exactly with the object name.
      **kwds : Additional keyword arguments to match other attributes.

    Returns:
      bool : True, if a match is found, otherwise False.
    
		"""
		pass

	@property
	def location(self):
		pass
	@location.setter
	def location(self):
		pass

	@property
	def locations(self):
		pass
	@locations.setter
	def locations(self):
		pass

	def modelPositions(self):
		"""
		Forces all objects to return the original model positions instead of the
    current analysis positions.

    Useful when defining draw methods on GeneralObjects where behaviour is 
    different while animating.
    
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	@property
	def parent(self):
		pass
	@parent.setter
	def parent(self):
		pass

	@property
	def parts(self):
		pass
	@parts.setter
	def parts(self):
		pass

	def setValue(self,attr, value):
		"""
		Alias for setattr (attr, value)
    Args:
      attr (str): Attribute name to sets its value.
      value (str): Attribute value to set .
    
		"""
		pass

	def setValues(self,**kwds):
		"""
		Sets passed name/value pairs.
    
    Values are set in a standard order (the order the attribute is defined
    on the class) which is required in certain cases when an attribute's
    setter expects another attribute to have already been set.
    For example, setting a reference before a location that is wrt it.
    
    Args:
      **kwds: Set attributes in one go.
    
		"""
		pass

	@property
	def textColor(self):
		pass
	@textColor.setter
	def textColor(self):
		pass

	@property
	def textHeader(self):
		pass
	@textHeader.setter
	def textHeader(self):
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

	def wasValueSet(self,attr):
		"""
		Check if attribute was set

    Args:
      attr (str): Attribute name to check it value set or not

    Returns:
      bool: True, if value was set else false.
    
		"""
		pass

class MenuItem:
	def __init__(self,children=None, icon=None, text=None, command=None, enabled=True, action=None, attribute=None, section=None):
		"""
Interface for item in Context Menu
  GeneralObject.getContextMenu returns a list of these.
  
"""
		pass

class MeshControl:
	def __init__(self,meshSize, parts=[], features=[], **kwds):
		"""
Create mesh controls to assign an element size to parts or faces.

  The element size dictates the quality of your analysis or optimization results.
  In general, the smaller the element size, the more accurate the result.

  Args:
    meshSize (float): Element size used in structural analyses.
      Applies to passed parts and features.
    parts (list[Part]): Parts to be meshed.
    features (list[FeatureArea]): Features to be meshed.
  
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	def destroy(self):
		"""
		Delete the object removing it from the model.
    
    The object may come back due to an undo/redo.
    
		"""
		pass

	@property
	def features(self):
		pass
	@features.setter
	def features(self):
		pass

	def getAllChildren(self,type=None, **kwds):
		"""
		Returns a list of all children that matches the specified type.

    Args:
      type (list[Named]): Filter to use to get the children based on object type.
      **kwds : Additional keyword arguments to match other attributes of the object.

    Returns:
      list[Union[Part, Motor, BoundaryCondition, ...]]: The list of children that satisfy the supplied filters.
    
		"""
		pass

	def getAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value.

    Args:
      name (str): Attribute name to find its class.
    
		"""
		pass

	def getAttributes(self,type=None, **kwds):
		"""
		Return an dict of the attributes.
    Pass type and kwds to filter by type and Attribute properties

    Args:
      type (type): Filters the attribute based on type
      **kwds : Additional kwds argument to filter attribute by its properties

    Returns:
      dict: Return an OrderedDict of the attributes
    
		"""
		pass

	def getChild(self,name=None, recursive=False, **kwds):
		"""
		Returns the child of the object which matches the specified unique name.

    Args:
      name (str): The name of the child object.
      recursive (bool):  Search all descendents.
      **kwds : Additional keyword arguments to match attributes of the object.

    Returns:
      Named: The child object which satisfies the specified filters.
    
		"""
		pass

	def getChildren(self,type=None, recursive=False, sorted=False, **kwds):
		"""
		Returns a list of children that is of the specified type.

    Args:
      type (Type[Named]): Filter objects by class.
      recursive (bool): True to get all descendent Parts and Assemblies.
      sorted (bool): Sort the children base on id.

    Returns:
      list[Named]
    
		"""
		pass

	def getClass(self,className):
		"""
		Returns the class of the object.
    
    It can be simple or qualified (with namespace). If the name is simple, we 
    prepend the cls.namespace.

    Args:
      className (Union[Part, Occurrence, Named..]) : The class name. 
     
    Returns:
      Union[Part, Occurrence, Named..] : The class for the specified className. 

    
		"""
		pass

	def getClassAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value

    Args:
      name (str): Name of the attribute
    
		"""
		pass

	def getDependents(self,recursive=False, **kwds):
		"""
		Get objects that reference this object through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getGuiAttributeNames(self):
		"""
		Return list of the attribute names that are in the gui

    Returns:
      list: Returns list of active gui attribute
    
		"""
		pass

	def getGuiValue(self,attr, **kwds):
		"""
		Get value formatted to be shown in the gui

    Args:
      attr (str): Attribute name to gets its gui value.

    Returns:
      str: Returns a string of the value with its gui units, like "5 mm/s".
    
		"""
		pass

	def getReferences(self,recursive=False, **kwds):
		"""
		Get objects this object references through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getSerializedAttributeValues(self):
		pass

	def getValue(self,attr):
		"""
		Return the attribute value for passed attribute name.
    
    Args:
      attr (String): Attribute name to gets its value.

    Returns:
      str: Returns the attribute value
    
		"""
		pass

	def isa(self,type=None, filter=None, name=None, wildcard=None, **kwds):
		"""
		Determines if the object matches the specified settings or not.
    
    Args:
      type (Union[Part, Assembly, Contact..]): The type of the object.
      filter (method): Return value of specified callback method.
      name (str): Name that matches exactly with object name.
      wildcard (str): A pattern to match exactly with the object name.
      **kwds : Additional keyword arguments to match other attributes.

    Returns:
      bool : True, if a match is found, otherwise False.
    
		"""
		pass

	@property
	def meshSize(self):
		pass
	@meshSize.setter
	def meshSize(self):
		pass

	def modelPositions(self):
		"""
		Forces all objects to return the original model positions instead of the
    current analysis positions.

    Useful when defining draw methods on GeneralObjects where behaviour is 
    different while animating.
    
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	@property
	def parent(self):
		pass
	@parent.setter
	def parent(self):
		pass

	@property
	def parts(self):
		pass
	@parts.setter
	def parts(self):
		pass

	def setValue(self,attr, value):
		"""
		Alias for setattr (attr, value)
    Args:
      attr (str): Attribute name to sets its value.
      value (str): Attribute value to set .
    
		"""
		pass

	def setValues(self,**kwds):
		"""
		Sets passed name/value pairs.
    
    Values are set in a standard order (the order the attribute is defined
    on the class) which is required in certain cases when an attribute's
    setter expects another attribute to have already been set.
    For example, setting a reference before a location that is wrt it.
    
    Args:
      **kwds: Set attributes in one go.
    
		"""
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

	def wasValueSet(self,attr):
		"""
		Check if attribute was set

    Args:
      attr (str): Attribute name to check it value set or not

    Returns:
      bool: True, if value was set else false.
    
		"""
		pass

class MetaClass:
	def __init__(self):
		pass

class Min:
	def __init__(self,**kwds):
		"""
Implicit min operation.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class Mod:
	def __init__(self,**kwds):
		"""
Implicit Mod operation.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class Model:
	def __init__(self,parent=None, **kwds):
		"""
The active Inspire model. Model is a subclass of Assembly class.

  It can be retrieved from and saved to a file.
  Is contains all the parts, joints, fasteners, load cases, and any
  other information required for its analysis.
  
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	@property
	def actuators(self):
		pass
	@actuators.setter
	def actuators(self):
		pass

	@property
	def angularInitialConditions(self):
		pass
	@angularInitialConditions.setter
	def angularInitialConditions(self):
		pass

	@property
	def animating(self):
		pass
	@animating.setter
	def animating(self):
		pass

	@property
	def animationCache(self):
		pass
	@animationCache.setter
	def animationCache(self):
		pass

	@property
	def animationPosition(self):
		pass
	@animationPosition.setter
	def animationPosition(self):
		pass

	@property
	def assemblies(self):
		pass
	@assemblies.setter
	def assemblies(self):
		pass

	@property
	def autoCalculateCG(self):
		pass
	@autoCalculateCG.setter
	def autoCalculateCG(self):
		pass

	@property
	def autoCalculateMass(self):
		pass
	@autoCalculateMass.setter
	def autoCalculateMass(self):
		pass

	@property
	def autoCalculateMeshSize(self):
		pass
	@autoCalculateMeshSize.setter
	def autoCalculateMeshSize(self):
		pass

	@property
	def autoCalculateMoment(self):
		pass
	@autoCalculateMoment.setter
	def autoCalculateMoment(self):
		pass

	@property
	def autoCalculateThickness(self):
		pass
	@autoCalculateThickness.setter
	def autoCalculateThickness(self):
		pass

	def autoColorParts(self):
		"""
		Automatically assigns different colors to all the parts in the assembly.
		"""
		pass

	@property
	def axisAlignedBoundingBox(self):
		pass
	@axisAlignedBoundingBox.setter
	def axisAlignedBoundingBox(self):
		pass

	@property
	def beadPatterns(self):
		pass
	@beadPatterns.setter
	def beadPatterns(self):
		pass

	@property
	def boundaryConditions(self):
		pass
	@boundaryConditions.setter
	def boundaryConditions(self):
		pass

	@property
	def bushings(self):
		pass
	@bushings.setter
	def bushings(self):
		pass

	@property
	def cavities(self):
		pass
	@cavities.setter
	def cavities(self):
		pass

	@property
	def cg(self):
		pass
	@cg.setter
	def cg(self):
		pass

	@property
	def cogConstraints(self):
		pass
	@cogConstraints.setter
	def cogConstraints(self):
		pass

	@property
	def coilSprings(self):
		pass
	@coilSprings.setter
	def coilSprings(self):
		pass

	@property
	def color(self):
		pass
	@color.setter
	def color(self):
		pass

	@property
	def concentratedMasses(self):
		pass
	@concentratedMasses.setter
	def concentratedMasses(self):
		pass

	@property
	def contactPenetrationTolerance(self):
		pass
	@contactPenetrationTolerance.setter
	def contactPenetrationTolerance(self):
		pass

	@property
	def contactResolution(self):
		pass
	@contactResolution.setter
	def contactResolution(self):
		pass

	@property
	def contactSearchDistance(self):
		pass
	@contactSearchDistance.setter
	def contactSearchDistance(self):
		pass

	@property
	def contacts(self):
		pass
	@contacts.setter
	def contacts(self):
		pass

	@property
	def couplers(self):
		pass
	@couplers.setter
	def couplers(self):
		pass

	def createCurves(self,points, **kwds):
		"""
		Creates a list of SplineCurve parts that connect the points.

      If the points don't have intersections, creates one SplineCurve part.
      Otherwise, creates one SplineCurve part for each section.

    Args:
      points (list[math.Point]): List of points used to create the SplineCurve part.
      **kwds: Part attributes like name, position, color...

    Returns:
      list [Part] : List of created parts.

    
		"""
		pass

	def createEmptyPart(self,**kwds):
		"""
		Creates an empty part.

    Args:
      **kwds: Part attributes like name, position, color...

    Returns:
      Part
    
		"""
		pass

	def createPointPart(self,**kwds):
		"""
		Creates a point part.

    Args:
      **kwds: Part attributes like name, location, color...

    Returns:
      Part
    
		"""
		pass

	def createPolylines(self,points, **kwds):
		"""
		Creates a list of Polyline parts that connect the points.

      If the points don't have intersections, creates one Polyline part.
      Otherwise, creates one Polyline part for each section.

    Args:
      points (list[math.Point]): List of points to create the Polyline part.
      **kwds: Part attributes like name, position, color...

    Returns:
      list[Part]: List of created parts.
    
		"""
		pass

	def createSheetCircle(self,radius=1, **kwds):
		"""
		Creates a circle centered at the origin in the XY plane.

    Args:
      radius (float)
      **kwds: Part attributes like name, position, color...

    Returns:
      Part
    
		"""
		pass

	def createSheetPolygon(self,radius=1, nsides=3, **kwds):
		"""
		Creates a regular polygon centered at the origin in the XY-plane.

    Args:
      radius (float): The distance from the center to a vertex.
      nsides (int): The number of sides. Must be > 2.
      **kwds: Part attributes like name, position, color...

    Returns:
      Part
    
		"""
		pass

	def createSheetRectangle(self,x=1, y=1, **kwds):
		"""
		Creates a rectangle centered at the origin.

    Args:
      x (float): The length. 
      y (float): The width.
      **kwds: Part attributes like name, position, color...

    Returns:
      Part
    
		"""
		pass

	def createSolidBlock(self,x=1, y=1, z=1, **kwds):
		"""
		Creates a solid block with the center of the base at the origin.

    Args:
      x (float): The length.
      y (float): The width.
      z (float): The height.
      **kwds: Part attributes like name, position, color...

    Returns:
      Part
    
		"""
		pass

	def createSolidCone(self,radius=1, height=1, semiangle="0", **kwds):
		"""
		Creates a a solid cone with the base centered at the origin in the XY 
    plane and the height extending along the z-axis.

    Args:
      radius (float): The radius in the XY-plane.
      height (float): The height along z-axis.
      semiangle (float): The angle the cone makes with the z-axis. Must be > 0 < pi/2.
      **kwds: Part attributes like name, position, color...

    Returns:
      Part
    
		"""
		pass

	def createSolidCylinder(self,radius=1, height=1, **kwds):
		"""
		Creates a solid cylinder with the base centered at the origin in the XY 
    plane and the height extending along the z-axis.

    Args:
      radius (float): The radius in the XY-plane.
      height (float): The height along z-axis.
      **kwds: Part attributes like name, position, color...

    Returns:
      Part
    
		"""
		pass

	def createSolidEllipsoid(self,xRadius=1, yRadius=0.5, zRadius=0.25, **kwds):
		"""
		Creates a solid ellipsoid centered at the origin.

    Args:
      xRadius (float): The radius in x-axis.
      yRadius (float): The radius in y-axis.
      zRadius (float): The radius in z-axis.
      **kwds: Part attributes like name, position, color...

    Returns:
      Part
    
		"""
		pass

	def createSolidPrism(self,radius=1, height=1, nsides=20, blendradius="0", **kwds):
		"""
		Creates a solid prism with the base centered at the origin in the XY 
    plane and the height extending along the z-axis.

    Args:
      radius (float): The radius in the XY-plane.
      height (float): The height along z-axis.
      nsides (int): The number of facets. Must be > 2.
      blendradius (float): The radius used to round the corners.
      **kwds: Part attributes like name, position, color...

    Returns:
      Part
    
		"""
		pass

	def createSolidSphere(self,radius=1, **kwds):
		"""
		Creates a solid sphere with centre at origin.

    Args:
      radius (float)
      **kwds: Part attributes like name, location, color...

    Returns:
      Part
    
		"""
		pass

	def createSolidTorus(self,majorRadius=1, minorRadius=0.5, **kwds):
		"""
		Creates a solid torus centered at the origin, located in the XY-plane 
    with the z-axis sticking through the hole.

    Args:
      majorRadius (float): The radius from the hole's center to the rim's midline.
      minorRadius (float): The radius of the cross section of the rim. 
        Must be less than majorRadius.
      **kwds: Part attributes like name, position, color...

    Returns:
      Part
    
		"""
		pass

	@property
	def currentLoadCase(self):
		pass
	@currentLoadCase.setter
	def currentLoadCase(self):
		pass

	def destroy(self):
		"""
		Destroys assemblies from the model.
    
		"""
		pass

	@property
	def detectCollisions(self):
		pass
	@detectCollisions.setter
	def detectCollisions(self):
		pass

	@property
	def displacementConstraints(self):
		pass
	@displacementConstraints.setter
	def displacementConstraints(self):
		pass

	@property
	def drawDirections(self):
		pass
	@drawDirections.setter
	def drawDirections(self):
		pass

	@property
	def enforcedDisplacements(self):
		pass
	@enforcedDisplacements.setter
	def enforcedDisplacements(self):
		pass

	@property
	def fasteners(self):
		pass
	@fasteners.setter
	def fasteners(self):
		pass

	@property
	def features(self):
		pass
	@features.setter
	def features(self):
		pass

	def getAllChildren(self,type=None, **kwds):
		"""
		Returns a list of all children that matches the specified type.

    Args:
      type (list[Named]): Filter to use to get the children based on object type.
      **kwds : Additional keyword arguments to match other attributes of the object.

    Returns:
      list[Union[Part, Motor, BoundaryCondition, ...]]: The list of children that satisfy the supplied filters.
    
		"""
		pass

	def getAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value.

    Args:
      name (str): Attribute name to find its class.
    
		"""
		pass

	def getAttributes(self,type=None, **kwds):
		"""
		Return an dict of the attributes.
    Pass type and kwds to filter by type and Attribute properties

    Args:
      type (type): Filters the attribute based on type
      **kwds : Additional kwds argument to filter attribute by its properties

    Returns:
      dict: Return an OrderedDict of the attributes
    
		"""
		pass

	def getCenterOfGravity(self,includeGround=True):
		"""
		Returns the centre of gravity of the assembly.

    Args:
      includeGround (bool): Include ground parts?

    Returns:
      Point
    
		"""
		pass

	def getChild(self,name=None, recursive=False, **kwds):
		"""
		Returns the child of the object which matches the specified unique name.

    Args:
      name (str): The name of the child object.
      recursive (bool):  Search all descendents.
      **kwds : Additional keyword arguments to match attributes of the object.

    Returns:
      Named: The child object which satisfies the specified filters.
    
		"""
		pass

	def getChildren(self,type=None, recursive=False, sorted=False, **kwds):
		"""
		Returns a list of children that is of the specified type.

    Args:
      type (Type[Named]): Filter objects by class.
      recursive (bool): True to get all descendent Parts and Assemblies.
      sorted (bool): Sort the children base on id.

    Returns:
      list[Named]
    
		"""
		pass

	def getClass(self,className):
		"""
		Returns the class of the object.
    
    It can be simple or qualified (with namespace). If the name is simple, we 
    prepend the cls.namespace.

    Args:
      className (Union[Part, Occurrence, Named..]) : The class name. 
     
    Returns:
      Union[Part, Occurrence, Named..] : The class for the specified className. 

    
		"""
		pass

	def getClassAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value

    Args:
      name (str): Name of the attribute
    
		"""
		pass

	def getDependents(self,recursive=False, **kwds):
		"""
		Get objects that reference this object through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getFeature(self,name=None):
		"""
		Find feature by its __str__/__repr__.
    
    Args:
      name (str)
    
    Returns:
      Feature
    
		"""
		pass

	def getFeatures(self,type=None, **kwds):
		"""
		Returns features that matches the specified filters.

    Args:
      type (Type[Feature]): The type of feature to return.
      **kwds: Additional keyword arguments to match other attributes.

    Returns:
      list [Feature]: A list of features that satisfies all the filter criteria.
    
		"""
		pass

	def getGuiAttributeNames(self):
		"""
		Return list of the attribute names that are in the gui

    Returns:
      list: Returns list of active gui attribute
    
		"""
		pass

	def getGuiValue(self,attr, **kwds):
		"""
		Get value formatted to be shown in the gui

    Args:
      attr (str): Attribute name to gets its gui value.

    Returns:
      str: Returns a string of the value with its gui units, like "5 mm/s".
    
		"""
		pass

	def getMass(self,includeGround=True):
		"""
		Returns the mass of the assembly.

    Args:
      includeGround (bool) : Include ground parts.

    Returns:
      float
    
		"""
		pass

	def getReferences(self,recursive=False, **kwds):
		"""
		Get objects this object references through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getSerializedAttributeValues(self):
		pass

	def getSkinMesh(self,parts, local=False):
		"""
		Returns a dictionary of parts to the skin mesh (nodes and faces).
       
    Args:
      parts (list[Part]) : Specify the parts to skin mesh.
      local (bool) : If True, uses the local part collection, else occurrence collection.
        Recommended to use as defaults.

    Returns:
      dict: Dictionary of parts to the skin mesh (nodes and faces).
    
		"""
		pass

	def getValue(self,attr):
		"""
		Return the attribute value for passed attribute name.
    
    Args:
      attr (String): Attribute name to gets its value.

    Returns:
      str: Returns the attribute value
    
		"""
		pass

	@property
	def gravityComponents(self):
		pass
	@gravityComponents.setter
	def gravityComponents(self):
		pass

	@property
	def gravityDirection(self):
		pass
	@gravityDirection.setter
	def gravityDirection(self):
		pass

	@property
	def gravityMagnitude(self):
		pass
	@gravityMagnitude.setter
	def gravityMagnitude(self):
		pass

	@property
	def ground(self):
		pass
	@ground.setter
	def ground(self):
		pass

	@property
	def grounded(self):
		pass
	@grounded.setter
	def grounded(self):
		pass

	@property
	def holes(self):
		pass
	@holes.setter
	def holes(self):
		pass

	@property
	def initialConditions(self):
		pass
	@initialConditions.setter
	def initialConditions(self):
		pass

	@property
	def ip(self):
		pass
	@ip.setter
	def ip(self):
		pass

	def isa(self,type=None, filter=None, name=None, wildcard=None, **kwds):
		"""
		Determines if the object matches the specified settings or not.
    
    Args:
      type (Union[Part, Assembly, Contact..]): The type of the object.
      filter (method): Return value of specified callback method.
      name (str): Name that matches exactly with object name.
      wildcard (str): A pattern to match exactly with the object name.
      **kwds : Additional keyword arguments to match other attributes.

    Returns:
      bool : True, if a match is found, otherwise False.
    
		"""
		pass

	@property
	def joints(self):
		pass
	@joints.setter
	def joints(self):
		pass

	@property
	def limitNumberOfElements(self):
		pass
	@limitNumberOfElements.setter
	def limitNumberOfElements(self):
		pass

	@property
	def loadCases(self):
		pass
	@loadCases.setter
	def loadCases(self):
		pass

	@property
	def loads(self):
		pass
	@loads.setter
	def loads(self):
		pass

	@property
	def location(self):
		pass
	@location.setter
	def location(self):
		pass

	@property
	def mass(self):
		pass
	@mass.setter
	def mass(self):
		pass

	@property
	def material(self):
		pass
	@material.setter
	def material(self):
		pass

	@property
	def maxMeshSize(self):
		pass
	@maxMeshSize.setter
	def maxMeshSize(self):
		pass

	@property
	def maxThickness(self):
		pass
	@maxThickness.setter
	def maxThickness(self):
		pass

	@property
	def measures(self):
		pass
	@measures.setter
	def measures(self):
		pass

	def meshInfo(self):
		pass

	@property
	def minBoundingBox(self):
		pass
	@minBoundingBox.setter
	def minBoundingBox(self):
		pass

	@property
	def minMeshSize(self):
		pass
	@minMeshSize.setter
	def minMeshSize(self):
		pass

	@property
	def minThickness(self):
		pass
	@minThickness.setter
	def minThickness(self):
		pass

	def modelPositions(self):
		"""
		Forces all objects to return the original model positions instead of the
    current analysis positions.

    Useful when defining draw methods on GeneralObjects where behaviour is 
    different while animating.
    
		"""
		pass

	@property
	def modifiable(self):
		pass
	@modifiable.setter
	def modifiable(self):
		pass

	@property
	def morphable(self):
		pass
	@morphable.setter
	def morphable(self):
		pass

	@property
	def motionAnalysisSettings(self):
		pass
	@motionAnalysisSettings.setter
	def motionAnalysisSettings(self):
		pass

	@property
	def motionContacts(self):
		pass
	@motionContacts.setter
	def motionContacts(self):
		pass

	@property
	def motionReviewSettings(self):
		pass
	@motionReviewSettings.setter
	def motionReviewSettings(self):
		pass

	@property
	def motors(self):
		pass
	@motors.setter
	def motors(self):
		pass

	@property
	def movable(self):
		pass
	@movable.setter
	def movable(self):
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	@property
	def numberOfElements(self):
		pass
	@numberOfElements.setter
	def numberOfElements(self):
		pass

	@property
	def parent(self):
		pass
	@parent.setter
	def parent(self):
		pass

	@property
	def parts(self):
		pass
	@parts.setter
	def parts(self):
		pass

	@property
	def position(self):
		pass
	@position.setter
	def position(self):
		pass

	@property
	def proximities(self):
		pass
	@proximities.setter
	def proximities(self):
		pass

	@property
	def rigidGroups(self):
		pass
	@rigidGroups.setter
	def rigidGroups(self):
		pass

	@property
	def rotations(self):
		pass
	@rotations.setter
	def rotations(self):
		pass

	def save(self,file, selected=[]):
		"""
		Save the active model to the path specified in file. 
    If selected only these get saved, similar to save selected in the 
    Inspire application.

    Args:
      file (str) : File name and path, where the file needs to be saved.
      selected (Assembly, list[Assembly], list[Part], Part): An assembly 
        or a list of assemblies or part or a list of parts to save.

    Returns:
      bool : True, if file save is successful else False.
    
		"""
		pass

	def setValue(self,attr, value):
		"""
		Alias for setattr (attr, value)
    Args:
      attr (str): Attribute name to sets its value.
      value (str): Attribute value to set .
    
		"""
		pass

	def setValues(self,**kwds):
		"""
		Sets passed name/value pairs.
    
    Values are set in a standard order (the order the attribute is defined
    on the class) which is required in certain cases when an attribute's
    setter expects another attribute to have already been set.
    For example, setting a reference before a location that is wrt it.
    
    Args:
      **kwds: Set attributes in one go.
    
		"""
		pass

	@property
	def shapeVariables(self):
		pass
	@shapeVariables.setter
	def shapeVariables(self):
		pass

	def simplifyHoles(self,entity, minSize="0", maxSize=None):
		"""
		Finds and removes holes and pockets, and find raised areas such as lettering.

  Args:
    entity (Part | Assembly | Feature): Part/Assembly from which you want to 
      remove the holes from or FeatureCircular which needs to be removed.
    minSize (float): Minimum size of hole.
    maxSize (float): Maximum size of hole.
  
		"""
		pass

	def simplifyImprints(self,entity):
		"""
		Finds and removes imprints from a part.

  An imprint is an edge or a point that appears on a surface that can be removed
  without changing the underlying integrity of the surface, such as scratches or
  trimmed points.

  Args:
    entity (Part | Assembly | FeatureLinear): Part/Assembly from which you want to
      remove the imprints from or FeatureLinear imprint to be removed.
  
		"""
		pass

	def simplifyPlugs(self,entity, minSize="0", maxSize=None):
		"""
		Finds holes and pockets, and plug them by filling the area with a new part

  Args:
    entity (Part | Assembly | Feature): Part/Assembly from which you want to plug 
      the holes or a Circular feature that needs to be plugged.
    minSize (float): Minimum size of plug.
    maxSize (float): Maximum size of plug.
  
		"""
		pass

	def simplifyRounds(self,entity, roundType="ALL", minSize="0", maxSize=None):
		"""
		Finds and removes both round (convex) and fillet (concave) surfaces.

  Args:
    entity (Part | Assembly | Feature): Part/Assembly from which you want to 
      remove the fillets, chamfers from or a Feature to be removed.
    roundType (str): Valid values are: ROUNDS, FILLETS, CHAMFERS and ALL.
    minSize (float): Minimum size of round.
    maxSize (float): Maximum size of round.
  
		"""
		pass

	@property
	def sketches(self):
		pass
	@sketches.setter
	def sketches(self):
		pass

	@property
	def spiders(self):
		pass
	@spiders.setter
	def spiders(self):
		pass

	@property
	def spotWelds(self):
		pass
	@spotWelds.setter
	def spotWelds(self):
		pass

	def switchToDesignParts(self):
		"""
		Change all part alternatives to the design space
		"""
		pass

	def switchToOptimizedParts(self,name):
		"""
		Change part alternatives to an optimized result.

    Args:
      name (str): The name of the optimization to switch to.
    
		"""
		pass

	@property
	def symmetryConstraints(self):
		pass
	@symmetryConstraints.setter
	def symmetryConstraints(self):
		pass

	@property
	def systems(self):
		pass
	@systems.setter
	def systems(self):
		pass

	@property
	def temperatures(self):
		pass
	@temperatures.setter
	def temperatures(self):
		pass

	@property
	def torsionSprings(self):
		pass
	@torsionSprings.setter
	def torsionSprings(self):
		pass

	@property
	def translationalInitialConditions(self):
		pass
	@translationalInitialConditions.setter
	def translationalInitialConditions(self):
		pass

	@property
	def transparency(self):
		pass
	@transparency.setter
	def transparency(self):
		pass

	def updateContacts(self,solver="OptiStruct", parts=None, searchDistance=None, visibleOnly=True, ignoreGroups="rigid ground", useExistingSearchDistances=True, penetrationTolerance=None, useExistingPenetrationTolerance=True, resolution="Low", useExistingResolution=True):
		"""
		Create or update contacts in model to account for part creation or
    movement.

    Always call before querying Contact objects.

    Note that this may also delete contacts, for example between grounded parts.
    
    Args:
      solver (str | None): OptiStruct, SimSolid
        None uses preference: Run Options -> Analysis solver.
      parts (list[Part]): Limit contact finding to specified parts.
      searchDistance (float): Contact gap tolerance.
        Use 'auto' for auto calculated default.
        Defaults to model.contactSearchDistance.
      visibleOnly (bool): Search only visible parts.
      ignoreGroups (rigid ground): Ignores the group parts during contact updates.
      useExistingSearchDistances (bool): Don't update already existing contacts.
    Only relevant for SimSolid contacts:
      penetrationTolerance (float) : Penetration gap tolerance.
        Use 'auto' for auto calculated default.
        Defaults to model.contactPenetrationTolerance.
      useExistingPenetrationTolerance(bool) : Don't update already existing penetration
        tolerance.
      resolution (str) : Contacts density. It can be Low, Medium, High.
      useExistingResolution (bool) : Don't update already existing resolution.

    Returns:
      bool : True, if contacts where updated successfully else False.
    
		"""
		pass

	@property
	def variables(self):
		pass
	@variables.setter
	def variables(self):
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

	@property
	def volume(self):
		pass
	@volume.setter
	def volume(self):
		pass

	def wasValueSet(self,attr):
		"""
		Check if attribute was set

    Args:
      attr (str): Attribute name to check it value set or not

    Returns:
      bool: True, if value was set else false.
    
		"""
		pass

class ModelListener:
	def __init__(self,*typesOrObjects):
		"""
Listens to the data model for object creation, modification and deletion.
  
"""
		pass

	def activateModelListener(self,*typesOrObjects):
		"""
		Activates or start listening to the data model and call the handlers,
      when the specified types are created, destroyed or modified.
    
    Args:    
       *typesOrObjects (Part, BC, Motor, ...): Types or objects to listen to.
        Sub classes of Named (Features are not supported).
    
		"""
		pass

	def deactivateModelListener(self):
		"""
		Stops listening for data model changes.
    
		"""
		pass

	def isModelListenerActive(self):
		"""
		Returns, True if the model listener is active else False.
		"""
		pass

	def modelListenerInactive(self):
		"""
		Context to temporarily disable all the callbacks.
		"""
		pass

	def onObjectCreated(self,obj):
		"""
		Implement if interested when an object is created.

    Not directly supported for Features but you can detect geometry changes
     using onObjectModified of the Part.features attribute.

    This can be caused by:
      - Explicit object creation.
      - Undo of destroy.
      - Rollback/forward of construction history.

    Args:
      obj (Named)
    
		"""
		pass

	def onObjectDeleted(self,obj):
		"""
		Implement if interested when an object is destroyed.
    
    This can be caused by:
      - Explicit obj.destroy()
      - Undo of create.
      - Rollback/forward of construction history.

    Args:
      obj (Named)
    
		"""
		pass

	def onObjectModified(self,obj, attr):
		"""
		Implement if interested when an object's attribute value changes.

    Args:
      obj (Named): Object whose attribute got modified.
        Check if attr == 'features' to react to geometry changes.
      attr (str): Name of attribute like 'mass', 'name', ...
    
		"""
		pass

	def onPartAnimationPositionModified(self,part):
		"""
		Implemented if interested when a part's animationPosition changes.
    
    This is a temporary state that isn't recorded in history.

    Args:
      part (Named)
    
		"""
		pass

class Morph:
	def __init__(self,**kwds):
		"""
The Morph tool performs a morphing operation between two implicit
  bodies.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class Multiply:
	def __init__(self,**kwds):
		"""
Implicit Multiply operation.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class Named:
	def __init__(self):
		"""
Base class for all data model objects except Features.
  
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	def destroy(self):
		"""
		Delete the object removing it from the model.
    
    The object may come back due to an undo/redo.
    
		"""
		pass

	def getAllChildren(self,type=None, **kwds):
		"""
		Returns a list of all children that matches the specified type.

    Args:
      type (list[Named]): Filter to use to get the children based on object type.
      **kwds : Additional keyword arguments to match other attributes of the object.

    Returns:
      list[Union[Part, Motor, BoundaryCondition, ...]]: The list of children that satisfy the supplied filters.
    
		"""
		pass

	def getAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value.

    Args:
      name (str): Attribute name to find its class.
    
		"""
		pass

	def getAttributes(self,type=None, **kwds):
		"""
		Return an dict of the attributes.
    Pass type and kwds to filter by type and Attribute properties

    Args:
      type (type): Filters the attribute based on type
      **kwds : Additional kwds argument to filter attribute by its properties

    Returns:
      dict: Return an OrderedDict of the attributes
    
		"""
		pass

	def getChild(self,name=None, recursive=False, **kwds):
		"""
		Returns the child of the object which matches the specified unique name.

    Args:
      name (str): The name of the child object.
      recursive (bool):  Search all descendents.
      **kwds : Additional keyword arguments to match attributes of the object.

    Returns:
      Named: The child object which satisfies the specified filters.
    
		"""
		pass

	def getChildren(self,type=None, recursive=False, sorted=False, **kwds):
		"""
		Returns a list of children that is of the specified type.

    Args:
      type (Type[Named]): Filter objects by class.
      recursive (bool): True to get all descendent Parts and Assemblies.
      sorted (bool): Sort the children base on id.

    Returns:
      list[Named]
    
		"""
		pass

	def getClass(self,className):
		"""
		Returns the class of the object.
    
    It can be simple or qualified (with namespace). If the name is simple, we 
    prepend the cls.namespace.

    Args:
      className (Union[Part, Occurrence, Named..]) : The class name. 
     
    Returns:
      Union[Part, Occurrence, Named..] : The class for the specified className. 

    
		"""
		pass

	def getClassAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value

    Args:
      name (str): Name of the attribute
    
		"""
		pass

	def getDependents(self,recursive=False, **kwds):
		"""
		Get objects that reference this object through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getGuiAttributeNames(self):
		"""
		Return list of the attribute names that are in the gui

    Returns:
      list: Returns list of active gui attribute
    
		"""
		pass

	def getGuiValue(self,attr, **kwds):
		"""
		Get value formatted to be shown in the gui

    Args:
      attr (str): Attribute name to gets its gui value.

    Returns:
      str: Returns a string of the value with its gui units, like "5 mm/s".
    
		"""
		pass

	def getReferences(self,recursive=False, **kwds):
		"""
		Get objects this object references through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getSerializedAttributeValues(self):
		pass

	def getValue(self,attr):
		"""
		Return the attribute value for passed attribute name.
    
    Args:
      attr (String): Attribute name to gets its value.

    Returns:
      str: Returns the attribute value
    
		"""
		pass

	def isa(self,type=None, filter=None, name=None, wildcard=None, **kwds):
		"""
		Determines if the object matches the specified settings or not.
    
    Args:
      type (Union[Part, Assembly, Contact..]): The type of the object.
      filter (method): Return value of specified callback method.
      name (str): Name that matches exactly with object name.
      wildcard (str): A pattern to match exactly with the object name.
      **kwds : Additional keyword arguments to match other attributes.

    Returns:
      bool : True, if a match is found, otherwise False.
    
		"""
		pass

	def modelPositions(self):
		"""
		Forces all objects to return the original model positions instead of the
    current analysis positions.

    Useful when defining draw methods on GeneralObjects where behaviour is 
    different while animating.
    
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	@property
	def parent(self):
		pass
	@parent.setter
	def parent(self):
		pass

	def setValue(self,attr, value):
		"""
		Alias for setattr (attr, value)
    Args:
      attr (str): Attribute name to sets its value.
      value (str): Attribute value to set .
    
		"""
		pass

	def setValues(self,**kwds):
		"""
		Sets passed name/value pairs.
    
    Values are set in a standard order (the order the attribute is defined
    on the class) which is required in certain cases when an attribute's
    setter expects another attribute to have already been set.
    For example, setting a reference before a location that is wrt it.
    
    Args:
      **kwds: Set attributes in one go.
    
		"""
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

	def wasValueSet(self,attr):
		"""
		Check if attribute was set

    Args:
      attr (str): Attribute name to check it value set or not

    Returns:
      bool: True, if value was set else false.
    
		"""
		pass

class Normalize:
	def __init__(self,**kwds):
		"""
Implicit Normalize Vector creation.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class Occurrence:
	def __init__(self):
		"""
Base class for Model, Assembly and Part.
  
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	@property
	def animationPosition(self):
		pass
	@animationPosition.setter
	def animationPosition(self):
		pass

	@property
	def autoCalculateCG(self):
		pass
	@autoCalculateCG.setter
	def autoCalculateCG(self):
		pass

	@property
	def autoCalculateMass(self):
		pass
	@autoCalculateMass.setter
	def autoCalculateMass(self):
		pass

	@property
	def autoCalculateMoment(self):
		pass
	@autoCalculateMoment.setter
	def autoCalculateMoment(self):
		pass

	@property
	def axisAlignedBoundingBox(self):
		pass
	@axisAlignedBoundingBox.setter
	def axisAlignedBoundingBox(self):
		pass

	@property
	def beadPatterns(self):
		pass
	@beadPatterns.setter
	def beadPatterns(self):
		pass

	@property
	def cg(self):
		pass
	@cg.setter
	def cg(self):
		pass

	@property
	def cogConstraints(self):
		pass
	@cogConstraints.setter
	def cogConstraints(self):
		pass

	@property
	def color(self):
		pass
	@color.setter
	def color(self):
		pass

	@property
	def concentratedMasses(self):
		pass
	@concentratedMasses.setter
	def concentratedMasses(self):
		pass

	def destroy(self):
		"""
		Destroys occurrences from the model.
    
		"""
		pass

	@property
	def detectCollisions(self):
		pass
	@detectCollisions.setter
	def detectCollisions(self):
		pass

	@property
	def displacementConstraints(self):
		pass
	@displacementConstraints.setter
	def displacementConstraints(self):
		pass

	@property
	def drawDirections(self):
		pass
	@drawDirections.setter
	def drawDirections(self):
		pass

	@property
	def enforcedDisplacements(self):
		pass
	@enforcedDisplacements.setter
	def enforcedDisplacements(self):
		pass

	def getAllChildren(self,type=None, **kwds):
		"""
		Returns a list of all children that matches the specified type.

    Args:
      type (list[Named]): Filter to use to get the children based on object type.
      **kwds : Additional keyword arguments to match other attributes of the object.

    Returns:
      list[Union[Part, Motor, BoundaryCondition, ...]]: The list of children that satisfy the supplied filters.
    
		"""
		pass

	def getAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value.

    Args:
      name (str): Attribute name to find its class.
    
		"""
		pass

	def getAttributes(self,type=None, **kwds):
		"""
		Return an dict of the attributes.
    Pass type and kwds to filter by type and Attribute properties

    Args:
      type (type): Filters the attribute based on type
      **kwds : Additional kwds argument to filter attribute by its properties

    Returns:
      dict: Return an OrderedDict of the attributes
    
		"""
		pass

	def getChild(self,name=None, recursive=False, **kwds):
		"""
		Returns the child of the object which matches the specified unique name.

    Args:
      name (str): The name of the child object.
      recursive (bool):  Search all descendents.
      **kwds : Additional keyword arguments to match attributes of the object.

    Returns:
      Named: The child object which satisfies the specified filters.
    
		"""
		pass

	def getChildren(self,type=None, recursive=False, sorted=False, **kwds):
		"""
		Returns a list of children that is of the specified type.

    Args:
      type (Type[Named]): Filter objects by class.
      recursive (bool): True to get all descendent Parts and Assemblies.
      sorted (bool): Sort the children base on id.

    Returns:
      list[Named]
    
		"""
		pass

	def getClass(self,className):
		"""
		Returns the class of the object.
    
    It can be simple or qualified (with namespace). If the name is simple, we 
    prepend the cls.namespace.

    Args:
      className (Union[Part, Occurrence, Named..]) : The class name. 
     
    Returns:
      Union[Part, Occurrence, Named..] : The class for the specified className. 

    
		"""
		pass

	def getClassAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value

    Args:
      name (str): Name of the attribute
    
		"""
		pass

	def getDependents(self,recursive=False, **kwds):
		"""
		Get objects that reference this object through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getGuiAttributeNames(self):
		"""
		Return list of the attribute names that are in the gui

    Returns:
      list: Returns list of active gui attribute
    
		"""
		pass

	def getGuiValue(self,attr, **kwds):
		"""
		Get value formatted to be shown in the gui

    Args:
      attr (str): Attribute name to gets its gui value.

    Returns:
      str: Returns a string of the value with its gui units, like "5 mm/s".
    
		"""
		pass

	def getReferences(self,recursive=False, **kwds):
		"""
		Get objects this object references through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getSerializedAttributeValues(self):
		pass

	def getValue(self,attr):
		"""
		Return the attribute value for passed attribute name.
    
    Args:
      attr (String): Attribute name to gets its value.

    Returns:
      str: Returns the attribute value
    
		"""
		pass

	@property
	def ground(self):
		pass
	@ground.setter
	def ground(self):
		pass

	@property
	def grounded(self):
		pass
	@grounded.setter
	def grounded(self):
		pass

	@property
	def ip(self):
		pass
	@ip.setter
	def ip(self):
		pass

	def isa(self,type=None, filter=None, name=None, wildcard=None, **kwds):
		"""
		Determines if the object matches the specified settings or not.
    
    Args:
      type (Union[Part, Assembly, Contact..]): The type of the object.
      filter (method): Return value of specified callback method.
      name (str): Name that matches exactly with object name.
      wildcard (str): A pattern to match exactly with the object name.
      **kwds : Additional keyword arguments to match other attributes.

    Returns:
      bool : True, if a match is found, otherwise False.
    
		"""
		pass

	@property
	def location(self):
		pass
	@location.setter
	def location(self):
		pass

	@property
	def mass(self):
		pass
	@mass.setter
	def mass(self):
		pass

	@property
	def material(self):
		pass
	@material.setter
	def material(self):
		pass

	def meshInfo(self):
		pass

	@property
	def minBoundingBox(self):
		pass
	@minBoundingBox.setter
	def minBoundingBox(self):
		pass

	def modelPositions(self):
		"""
		Forces all objects to return the original model positions instead of the
    current analysis positions.

    Useful when defining draw methods on GeneralObjects where behaviour is 
    different while animating.
    
		"""
		pass

	@property
	def modifiable(self):
		pass
	@modifiable.setter
	def modifiable(self):
		pass

	@property
	def morphable(self):
		pass
	@morphable.setter
	def morphable(self):
		pass

	@property
	def movable(self):
		pass
	@movable.setter
	def movable(self):
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	@property
	def parent(self):
		pass
	@parent.setter
	def parent(self):
		pass

	@property
	def position(self):
		pass
	@position.setter
	def position(self):
		pass

	@property
	def rotations(self):
		pass
	@rotations.setter
	def rotations(self):
		pass

	def save(self,file):
		"""
		Save the Part in the specified file.

    Args:
      file (str) : File name and path, where the file needs to be saved.
        Valid file extensions are:
          '.x_b', '.x_t', '.xmt_bin', '.xmt_txt', '.sat', '.sab', '.iges', '.igs',
          '.stl', '.step', '.stp', '.obj', '.vrml', '.vrl'.
    
		"""
		pass

	def setValue(self,attr, value):
		"""
		Alias for setattr (attr, value)
    Args:
      attr (str): Attribute name to sets its value.
      value (str): Attribute value to set .
    
		"""
		pass

	def setValues(self,**kwds):
		"""
		Sets passed name/value pairs.
    
    Values are set in a standard order (the order the attribute is defined
    on the class) which is required in certain cases when an attribute's
    setter expects another attribute to have already been set.
    For example, setting a reference before a location that is wrt it.
    
    Args:
      **kwds: Set attributes in one go.
    
		"""
		pass

	def simplifyHoles(self,entity, minSize="0", maxSize=None):
		"""
		Finds and removes holes and pockets, and find raised areas such as lettering.

  Args:
    entity (Part | Assembly | Feature): Part/Assembly from which you want to 
      remove the holes from or FeatureCircular which needs to be removed.
    minSize (float): Minimum size of hole.
    maxSize (float): Maximum size of hole.
  
		"""
		pass

	def simplifyImprints(self,entity):
		"""
		Finds and removes imprints from a part.

  An imprint is an edge or a point that appears on a surface that can be removed
  without changing the underlying integrity of the surface, such as scratches or
  trimmed points.

  Args:
    entity (Part | Assembly | FeatureLinear): Part/Assembly from which you want to
      remove the imprints from or FeatureLinear imprint to be removed.
  
		"""
		pass

	def simplifyPlugs(self,entity, minSize="0", maxSize=None):
		"""
		Finds holes and pockets, and plug them by filling the area with a new part

  Args:
    entity (Part | Assembly | Feature): Part/Assembly from which you want to plug 
      the holes or a Circular feature that needs to be plugged.
    minSize (float): Minimum size of plug.
    maxSize (float): Maximum size of plug.
  
		"""
		pass

	def simplifyRounds(self,entity, roundType="ALL", minSize="0", maxSize=None):
		"""
		Finds and removes both round (convex) and fillet (concave) surfaces.

  Args:
    entity (Part | Assembly | Feature): Part/Assembly from which you want to 
      remove the fillets, chamfers from or a Feature to be removed.
    roundType (str): Valid values are: ROUNDS, FILLETS, CHAMFERS and ALL.
    minSize (float): Minimum size of round.
    maxSize (float): Maximum size of round.
  
		"""
		pass

	@property
	def spiders(self):
		pass
	@spiders.setter
	def spiders(self):
		pass

	@property
	def symmetryConstraints(self):
		pass
	@symmetryConstraints.setter
	def symmetryConstraints(self):
		pass

	@property
	def temperatures(self):
		pass
	@temperatures.setter
	def temperatures(self):
		pass

	@property
	def transparency(self):
		pass
	@transparency.setter
	def transparency(self):
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

	@property
	def volume(self):
		pass
	@volume.setter
	def volume(self):
		pass

	def wasValueSet(self,attr):
		"""
		Check if attribute was set

    Args:
      attr (str): Attribute name to check it value set or not

    Returns:
      bool: True, if value was set else false.
    
		"""
		pass

class Offset:
	def __init__(self,**kwds):
		"""
The Offset tool can be used to inwardly (negative) or outwardly
  (positive) offset the surface of an implicit body. The surface always moves
  in a direction that is normal to the original surface.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class OptiStructAnalysis:
	def __init__(self,params="{}", runOptions="{}", ignoreWarnings=False):
		"""
Run structural analysis using OptiStruct
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	def destroy(self):
		"""
		Delete the object removing it from the model.
    
    The object may come back due to an undo/redo.
    
		"""
		pass

	def export(self,file, params="{}", runOptions="{}", ignoreWarnings=False):
		"""
		Download solver file (.fem, .ssp) for run
    
    Args:
      file (str): File path to save to
      
      See constructor for params, runOptions, ignoreWarnings
    
		"""
		pass

	def getAllChildren(self,type=None, **kwds):
		"""
		Returns a list of all children that matches the specified type.

    Args:
      type (list[Named]): Filter to use to get the children based on object type.
      **kwds : Additional keyword arguments to match other attributes of the object.

    Returns:
      list[Union[Part, Motor, BoundaryCondition, ...]]: The list of children that satisfy the supplied filters.
    
		"""
		pass

	def getAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value.

    Args:
      name (str): Attribute name to find its class.
    
		"""
		pass

	def getAttributes(self,type=None, **kwds):
		"""
		Return an dict of the attributes.
    Pass type and kwds to filter by type and Attribute properties

    Args:
      type (type): Filters the attribute based on type
      **kwds : Additional kwds argument to filter attribute by its properties

    Returns:
      dict: Return an OrderedDict of the attributes
    
		"""
		pass

	def getChild(self,name=None, recursive=False, **kwds):
		"""
		Returns the child of the object which matches the specified unique name.

    Args:
      name (str): The name of the child object.
      recursive (bool):  Search all descendents.
      **kwds : Additional keyword arguments to match attributes of the object.

    Returns:
      Named: The child object which satisfies the specified filters.
    
		"""
		pass

	def getChildren(self,type=None, recursive=False, sorted=False, **kwds):
		"""
		Returns a list of children that is of the specified type.

    Args:
      type (Type[Named]): Filter objects by class.
      recursive (bool): True to get all descendent Parts and Assemblies.
      sorted (bool): Sort the children base on id.

    Returns:
      list[Named]
    
		"""
		pass

	def getClass(self,className):
		"""
		Returns the class of the object.
    
    It can be simple or qualified (with namespace). If the name is simple, we 
    prepend the cls.namespace.

    Args:
      className (Union[Part, Occurrence, Named..]) : The class name. 
     
    Returns:
      Union[Part, Occurrence, Named..] : The class for the specified className. 

    
		"""
		pass

	def getClassAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value

    Args:
      name (str): Name of the attribute
    
		"""
		pass

	def getDependents(self,recursive=False, **kwds):
		"""
		Get objects that reference this object through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getGuiAttributeNames(self):
		"""
		Return list of the attribute names that are in the gui

    Returns:
      list: Returns list of active gui attribute
    
		"""
		pass

	def getGuiValue(self,attr, **kwds):
		"""
		Get value formatted to be shown in the gui

    Args:
      attr (str): Attribute name to gets its gui value.

    Returns:
      str: Returns a string of the value with its gui units, like "5 mm/s".
    
		"""
		pass

	def getReferences(self,recursive=False, **kwds):
		"""
		Get objects this object references through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getSerializedAttributeValues(self):
		pass

	def getValue(self,attr):
		"""
		Return the attribute value for passed attribute name.
    
    Args:
      attr (String): Attribute name to gets its value.

    Returns:
      str: Returns the attribute value
    
		"""
		pass

	def importResults(self,showExplorer=True):
		"""
		Make results available in the Analysis Explorer.
    
    Args:
      showExplorer (bool): Opens the Analysis Explorer dialog (gui mode only)
    
		"""
		pass

	@property
	def imported(self):
		pass
	@imported.setter
	def imported(self):
		pass

	def isa(self,type=None, filter=None, name=None, wildcard=None, **kwds):
		"""
		Determines if the object matches the specified settings or not.
    
    Args:
      type (Union[Part, Assembly, Contact..]): The type of the object.
      filter (method): Return value of specified callback method.
      name (str): Name that matches exactly with object name.
      wildcard (str): A pattern to match exactly with the object name.
      **kwds : Additional keyword arguments to match other attributes.

    Returns:
      bool : True, if a match is found, otherwise False.
    
		"""
		pass

	def modelPositions(self):
		"""
		Forces all objects to return the original model positions instead of the
    current analysis positions.

    Useful when defining draw methods on GeneralObjects where behaviour is 
    different while animating.
    
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	def openResults(self,stage="0"):
		"""
		Open the h3d file to get a cls.Results object.

    Usage:
      with run.openResults() as results:
        print(results)

    Args:
      stage (int): Stage index
    
		"""
		pass

	@property
	def parent(self):
		pass
	@parent.setter
	def parent(self):
		pass

	@property
	def progress(self):
		pass
	@progress.setter
	def progress(self):
		pass

	def setValue(self,attr, value):
		"""
		Alias for setattr (attr, value)
    Args:
      attr (str): Attribute name to sets its value.
      value (str): Attribute value to set .
    
		"""
		pass

	def setValues(self,**kwds):
		"""
		Sets passed name/value pairs.
    
    Values are set in a standard order (the order the attribute is defined
    on the class) which is required in certain cases when an attribute's
    setter expects another attribute to have already been set.
    For example, setting a reference before a location that is wrt it.
    
    Args:
      **kwds: Set attributes in one go.
    
		"""
		pass

	@property
	def solverType(self):
		pass
	@solverType.setter
	def solverType(self):
		pass

	@property
	def status(self):
		pass
	@status.setter
	def status(self):
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

	def wasValueSet(self,attr):
		"""
		Check if attribute was set

    Args:
      attr (str): Attribute name to check it value set or not

    Returns:
      bool: True, if value was set else false.
    
		"""
		pass

	@property
	def workingDir(self):
		pass
	@workingDir.setter
	def workingDir(self):
		pass

class OptiStructReanalysis:
	def __init__(self,synth, density, runOptions="{}", ignoreWarnings=False):
		"""
Run an OptiStructAnalysis on an optimization's generated shape.
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	def destroy(self):
		"""
		Delete the object removing it from the model.
    
    The object may come back due to an undo/redo.
    
		"""
		pass

	def export(self,file, params="{}", runOptions="{}", ignoreWarnings=False):
		"""
		Download solver file (.fem, .ssp) for run
    
    Args:
      file (str): File path to save to
      
      See constructor for params, runOptions, ignoreWarnings
    
		"""
		pass

	def getAllChildren(self,type=None, **kwds):
		"""
		Returns a list of all children that matches the specified type.

    Args:
      type (list[Named]): Filter to use to get the children based on object type.
      **kwds : Additional keyword arguments to match other attributes of the object.

    Returns:
      list[Union[Part, Motor, BoundaryCondition, ...]]: The list of children that satisfy the supplied filters.
    
		"""
		pass

	def getAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value.

    Args:
      name (str): Attribute name to find its class.
    
		"""
		pass

	def getAttributes(self,type=None, **kwds):
		"""
		Return an dict of the attributes.
    Pass type and kwds to filter by type and Attribute properties

    Args:
      type (type): Filters the attribute based on type
      **kwds : Additional kwds argument to filter attribute by its properties

    Returns:
      dict: Return an OrderedDict of the attributes
    
		"""
		pass

	def getChild(self,name=None, recursive=False, **kwds):
		"""
		Returns the child of the object which matches the specified unique name.

    Args:
      name (str): The name of the child object.
      recursive (bool):  Search all descendents.
      **kwds : Additional keyword arguments to match attributes of the object.

    Returns:
      Named: The child object which satisfies the specified filters.
    
		"""
		pass

	def getChildren(self,type=None, recursive=False, sorted=False, **kwds):
		"""
		Returns a list of children that is of the specified type.

    Args:
      type (Type[Named]): Filter objects by class.
      recursive (bool): True to get all descendent Parts and Assemblies.
      sorted (bool): Sort the children base on id.

    Returns:
      list[Named]
    
		"""
		pass

	def getClass(self,className):
		"""
		Returns the class of the object.
    
    It can be simple or qualified (with namespace). If the name is simple, we 
    prepend the cls.namespace.

    Args:
      className (Union[Part, Occurrence, Named..]) : The class name. 
     
    Returns:
      Union[Part, Occurrence, Named..] : The class for the specified className. 

    
		"""
		pass

	def getClassAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value

    Args:
      name (str): Name of the attribute
    
		"""
		pass

	def getDependents(self,recursive=False, **kwds):
		"""
		Get objects that reference this object through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getGuiAttributeNames(self):
		"""
		Return list of the attribute names that are in the gui

    Returns:
      list: Returns list of active gui attribute
    
		"""
		pass

	def getGuiValue(self,attr, **kwds):
		"""
		Get value formatted to be shown in the gui

    Args:
      attr (str): Attribute name to gets its gui value.

    Returns:
      str: Returns a string of the value with its gui units, like "5 mm/s".
    
		"""
		pass

	def getReferences(self,recursive=False, **kwds):
		"""
		Get objects this object references through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getSerializedAttributeValues(self):
		pass

	def getValue(self,attr):
		"""
		Return the attribute value for passed attribute name.
    
    Args:
      attr (String): Attribute name to gets its value.

    Returns:
      str: Returns the attribute value
    
		"""
		pass

	def importResults(self,showExplorer=True):
		"""
		Make results available in the Analysis Explorer.
    
    Args:
      showExplorer (bool): Opens the Analysis Explorer dialog (gui mode only)
    
		"""
		pass

	@property
	def imported(self):
		pass
	@imported.setter
	def imported(self):
		pass

	def isa(self,type=None, filter=None, name=None, wildcard=None, **kwds):
		"""
		Determines if the object matches the specified settings or not.
    
    Args:
      type (Union[Part, Assembly, Contact..]): The type of the object.
      filter (method): Return value of specified callback method.
      name (str): Name that matches exactly with object name.
      wildcard (str): A pattern to match exactly with the object name.
      **kwds : Additional keyword arguments to match other attributes.

    Returns:
      bool : True, if a match is found, otherwise False.
    
		"""
		pass

	def modelPositions(self):
		"""
		Forces all objects to return the original model positions instead of the
    current analysis positions.

    Useful when defining draw methods on GeneralObjects where behaviour is 
    different while animating.
    
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	def openResults(self,stage="0"):
		"""
		Open the h3d file to get a cls.Results object.

    Usage:
      with run.openResults() as results:
        print(results)

    Args:
      stage (int): Stage index
    
		"""
		pass

	@property
	def parent(self):
		pass
	@parent.setter
	def parent(self):
		pass

	@property
	def progress(self):
		pass
	@progress.setter
	def progress(self):
		pass

	def setValue(self,attr, value):
		"""
		Alias for setattr (attr, value)
    Args:
      attr (str): Attribute name to sets its value.
      value (str): Attribute value to set .
    
		"""
		pass

	def setValues(self,**kwds):
		"""
		Sets passed name/value pairs.
    
    Values are set in a standard order (the order the attribute is defined
    on the class) which is required in certain cases when an attribute's
    setter expects another attribute to have already been set.
    For example, setting a reference before a location that is wrt it.
    
    Args:
      **kwds: Set attributes in one go.
    
		"""
		pass

	@property
	def solverType(self):
		pass
	@solverType.setter
	def solverType(self):
		pass

	@property
	def status(self):
		pass
	@status.setter
	def status(self):
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

	def wasValueSet(self,attr):
		"""
		Check if attribute was set

    Args:
      attr (str): Attribute name to check it value set or not

    Returns:
      bool: True, if value was set else false.
    
		"""
		pass

	@property
	def workingDir(self):
		pass
	@workingDir.setter
	def workingDir(self):
		pass

class OrderedSet:
	def __init__(self,iterable=None):
		pass

	def add(self,item):
		pass

	def append(self,item):
		pass

	def clear(self):
		"""
		This is slow (creates N new iterators!) but effective.
		"""
		pass

	def discard(self,item):
		pass

	def insert(self,index, item):
		pass

	def isdisjoint(self,other):
		"""
		Return True if two sets have a null intersection.
		"""
		pass

	def pop(self):
		"""
		Return the popped value.  Raise KeyError if empty.
		"""
		pass

	def remove(self,value):
		"""
		Remove an element. If not a member, raise a KeyError.
		"""
		pass

	def update(self,it):
		pass

class OriginImplicit:
	def __init__(self,cppName: str="",doc: str=""):
		"""
list[x,y,z]
"""
		pass

class Parameter:
	def __init__(self,cppName: str="",doc: str=""):
		pass

class Part:
	def __init__(self,parent=None, **kwds):
		"""
A geometric object made up of any combination of solids, surfaces, and
  curves (Features). It can also be a mesh.
  
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	@property
	def animationPosition(self):
		pass
	@animationPosition.setter
	def animationPosition(self):
		pass

	@property
	def autoCalcMotionContactResolution(self):
		pass
	@autoCalcMotionContactResolution.setter
	def autoCalcMotionContactResolution(self):
		pass

	@property
	def autoCalculateCG(self):
		pass
	@autoCalculateCG.setter
	def autoCalculateCG(self):
		pass

	@property
	def autoCalculateMass(self):
		pass
	@autoCalculateMass.setter
	def autoCalculateMass(self):
		pass

	@property
	def autoCalculateMeshSize(self):
		pass
	@autoCalculateMeshSize.setter
	def autoCalculateMeshSize(self):
		pass

	@property
	def autoCalculateMoment(self):
		pass
	@autoCalculateMoment.setter
	def autoCalculateMoment(self):
		pass

	@property
	def autoCalculateThickness(self):
		pass
	@autoCalculateThickness.setter
	def autoCalculateThickness(self):
		pass

	@property
	def axisAlignedBoundingBox(self):
		pass
	@axisAlignedBoundingBox.setter
	def axisAlignedBoundingBox(self):
		pass

	@property
	def beadPatterns(self):
		pass
	@beadPatterns.setter
	def beadPatterns(self):
		pass

	def booleanCombine(self,target, tools=None):
		"""
		Combines the specified parts.

  Args:
    target (Part): Part to be combined with tools.
    tools (list[Part]): Parts to be combined with target. Destroyed after combine.

  Returns:
    Part: The combined part.
  
		"""
		pass

	def booleanIntersect(self,targets, tools, keepTargets=False, keepTools=False):
		"""
		Retains only the intersecting portions of two sets of solid objects.

  Args:
    targets (list[Part]): The first set of parts.
    tools (list[Part]): A list of parts for boolean intersect operation.
    keepTargets (bool): If True, preserves the target parts after the operation.
    keepTools (bool): If True, preserves the tools parts after the operation.

  Returns:
    Part: The intersected part.
  
		"""
		pass

	def booleanSubtract(self,targets, tools, keepTools=False):
		"""
		Carves out one set of solid objects from another set of solid objects.

  Args:
    targets (list[Part]): The parts being carved.
    tools (list[Part]): The parts doing the carving.
    keepTools (bool): If True, preserves the tools after the operation.

  Returns:
    Part: The remaining part.
  
		"""
		pass

	def breakInstance(self,parts):
		"""
		Break the instances of a part.

  Args:
    parts (list[Part]): Parts for breaking instances.
  
		"""
		pass

	@property
	def cg(self):
		pass
	@cg.setter
	def cg(self):
		pass

	def circularPattern(self,input, axis, angle=60, count=3, equalSpacing=False, instances=False, symmetry=False, axisReverse=False, result="NEW_PART", mergeWithAllParts=True, mergeParts=None, copiesToSkip=None):
		"""
		Circular Pattern parts or faces around an axis.

  Args:
    input (list[Part] | list[FeatureArea]): Parts or Features to create circular
      pattern.
    axis (math.Vector | FeatureCurve | Axis): Axis is a reference line, edge,
      or axis to which the pattern will be parallel.
    angle (float): Angle within which the copies are equally spaced.
    count (int): Number of copies.
    equalSpacing (bool): If True, equally space the copies within a specified
      Angle.
    instances (bool): If True, any changes to part or face will apply to all
      instances.
    symmetry (bool): Symmetry in Direction 1.
    axisReverse (bool): Reverse the axis in Direction 1.
    result (str): Result type of circular pattern.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeParts.
    mergeParts (list[Part]): Parts to be merged with circular pattern.
    copiesToSkip (dict{Part: list[indicesToSkip]}): Set copies to skip. It's
      basically a dictionary which contains Part as a key and list of indices to
      skip as values.

  Returns:
  list[Part]: List of parts created.
  
		"""
		pass

	@property
	def cogConstraints(self):
		pass
	@cogConstraints.setter
	def cogConstraints(self):
		pass

	@property
	def color(self):
		pass
	@color.setter
	def color(self):
		pass

	@property
	def concentratedMasses(self):
		pass
	@concentratedMasses.setter
	def concentratedMasses(self):
		pass

	def convertBodiesToParts(self,parts):
		"""
		Convert disconnected bodies to parts.

  Args:
    parts (list[Part]): The parts to be converted.

  Returns:
    list[Part]: Newly created parts.
  
		"""
		pass

	def convertToMass(self,parts, parent=None):
		"""
		Replace Parts to concentrated mass.

  Args:
    parts (list[Part]): Parts to be replaced with concentrated mass.
    parent (Part): Parent for the mass created.
  
		"""
		pass

	def convertToTriangleMesh(self,parts):
		"""
		Convert Parts to triangle mesh.

  Args:
    parts (list[Part]): Parts to be converted in triangle mesh.
  
		"""
		pass

	@property
	def currentRepresentation(self):
		pass
	@currentRepresentation.setter
	def currentRepresentation(self):
		pass

	@property
	def designSpace(self):
		pass
	@designSpace.setter
	def designSpace(self):
		pass

	def destroy(self):
		"""
		Destroys occurrences from the model.
    
		"""
		pass

	@property
	def detectCollisions(self):
		pass
	@detectCollisions.setter
	def detectCollisions(self):
		pass

	@property
	def dimensions(self):
		pass
	@dimensions.setter
	def dimensions(self):
		pass

	@property
	def displacementConstraints(self):
		pass
	@displacementConstraints.setter
	def displacementConstraints(self):
		pass

	@property
	def drawDirections(self):
		pass
	@drawDirections.setter
	def drawDirections(self):
		pass

	@property
	def enforcedDisplacements(self):
		pass
	@enforcedDisplacements.setter
	def enforcedDisplacements(self):
		pass

	@property
	def features(self):
		pass
	@features.setter
	def features(self):
		pass

	def findMinimumSeparation(self,other):
		"""
		Find closest points between two parts
    
    Args:
      other (Part): The 2nd part.
      
    Returns:
      namedtuple("ClosestPoints", "point1 point2 distance feature1 feature2")
    
		"""
		pass

	@property
	def flexible(self):
		pass
	@flexible.setter
	def flexible(self):
		pass

	def getAllChildren(self,type=None, **kwds):
		"""
		Returns a list of all children that matches the specified type.

    Args:
      type (list[Named]): Filter to use to get the children based on object type.
      **kwds : Additional keyword arguments to match other attributes of the object.

    Returns:
      list[Union[Part, Motor, BoundaryCondition, ...]]: The list of children that satisfy the supplied filters.
    
		"""
		pass

	def getAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value.

    Args:
      name (str): Attribute name to find its class.
    
		"""
		pass

	def getAttributes(self,type=None, **kwds):
		"""
		Return an dict of the attributes.
    Pass type and kwds to filter by type and Attribute properties

    Args:
      type (type): Filters the attribute based on type
      **kwds : Additional kwds argument to filter attribute by its properties

    Returns:
      dict: Return an OrderedDict of the attributes
    
		"""
		pass

	def getChild(self,name=None, recursive=False, **kwds):
		"""
		Returns the child of the object which matches the specified unique name.

    Args:
      name (str): The name of the child object.
      recursive (bool):  Search all descendents.
      **kwds : Additional keyword arguments to match attributes of the object.

    Returns:
      Named: The child object which satisfies the specified filters.
    
		"""
		pass

	def getChildren(self,type=None, recursive=False, sorted=False, **kwds):
		"""
		Returns a list of children that is of the specified type.

    Args:
      type (Type[Named]): Filter objects by class.
      recursive (bool): True to get all descendent Parts and Assemblies.
      sorted (bool): Sort the children base on id.

    Returns:
      list[Named]
    
		"""
		pass

	def getClass(self,className):
		"""
		Returns the class of the object.
    
    It can be simple or qualified (with namespace). If the name is simple, we 
    prepend the cls.namespace.

    Args:
      className (Union[Part, Occurrence, Named..]) : The class name. 
     
    Returns:
      Union[Part, Occurrence, Named..] : The class for the specified className. 

    
		"""
		pass

	def getClassAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value

    Args:
      name (str): Name of the attribute
    
		"""
		pass

	def getClosestPoint(self,point):
		"""
		Get closest point on part from passed point
		"""
		pass

	def getDependents(self,recursive=False, **kwds):
		"""
		Get objects that reference this object through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getFeature(self,name=None):
		"""
		Returns the feature based on its name.
		"""
		pass

	def getFeatures(self,type=None, rep="BestRep", **kwds):
		"""
		Returns a list of features based on specified filters.

    Args:
      type ((FeaturePoint, FeatureArea, FeatureCylindrical..etc)): Filters the 
        features based on type.
      rep (str): Feature representation. See part.representations for options
      **kwds : Additional attributes to consider while filtering.

    Returns:
      list [FeaturePoint, FeatureArea, FeatureCylindrical..etc)]: List of 
        features that satisfies all the filter criteria.
    
		"""
		pass

	def getGuiAttributeNames(self):
		"""
		Return list of the attribute names that are in the gui

    Returns:
      list: Returns list of active gui attribute
    
		"""
		pass

	def getGuiValue(self,attr, **kwds):
		"""
		Get value formatted to be shown in the gui

    Args:
      attr (str): Attribute name to gets its gui value.

    Returns:
      str: Returns a string of the value with its gui units, like "5 mm/s".
    
		"""
		pass

	def getRayIntersections(self,origin, direction):
		"""
		Find list of points where ray intersects part
		"""
		pass

	def getReferences(self,recursive=False, **kwds):
		"""
		Get objects this object references through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getSerializedAttributeValues(self):
		pass

	def getValue(self,attr):
		"""
		Return the attribute value for passed attribute name.
    
    Args:
      attr (String): Attribute name to gets its value.

    Returns:
      str: Returns the attribute value
    
		"""
		pass

	@property
	def ground(self):
		pass
	@ground.setter
	def ground(self):
		pass

	@property
	def grounded(self):
		pass
	@grounded.setter
	def grounded(self):
		pass

	@property
	def holes(self):
		pass
	@holes.setter
	def holes(self):
		pass

	def identifyShape(self):
		"""
		Attempts to identify the part geometry as a known shape.

      The shapes can be:

          - Box
          - Ellipsoid
          - Sphere
          - Cylinder
          - frustum
          - axi-symmetric gear
          - rack
          
    Returns:
      Box,Ellipsoid,Sphere.. : The identified shape.
    
		"""
		pass

	@property
	def ignoreFlexibility(self):
		pass
	@ignoreFlexibility.setter
	def ignoreFlexibility(self):
		pass

	def intersect(self,parts, createSolids=False, keepSourceParts=False):
		"""
		Intersect tool that deletes excess faces, edges and vertices.

  Args:
    parts (list[Part]): Parts to intersect.
    createSolids (bool): If True, faces of solid volumes automatically selected.
    keepSourceParts (bool): Determines whether to keep source parts or not.
      When original parts are not kept, they are deleted from the model
      at the end of a successful operation.

  Returns:
    Part/None: New part if created otherwise none.
  
		"""
		pass

	def intersectCurve(self,targets, tools, combineCurves=False):
		"""
		Split intersecting curves or wire bodies into several curves.

  Args:
    targets (list[Part]): Parts to be intersected with tools.
    tools (list[Part]): Parts used to intersect the targets.
    combineCurves (bool): If True, combine result curves.

  Returns:
    Part: The intersect part.
  
		"""
		pass

	def intersects(self,other):
		"""
		Finds whether the two parts intersect.

    Args:
      other (Part): The 2nd part.
    Returns:
      bool: True if they intersect, False otherwise.
    
		"""
		pass

	@property
	def ip(self):
		pass
	@ip.setter
	def ip(self):
		pass

	def isa(self,type=None, filter=None, name=None, wildcard=None, **kwds):
		"""
		Determines if the object matches the specified settings or not.
    
    Args:
      type (Union[Part, Assembly, Contact..]): The type of the object.
      filter (method): Return value of specified callback method.
      name (str): Name that matches exactly with object name.
      wildcard (str): A pattern to match exactly with the object name.
      **kwds : Additional keyword arguments to match other attributes.

    Returns:
      bool : True, if a match is found, otherwise False.
    
		"""
		pass

	def linearPattern(self,input, direction1, direction2=(0, 0, 0), bothDirection=False, spacing1="0.0", count1=3, spacing2="0.0", count2=3, instances=False, symmetry1=False, symmetry2=False, reverseDir1=False, reverseDir2=False, result="NEW_PART", mergeWithAllParts=True, mergeParts=None, copiesToSkip=None, seedOnly=False):
		"""
		Linear Pattern parts or faces along a direction.

  Args:
    input (list[Part] | list[FeatureArea]): Parts or Features to create linear
      pattern.
    direction1 (math.Vector | FeatureCurve | Axis): Direction can be a 
      reference line, edge, or axis to which the pattern will be parallel.
    direction2 (math.Vector | FeatureCurve | Axis): Direction can be a 
      reference line, edge, or axis to which the pattern will be parallel.
    bothDirection (bool): If True, sets in both direction otherwise single
      direction.
    spacing1 (float): Distance between two copies.
    count1 (int): Number of copies.
    spacing2 (float): Distance between two copies.
    count2 (int): Number of copies.
    instances (bool): If True, any changes to part or face will apply to all
      instances.
    symmetry1 (bool): Symmetry in Direction 1.
    symmetry2 (bool): Symmetry in Direction 2.
    reverseDir1 (bool): Reverse the pattern direction in Direction 1.
    reverseDir2 (bool): Reverse the pattern direction in Direction 2.
    result (str): Result type of linear pattern.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeParts.
    mergeParts (list[Part]): Parts to be merged with linear pattern.
    copiesToSkip ((dict{Part: list[tuplex,y)]}): Set copies to skip. Here x and
      y are the indices in 2D space of copy , which needs to be skipped.
    seedOnly (bool): If True, pattern the entities only along the first row and
      first column.

  Returns:
  list[Part]: List of parts created.
  
		"""
		pass

	@property
	def location(self):
		pass
	@location.setter
	def location(self):
		pass

	def makeSmooth(self,parts=None, maintainVolume=True, intensity=0.5, iterations=40):
		"""
		Smoothens parts from the selected parts with passed params.

  Args:
    parts (list[Part]): A list of parts to smooth
    maintainVolume (bool): If True part volume is targeted to be preserved.
      If false smoothening is done more aggressively every iteration
    intensity (float[0.2, 0.9]): this control how aggressive the smoothening
      operation is every iteration.
    iterations (int): The number of iterations algorithm does smoothening.
      Higher number results in smoother mesh

  
		"""
		pass

	@property
	def mass(self):
		pass
	@mass.setter
	def mass(self):
		pass

	@property
	def material(self):
		pass
	@material.setter
	def material(self):
		pass

	@property
	def maxFreq(self):
		pass
	@maxFreq.setter
	def maxFreq(self):
		pass

	@property
	def maxMeshSize(self):
		pass
	@maxMeshSize.setter
	def maxMeshSize(self):
		pass

	@property
	def maxThickness(self):
		pass
	@maxThickness.setter
	def maxThickness(self):
		pass

	def meshInfo(self):
		pass

	def midSurface(self,part, surfaceOptions="Mid"):
		"""
		Extracts a midsurface or side faces from thin solids, and determine where
  surfaces are represented.
    
  Replacing parts with midsurfaces yields better results while increasing 
  speed when running an analysis or optimization.

  Args:
    part (Part): The part which needs midsurface extraction.
    surfaceOptions (str): This options allows you to extract the Mid, Left or Right
      surface of the part.
  
		"""
		pass

	@property
	def minBoundingBox(self):
		pass
	@minBoundingBox.setter
	def minBoundingBox(self):
		pass

	@property
	def minGap(self):
		pass
	@minGap.setter
	def minGap(self):
		pass

	@property
	def minMeshSize(self):
		pass
	@minMeshSize.setter
	def minMeshSize(self):
		pass

	@property
	def minThickness(self):
		pass
	@minThickness.setter
	def minThickness(self):
		pass

	def mirror(self,entity, planeOrigin=None, planeNormal=None, keep=True):
		"""
		Mirrors part across a symmetry plane.

  If entity is a Part, the planeOrigin and planeNormal need to be passed

  Args:
    entity (Part | FeaturePlanar): Part from which a mirror part needs to be created
      or a Planar feature which needs to be mirrored across the plane
    planeOrigin (math.Point): The origin of the symmetry plane.
    planeNormal (math.Vector): The normal of the symmetry plane.
    keep (bool): If True it keeps the original part, if False it removes it.

  Returns:
    Part: New mirrored part created.
  
		"""
		pass

	@property
	def modeType(self):
		pass
	@modeType.setter
	def modeType(self):
		pass

	def modelPositions(self):
		"""
		Forces all objects to return the original model positions instead of the
    current analysis positions.

    Useful when defining draw methods on GeneralObjects where behaviour is 
    different while animating.
    
		"""
		pass

	@property
	def modifiable(self):
		pass
	@modifiable.setter
	def modifiable(self):
		pass

	@property
	def morphable(self):
		pass
	@morphable.setter
	def morphable(self):
		pass

	@property
	def motionContactResolution(self):
		pass
	@motionContactResolution.setter
	def motionContactResolution(self):
		pass

	@property
	def movable(self):
		pass
	@movable.setter
	def movable(self):
		pass

	def move(self,part, position):
		"""
		Translates and/or rotates a part. 

  Args:
    part (Part): The part to move.
    position (math.Matrix44): The position to move the part at.
  
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	@property
	def numModes(self):
		pass
	@numModes.setter
	def numModes(self):
		pass

	def offset(self,input, value, newPart=False):
		"""
		Offset surfaces or parts.

  Args:
    input (list[Part] | list[Feature])
    value (float | str): Desired offset distance. Negative value means inward direction.
      If value is a string it can be a Model Variable or a value with units.
    newPart (bool): If True, creates a new part.

  Returns:
    Part|None: New part created if newPart was True.
  
		"""
		pass

	@property
	def orderType(self):
		pass
	@orderType.setter
	def orderType(self):
		pass

	@property
	def parent(self):
		pass
	@parent.setter
	def parent(self):
		pass

	def patternAlongPath(self,input, path, count=3, equalSpacing=False, spacing=0.01, instances=False, method="TRANSFORM", orientation="MAINTAIN_SEED_ORIENTATION", pathReverse=False, result="NEW_PART", mergeWithAllParts=True, mergeParts=None, copiesToSkip=None):
		"""
		Pattern parts or faces along curve.

   Args:
    input (list[Part] | list[FeatureArea]): Parts or Features to create pattern
      along the curve.
    path (list[FeatureCurve]): Path for pattern.
    count (int): Number of copies.
    equalSpacing (bool): If True, equally space the copies.
    spacing (float): Distance between two copies.
    instances (bool): If True, any changes to part or face will apply to all instances.
    method (str): Pattern method.
      - TRANSFORM
      - OFFSET
    orientation (str): Pattern Orientation.
      - TANGENT_TO_CURVE
      - MAINTAIN_SEED_ORIENTATION
    pathReverse (bool): Reverse the path of pattern.
    result (str): Result type of pattern along path.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeParts.
    mergeParts (list[Part]): Parts to be merged with pattern along path.
    copiesToSkip (dict{Part: list[indicesToSkip]}): Set copies to skip. It's
      basically a dictionary which contains Part as a key and list of indices to
      skip as values.

  Returns:
  list[Part | Feature]: List of parts/features created.
  
		"""
		pass

	@property
	def position(self):
		pass
	@position.setter
	def position(self):
		pass

	def projectAndSplit(self,targets, tools, direction, trim=True, keepType="EXTERIOR", vectorDirection=None, extendProjection=True, trimExtents="THROUGH_ALL", extractProjection=False, surfaceNormal=None, resultAsSurface=False):
		"""
		Formerly known as projectAndSplit. It removes part of a surface or solid by
  projecting a profile curve on to it. OR use a set of tool surfaces to split a
  set of target surfaces.

  Args:
    targets (list[Part] | list[Feature]): List of Parts or features on which
      feature projection to be.
    tools (list[Feature]): Feature that needs to be projected on Part.
    direction (str): Valid values are: TOOL_NORMAL, X, Y, Z,
      VECTOR and CLOSEST_POINT, SURFACE_NORMAL.
    trim (bool): If True, operation type is trim otherwise split.
    keepType (str): Output to keep. Only valid for split.
      - EXTERIOR
      - INTERIOR
      - BOTH
    vectorDirection (FeatureLinear | System): Vector direction, only applicable
      when direction is 'VECTOR'.
    extendProjection (bool): If True, extends the projection.
    trimExtents (str): Trim extents, Only valid for Trim operation.
      - THROUGH_ALL
      - DIRECTION_1
      - DIRECTION_2
    extractProjection (bool): If True, extract projection without split. Valid
      only for split operation
    surfaceNormal (FeaturePlanar): Planar surface along whose normal you want
     to project the tools.
    resultAsSurface (bool): If True, Force output result being a sheet by
      removing faces on the solid target obtained by cut. Valid only for trim
      operation.

  Returns:
  list[Part]: List of parts created.
  
		"""
		pass

	def removeIsland(self,part):
		"""
		Finds small disconnected regions of a mesh part and delete them.

  Args:
    part (Part): Part having island.
  
		"""
		pass

	def removeSmooth(self,parts=None):
		"""
		
  Removes any existing smoothening from passed parts

  Args:
    parts (list[Part]): A list of parts to removing smooothing from.

  
		"""
		pass

	def replaceFromFile(self,part, filePath):
		"""
		Replace part with the contents of a file.

  Args:
    part (Part): The part to be replaced.
    filePath (str): The path to the file whose contents will replace the part.
  
		"""
		pass

	def replaceFromPart(self,part, toolPart, keepToolPart=False):
		"""
		Replace part with tool part.

  Args:
    part (Part): The part to be replaced.
    toolPart (Part): The part to replace with.
    keepToolPart (bool): Determines whether to keep the toolPart or not after replace.
  
		"""
		pass

	@property
	def representations(self):
		pass
	@representations.setter
	def representations(self):
		pass

	def rib(self,sketch, targetPart, ribThickness=0.01, flipMaterialDirection=False, offsetDirection="MID", ribDirection="NORMAL", draftAngle="0", reverseDraftDirection=False, extensionType="LINEAR"):
		"""
		Extrude rib geometry from a sketch to stiffen your model.

  Args:
    sketch (Part): Sketch profile for rib tool.
    targetPart (Part): Target part on which rib tool will be created.
    ribThickness (bool): Rib thickness.
    flipMaterialDirection (bool): If True, flip the material direction of rib
     tool otherwise not.
    offsetDirection (str): Offset direction type.
     - LEFT
     - MID
     - RIGHT
    ribDirection (str): Rib direction type.
     - NORMAL
     - PARALLEL
    draftAngle (float): Draft angle for rib creation in degree.
    reverseDraftDirection (bool): If True, reverse the draftAngle direction
     otherwise not.
    extensionType (str): Rib extension type.
     - LINEAR
     - NATURAL
  
		"""
		pass

	@property
	def rigid(self):
		pass
	@rigid.setter
	def rigid(self):
		pass

	@property
	def rigidGroup(self):
		pass
	@rigidGroup.setter
	def rigidGroup(self):
		pass

	def rotate(self,part, axis, angle, degrees=True):
		"""
		Rotates a part around the specified axis.

  This is a body rotation.

  Args:
    part (Part): The part to rotate.
    axis (Vector | str): The rotation axis. 
      If axis a string, valid choices are "x", "y", "z".
    angle (float): The rotation angle.
    degrees (bool): If True, angle is considered in degrees, if False in radians.

  
		"""
		pass

	@property
	def rotations(self):
		pass
	@rotations.setter
	def rotations(self):
		pass

	def save(self,file):
		"""
		Save the Part in the specified file.

    Args:
      file (str) : File name and path, where the file needs to be saved.
        Valid file extensions are:
          '.x_b', '.x_t', '.xmt_bin', '.xmt_txt', '.sat', '.sab', '.iges', '.igs',
          '.stl', '.step', '.stp', '.obj', '.vrml', '.vrl'.
    
		"""
		pass

	def scale(self,parts, value=1.1):
		"""
		Resizes the part to the specified scale value.

  This is useful when working with an imported model that is associated 
  with a different default unit system.

  Args:
    parts (list[Part]): Parts that need to be scaled.
    value (float | str): The scale factor.
      If value is a string it can be a Model Variable or a value with units.
  
		"""
		pass

	def setValue(self,attr, value):
		"""
		Alias for setattr (attr, value)
    Args:
      attr (str): Attribute name to sets its value.
      value (str): Attribute value to set .
    
		"""
		pass

	def setValues(self,**kwds):
		"""
		Sets passed name/value pairs.
    
    Values are set in a standard order (the order the attribute is defined
    on the class) which is required in certain cases when an attribute's
    setter expects another attribute to have already been set.
    For example, setting a reference before a location that is wrt it.
    
    Args:
      **kwds: Set attributes in one go.
    
		"""
		pass

	@property
	def sheetThickness(self):
		pass
	@sheetThickness.setter
	def sheetThickness(self):
		pass

	def shrinkWrap(self,parts=None, voxelSize=-1, merge=True, sharpen=False):
		"""
		Creates a new part/parts from the selected parts with a single isosurface

  The shrinkwrap is useful when you want to merge optimized results with 
  non-design-space regions. 

  You would do this so you can fit a single PolyNURBS over the entire model.
  By default, the selected parts are merged into a single part. 
  This option can be disabled by setting merge to False.

  Args:
    parts (list[Part]): A list of parts to be shrink wrapped.
    voxelSize (float): Size of each voxel of the shrink wrapped part. Size
      value should be in the range 0 to 1 Defaults to -1 to auto compute the
      voxel dimension of the part.
    merge (bool): Merge the shrink wrapped parts into single or multiple parts.
    sharpen (bool): If set to True, then sharpen the edges of the new shrink
      wrapped part.

  Returns:
    Part: Returns a new shrink wrapped part
  
		"""
		pass

	def simplifyHoles(self,entity, minSize="0", maxSize=None):
		"""
		Finds and removes holes and pockets, and find raised areas such as lettering.

  Args:
    entity (Part | Assembly | Feature): Part/Assembly from which you want to 
      remove the holes from or FeatureCircular which needs to be removed.
    minSize (float): Minimum size of hole.
    maxSize (float): Maximum size of hole.
  
		"""
		pass

	def simplifyImprints(self,entity):
		"""
		Finds and removes imprints from a part.

  An imprint is an edge or a point that appears on a surface that can be removed
  without changing the underlying integrity of the surface, such as scratches or
  trimmed points.

  Args:
    entity (Part | Assembly | FeatureLinear): Part/Assembly from which you want to
      remove the imprints from or FeatureLinear imprint to be removed.
  
		"""
		pass

	def simplifyPlugs(self,entity, minSize="0", maxSize=None):
		"""
		Finds holes and pockets, and plug them by filling the area with a new part

  Args:
    entity (Part | Assembly | Feature): Part/Assembly from which you want to plug 
      the holes or a Circular feature that needs to be plugged.
    minSize (float): Minimum size of plug.
    maxSize (float): Maximum size of plug.
  
		"""
		pass

	def simplifyRounds(self,entity, roundType="ALL", minSize="0", maxSize=None):
		"""
		Finds and removes both round (convex) and fillet (concave) surfaces.

  Args:
    entity (Part | Assembly | Feature): Part/Assembly from which you want to 
      remove the fillets, chamfers from or a Feature to be removed.
    roundType (str): Valid values are: ROUNDS, FILLETS, CHAMFERS and ALL.
    minSize (float): Minimum size of round.
    maxSize (float): Maximum size of round.
  
		"""
		pass

	def slice(self,targets, cutOrigin=None, cutNormal=None, surfaceFeature=None, extendSurface=True):
		"""
		Slices a set of solid objects with a cutting plane or cutting surface.

  You must provide cutOrigin and cutNormal or surfaceFeature.

  Args:
    targets (list[Part]): The parts to slice across the cutting plane.
    cutOrigin (math.Point): The origin of the cutting plane.
    cutNormal (math.Vector): The normal of the cutting plane.
    surfaceFeature (FeatureArea): The surface to slice the enity accross.
    extendSurface (bool): Set Automatic extension On/Off for tool Surface.

  Returns:
    Part: The new sliced part created.
  
		"""
		pass

	@property
	def spiders(self):
		pass
	@spiders.setter
	def spiders(self):
		pass

	@property
	def strainCalculation(self):
		pass
	@strainCalculation.setter
	def strainCalculation(self):
		pass

	@property
	def stressCalculation(self):
		pass
	@stressCalculation.setter
	def stressCalculation(self):
		pass

	@property
	def symmetryConstraints(self):
		pass
	@symmetryConstraints.setter
	def symmetryConstraints(self):
		pass

	@property
	def temperatures(self):
		pass
	@temperatures.setter
	def temperatures(self):
		pass

	def thicken(self,parts, value, symmetric=True):
		"""
		Thicken surface parts and convert them to solids, or thicken and hollow 
  solid parts.

  When used on a solid part, the Thicken tool yields a hollow solid.
  When used on a surface part, the Thicken tool yields a solid part.

  Args:
    parts (list[Part])
    value (float): Desired offset distance. Negative value means inward direction.
    symmetric (bool): If True, offsets symmetrically on both sides of the part surface.
  
		"""
		pass

	def translate(self,part, x="0", y=None, z=None):
		"""
		Translates by the specified distance.

  If y is None, x is assumed to be a list of 3 floats.

  Args:
    part (Part): The part to translate.
    x (float): The distance to translate the 'x' vector. 
    y (float): The distance to translate the 'y' vector.
    z (float): The distance to translate the 'z' vector.
  
		"""
		pass

	@property
	def transparency(self):
		pass
	@transparency.setter
	def transparency(self):
		pass

	def trimAndSplit(self,targets, tools, direction, trim=True, keepType="EXTERIOR", vectorDirection=None, extendProjection=True, trimExtents="THROUGH_ALL", extractProjection=False, surfaceNormal=None, resultAsSurface=False):
		"""
		Formerly known as projectAndSplit. It removes part of a surface or solid by
  projecting a profile curve on to it. OR use a set of tool surfaces to split a
  set of target surfaces.

  Args:
    targets (list[Part] | list[Feature]): List of Parts or features on which
      feature projection to be.
    tools (list[Feature]): Feature that needs to be projected on Part.
    direction (str): Valid values are: TOOL_NORMAL, X, Y, Z,
      VECTOR and CLOSEST_POINT, SURFACE_NORMAL.
    trim (bool): If True, operation type is trim otherwise split.
    keepType (str): Output to keep. Only valid for split.
      - EXTERIOR
      - INTERIOR
      - BOTH
    vectorDirection (FeatureLinear | System): Vector direction, only applicable
      when direction is 'VECTOR'.
    extendProjection (bool): If True, extends the projection.
    trimExtents (str): Trim extents, Only valid for Trim operation.
      - THROUGH_ALL
      - DIRECTION_1
      - DIRECTION_2
    extractProjection (bool): If True, extract projection without split. Valid
      only for split operation
    surfaceNormal (FeaturePlanar): Planar surface along whose normal you want
     to project the tools.
    resultAsSurface (bool): If True, Force output result being a sheet by
      removing faces on the solid target obtained by cut. Valid only for trim
      operation.

  Returns:
  list[Part]: List of parts created.
  
		"""
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

	@property
	def volume(self):
		pass
	@volume.setter
	def volume(self):
		pass

	def wasValueSet(self,attr):
		"""
		Check if attribute was set

    Args:
      attr (str): Attribute name to check it value set or not

    Returns:
      bool: True, if value was set else false.
    
		"""
		pass

class PartImplicit:
	def __init__(self,cppName: str="",doc: str=""):
		"""
Part
"""
		pass

class PartOccurrence:
	def __init__(self):
		"""
Base class for Part and Sketch Part.
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	@property
	def animationPosition(self):
		pass
	@animationPosition.setter
	def animationPosition(self):
		pass

	@property
	def autoCalculateCG(self):
		pass
	@autoCalculateCG.setter
	def autoCalculateCG(self):
		pass

	@property
	def autoCalculateMass(self):
		pass
	@autoCalculateMass.setter
	def autoCalculateMass(self):
		pass

	@property
	def autoCalculateMoment(self):
		pass
	@autoCalculateMoment.setter
	def autoCalculateMoment(self):
		pass

	@property
	def axisAlignedBoundingBox(self):
		pass
	@axisAlignedBoundingBox.setter
	def axisAlignedBoundingBox(self):
		pass

	@property
	def beadPatterns(self):
		pass
	@beadPatterns.setter
	def beadPatterns(self):
		pass

	@property
	def cg(self):
		pass
	@cg.setter
	def cg(self):
		pass

	@property
	def cogConstraints(self):
		pass
	@cogConstraints.setter
	def cogConstraints(self):
		pass

	@property
	def color(self):
		pass
	@color.setter
	def color(self):
		pass

	@property
	def concentratedMasses(self):
		pass
	@concentratedMasses.setter
	def concentratedMasses(self):
		pass

	@property
	def currentRepresentation(self):
		pass
	@currentRepresentation.setter
	def currentRepresentation(self):
		pass

	def destroy(self):
		"""
		Destroys occurrences from the model.
    
		"""
		pass

	@property
	def detectCollisions(self):
		pass
	@detectCollisions.setter
	def detectCollisions(self):
		pass

	@property
	def displacementConstraints(self):
		pass
	@displacementConstraints.setter
	def displacementConstraints(self):
		pass

	@property
	def drawDirections(self):
		pass
	@drawDirections.setter
	def drawDirections(self):
		pass

	@property
	def enforcedDisplacements(self):
		pass
	@enforcedDisplacements.setter
	def enforcedDisplacements(self):
		pass

	@property
	def features(self):
		pass
	@features.setter
	def features(self):
		pass

	def getAllChildren(self,type=None, **kwds):
		"""
		Returns a list of all children that matches the specified type.

    Args:
      type (list[Named]): Filter to use to get the children based on object type.
      **kwds : Additional keyword arguments to match other attributes of the object.

    Returns:
      list[Union[Part, Motor, BoundaryCondition, ...]]: The list of children that satisfy the supplied filters.
    
		"""
		pass

	def getAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value.

    Args:
      name (str): Attribute name to find its class.
    
		"""
		pass

	def getAttributes(self,type=None, **kwds):
		"""
		Return an dict of the attributes.
    Pass type and kwds to filter by type and Attribute properties

    Args:
      type (type): Filters the attribute based on type
      **kwds : Additional kwds argument to filter attribute by its properties

    Returns:
      dict: Return an OrderedDict of the attributes
    
		"""
		pass

	def getChild(self,name=None, recursive=False, **kwds):
		"""
		Returns the child of the object which matches the specified unique name.

    Args:
      name (str): The name of the child object.
      recursive (bool):  Search all descendents.
      **kwds : Additional keyword arguments to match attributes of the object.

    Returns:
      Named: The child object which satisfies the specified filters.
    
		"""
		pass

	def getChildren(self,type=None, recursive=False, sorted=False, **kwds):
		"""
		Returns a list of children that is of the specified type.

    Args:
      type (Type[Named]): Filter objects by class.
      recursive (bool): True to get all descendent Parts and Assemblies.
      sorted (bool): Sort the children base on id.

    Returns:
      list[Named]
    
		"""
		pass

	def getClass(self,className):
		"""
		Returns the class of the object.
    
    It can be simple or qualified (with namespace). If the name is simple, we 
    prepend the cls.namespace.

    Args:
      className (Union[Part, Occurrence, Named..]) : The class name. 
     
    Returns:
      Union[Part, Occurrence, Named..] : The class for the specified className. 

    
		"""
		pass

	def getClassAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value

    Args:
      name (str): Name of the attribute
    
		"""
		pass

	def getDependents(self,recursive=False, **kwds):
		"""
		Get objects that reference this object through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getFeature(self,name=None):
		"""
		Returns the feature based on its name.
		"""
		pass

	def getFeatures(self,type=None, rep="BestRep", **kwds):
		"""
		Returns a list of features based on specified filters.

    Args:
      type ((FeaturePoint, FeatureArea, FeatureCylindrical..etc)): Filters the 
        features based on type.
      rep (str): Feature representation. See part.representations for options
      **kwds : Additional attributes to consider while filtering.

    Returns:
      list [FeaturePoint, FeatureArea, FeatureCylindrical..etc)]: List of 
        features that satisfies all the filter criteria.
    
		"""
		pass

	def getGuiAttributeNames(self):
		"""
		Return list of the attribute names that are in the gui

    Returns:
      list: Returns list of active gui attribute
    
		"""
		pass

	def getGuiValue(self,attr, **kwds):
		"""
		Get value formatted to be shown in the gui

    Args:
      attr (str): Attribute name to gets its gui value.

    Returns:
      str: Returns a string of the value with its gui units, like "5 mm/s".
    
		"""
		pass

	def getReferences(self,recursive=False, **kwds):
		"""
		Get objects this object references through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getSerializedAttributeValues(self):
		pass

	def getValue(self,attr):
		"""
		Return the attribute value for passed attribute name.
    
    Args:
      attr (String): Attribute name to gets its value.

    Returns:
      str: Returns the attribute value
    
		"""
		pass

	@property
	def ground(self):
		pass
	@ground.setter
	def ground(self):
		pass

	@property
	def grounded(self):
		pass
	@grounded.setter
	def grounded(self):
		pass

	@property
	def ip(self):
		pass
	@ip.setter
	def ip(self):
		pass

	def isa(self,type=None, filter=None, name=None, wildcard=None, **kwds):
		"""
		Determines if the object matches the specified settings or not.
    
    Args:
      type (Union[Part, Assembly, Contact..]): The type of the object.
      filter (method): Return value of specified callback method.
      name (str): Name that matches exactly with object name.
      wildcard (str): A pattern to match exactly with the object name.
      **kwds : Additional keyword arguments to match other attributes.

    Returns:
      bool : True, if a match is found, otherwise False.
    
		"""
		pass

	@property
	def location(self):
		pass
	@location.setter
	def location(self):
		pass

	@property
	def mass(self):
		pass
	@mass.setter
	def mass(self):
		pass

	@property
	def material(self):
		pass
	@material.setter
	def material(self):
		pass

	def meshInfo(self):
		pass

	@property
	def minBoundingBox(self):
		pass
	@minBoundingBox.setter
	def minBoundingBox(self):
		pass

	def modelPositions(self):
		"""
		Forces all objects to return the original model positions instead of the
    current analysis positions.

    Useful when defining draw methods on GeneralObjects where behaviour is 
    different while animating.
    
		"""
		pass

	@property
	def modifiable(self):
		pass
	@modifiable.setter
	def modifiable(self):
		pass

	@property
	def morphable(self):
		pass
	@morphable.setter
	def morphable(self):
		pass

	@property
	def movable(self):
		pass
	@movable.setter
	def movable(self):
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	@property
	def parent(self):
		pass
	@parent.setter
	def parent(self):
		pass

	@property
	def position(self):
		pass
	@position.setter
	def position(self):
		pass

	@property
	def representations(self):
		pass
	@representations.setter
	def representations(self):
		pass

	@property
	def rotations(self):
		pass
	@rotations.setter
	def rotations(self):
		pass

	def save(self,file):
		"""
		Save the Part in the specified file.

    Args:
      file (str) : File name and path, where the file needs to be saved.
        Valid file extensions are:
          '.x_b', '.x_t', '.xmt_bin', '.xmt_txt', '.sat', '.sab', '.iges', '.igs',
          '.stl', '.step', '.stp', '.obj', '.vrml', '.vrl'.
    
		"""
		pass

	def setValue(self,attr, value):
		"""
		Alias for setattr (attr, value)
    Args:
      attr (str): Attribute name to sets its value.
      value (str): Attribute value to set .
    
		"""
		pass

	def setValues(self,**kwds):
		"""
		Sets passed name/value pairs.
    
    Values are set in a standard order (the order the attribute is defined
    on the class) which is required in certain cases when an attribute's
    setter expects another attribute to have already been set.
    For example, setting a reference before a location that is wrt it.
    
    Args:
      **kwds: Set attributes in one go.
    
		"""
		pass

	def simplifyHoles(self,entity, minSize="0", maxSize=None):
		"""
		Finds and removes holes and pockets, and find raised areas such as lettering.

  Args:
    entity (Part | Assembly | Feature): Part/Assembly from which you want to 
      remove the holes from or FeatureCircular which needs to be removed.
    minSize (float): Minimum size of hole.
    maxSize (float): Maximum size of hole.
  
		"""
		pass

	def simplifyImprints(self,entity):
		"""
		Finds and removes imprints from a part.

  An imprint is an edge or a point that appears on a surface that can be removed
  without changing the underlying integrity of the surface, such as scratches or
  trimmed points.

  Args:
    entity (Part | Assembly | FeatureLinear): Part/Assembly from which you want to
      remove the imprints from or FeatureLinear imprint to be removed.
  
		"""
		pass

	def simplifyPlugs(self,entity, minSize="0", maxSize=None):
		"""
		Finds holes and pockets, and plug them by filling the area with a new part

  Args:
    entity (Part | Assembly | Feature): Part/Assembly from which you want to plug 
      the holes or a Circular feature that needs to be plugged.
    minSize (float): Minimum size of plug.
    maxSize (float): Maximum size of plug.
  
		"""
		pass

	def simplifyRounds(self,entity, roundType="ALL", minSize="0", maxSize=None):
		"""
		Finds and removes both round (convex) and fillet (concave) surfaces.

  Args:
    entity (Part | Assembly | Feature): Part/Assembly from which you want to 
      remove the fillets, chamfers from or a Feature to be removed.
    roundType (str): Valid values are: ROUNDS, FILLETS, CHAMFERS and ALL.
    minSize (float): Minimum size of round.
    maxSize (float): Maximum size of round.
  
		"""
		pass

	@property
	def spiders(self):
		pass
	@spiders.setter
	def spiders(self):
		pass

	@property
	def symmetryConstraints(self):
		pass
	@symmetryConstraints.setter
	def symmetryConstraints(self):
		pass

	@property
	def temperatures(self):
		pass
	@temperatures.setter
	def temperatures(self):
		pass

	@property
	def transparency(self):
		pass
	@transparency.setter
	def transparency(self):
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

	@property
	def volume(self):
		pass
	@volume.setter
	def volume(self):
		pass

	def wasValueSet(self,attr):
		"""
		Check if attribute was set

    Args:
      attr (str): Attribute name to check it value set or not

    Returns:
      bool: True, if value was set else false.
    
		"""
		pass

class PartsConnector:
	def __init__(self):
		"""
PartsConnectors are generally used to connect two or more parts together.
  
  Base class for part based connectors line 'Fastener', 'Joint'.
  
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	@property
	def autoCalculateAllowableForces(self):
		pass
	@autoCalculateAllowableForces.setter
	def autoCalculateAllowableForces(self):
		pass

	@property
	def autoCalculatePosition(self):
		pass
	@autoCalculatePosition.setter
	def autoCalculatePosition(self):
		pass

	@property
	def axialForce(self):
		pass
	@axialForce.setter
	def axialForce(self):
		pass

	@property
	def axialStiffness(self):
		pass
	@axialStiffness.setter
	def axialStiffness(self):
		pass

	@property
	def axis(self):
		pass
	@axis.setter
	def axis(self):
		pass

	@property
	def color(self):
		pass
	@color.setter
	def color(self):
		pass

	@property
	def connectionRadius(self):
		pass
	@connectionRadius.setter
	def connectionRadius(self):
		pass

	def destroy(self):
		"""
		Delete the object removing it from the model.
    
    The object may come back due to an undo/redo.
    
		"""
		pass

	@property
	def direction(self):
		pass
	@direction.setter
	def direction(self):
		pass

	@property
	def enableAllowableForces(self):
		pass
	@enableAllowableForces.setter
	def enableAllowableForces(self):
		pass

	@property
	def enablePretension(self):
		pass
	@enablePretension.setter
	def enablePretension(self):
		pass

	@property
	def featureLists(self):
		pass
	@featureLists.setter
	def featureLists(self):
		pass

	@property
	def features(self):
		pass
	@features.setter
	def features(self):
		pass

	def getAllChildren(self,type=None, **kwds):
		"""
		Returns a list of all children that matches the specified type.

    Args:
      type (list[Named]): Filter to use to get the children based on object type.
      **kwds : Additional keyword arguments to match other attributes of the object.

    Returns:
      list[Union[Part, Motor, BoundaryCondition, ...]]: The list of children that satisfy the supplied filters.
    
		"""
		pass

	def getAllowedTypes(self):
		"""
		Returns a list of allowed part connectors type.

    Returns:
      list : List of allowed part connectors.
    
		"""
		pass

	def getAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value.

    Args:
      name (str): Attribute name to find its class.
    
		"""
		pass

	def getAttributes(self,type=None, **kwds):
		"""
		Return an dict of the attributes.
    Pass type and kwds to filter by type and Attribute properties

    Args:
      type (type): Filters the attribute based on type
      **kwds : Additional kwds argument to filter attribute by its properties

    Returns:
      dict: Return an OrderedDict of the attributes
    
		"""
		pass

	def getChild(self,name=None, recursive=False, **kwds):
		"""
		Returns the child of the object which matches the specified unique name.

    Args:
      name (str): The name of the child object.
      recursive (bool):  Search all descendents.
      **kwds : Additional keyword arguments to match attributes of the object.

    Returns:
      Named: The child object which satisfies the specified filters.
    
		"""
		pass

	def getChildren(self,type=None, recursive=False, sorted=False, **kwds):
		"""
		Returns a list of children that is of the specified type.

    Args:
      type (Type[Named]): Filter objects by class.
      recursive (bool): True to get all descendent Parts and Assemblies.
      sorted (bool): Sort the children base on id.

    Returns:
      list[Named]
    
		"""
		pass

	def getClass(self,className):
		"""
		Returns the class of the object.
    
    It can be simple or qualified (with namespace). If the name is simple, we 
    prepend the cls.namespace.

    Args:
      className (Union[Part, Occurrence, Named..]) : The class name. 
     
    Returns:
      Union[Part, Occurrence, Named..] : The class for the specified className. 

    
		"""
		pass

	def getClassAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value

    Args:
      name (str): Name of the attribute
    
		"""
		pass

	def getDependents(self,recursive=False, **kwds):
		"""
		Get objects that reference this object through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getGuiAttributeNames(self):
		"""
		Return list of the attribute names that are in the gui

    Returns:
      list: Returns list of active gui attribute
    
		"""
		pass

	def getGuiValue(self,attr, **kwds):
		"""
		Get value formatted to be shown in the gui

    Args:
      attr (str): Attribute name to gets its gui value.

    Returns:
      str: Returns a string of the value with its gui units, like "5 mm/s".
    
		"""
		pass

	def getReferences(self,recursive=False, **kwds):
		"""
		Get objects this object references through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getSerializedAttributeValues(self):
		pass

	def getValue(self,attr):
		"""
		Return the attribute value for passed attribute name.
    
    Args:
      attr (String): Attribute name to gets its value.

    Returns:
      str: Returns the attribute value
    
		"""
		pass

	@property
	def grounded(self):
		pass
	@grounded.setter
	def grounded(self):
		pass

	def isa(self,type=None, filter=None, name=None, wildcard=None, **kwds):
		"""
		Determines if the object matches the specified settings or not.
    
    Args:
      type (Union[Part, Assembly, Contact..]): The type of the object.
      filter (method): Return value of specified callback method.
      name (str): Name that matches exactly with object name.
      wildcard (str): A pattern to match exactly with the object name.
      **kwds : Additional keyword arguments to match other attributes.

    Returns:
      bool : True, if a match is found, otherwise False.
    
		"""
		pass

	@property
	def location(self):
		pass
	@location.setter
	def location(self):
		pass

	@property
	def material(self):
		pass
	@material.setter
	def material(self):
		pass

	def modelPositions(self):
		"""
		Forces all objects to return the original model positions instead of the
    current analysis positions.

    Useful when defining draw methods on GeneralObjects where behaviour is 
    different while animating.
    
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	@property
	def parent(self):
		pass
	@parent.setter
	def parent(self):
		pass

	@property
	def parts(self):
		pass
	@parts.setter
	def parts(self):
		pass

	@property
	def partsInHoles(self):
		pass
	@partsInHoles.setter
	def partsInHoles(self):
		pass

	@property
	def position(self):
		pass
	@position.setter
	def position(self):
		pass

	@property
	def pretensionForce(self):
		pass
	@pretensionForce.setter
	def pretensionForce(self):
		pass

	@property
	def radius(self):
		pass
	@radius.setter
	def radius(self):
		pass

	def setValue(self,attr, value):
		"""
		Alias for setattr (attr, value)
    Args:
      attr (str): Attribute name to sets its value.
      value (str): Attribute value to set .
    
		"""
		pass

	def setValues(self,**kwds):
		"""
		Sets passed name/value pairs.
    
    Values are set in a standard order (the order the attribute is defined
    on the class) which is required in certain cases when an attribute's
    setter expects another attribute to have already been set.
    For example, setting a reference before a location that is wrt it.
    
    Args:
      **kwds: Set attributes in one go.
    
		"""
		pass

	@property
	def shearForce(self):
		pass
	@shearForce.setter
	def shearForce(self):
		pass

	@property
	def shearStiffness(self):
		pass
	@shearStiffness.setter
	def shearStiffness(self):
		pass

	@property
	def type(self):
		pass
	@type.setter
	def type(self):
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

	def wasValueSet(self,attr):
		"""
		Check if attribute was set

    Args:
      attr (str): Attribute name to check it value set or not

    Returns:
      bool: True, if value was set else false.
    
		"""
		pass

class Pellet:
	def __init__(self,**kwds):
		"""
Create a Pellet implicit body.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class Pi:
	def __init__(self,**kwds):
		"""
Implicit pi.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class Pipe:
	def __init__(self,**kwds):
		"""
Create a Pipe implicit body.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class PlanarLattice:
	def __init__(self,**kwds):
		"""
Planar lattices are 2.5 dimensional cellular structures, with a clearly
  defined 2D cross-section that is drawn or extruded along the third
  dimension. A popular example is a honeycomb structure.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class Plane:
	def __init__(self,**kwds):
		"""
Create a plane implicit body.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class Point:
	def __init__(self,**kwds):
		"""
Create a point implicit body.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class PointCloud:
	def __init__(self,**kwds):
		"""
Create a custom implicit field or geometry from a set of points with scalar
  values attached to them.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class PointEdgeSet:
	def __init__(self,**kwds):
		"""
A point-edge set is a graph comprising points that are (optionally)
  connected by edges. Point-edge sets can be thickened into strut lattices.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class PointImplicit:
	def __init__(self,cppName,units: str="length",doc: str=""):
		"""
math.Point
"""
		pass

class PointsImplicit:
	def __init__(self,cppName,units: str="length",doc: str=""):
		"""
list[math.Point]
"""
		pass

class PolyMesh:
	pass

class PolyNURBS:
	def __init__(self,x=1, y=1, z=1, position=None, parent=None):
		"""
Create free-form solid geometry that is smooth and continuous.
  
  A PolyNURBS object represents geometry as a NURBS surface surrounded by a 
  transparent polymesh cage. The shape of the PolyNURBS object is the result 
  of the modifications made to the cage, which can be manipulated using the 
  cage's faces, edges, and vertices.
  
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	@property
	def animationPosition(self):
		pass
	@animationPosition.setter
	def animationPosition(self):
		pass

	@property
	def autoCalcMotionContactResolution(self):
		pass
	@autoCalcMotionContactResolution.setter
	def autoCalcMotionContactResolution(self):
		pass

	@property
	def autoCalculateCG(self):
		pass
	@autoCalculateCG.setter
	def autoCalculateCG(self):
		pass

	@property
	def autoCalculateMass(self):
		pass
	@autoCalculateMass.setter
	def autoCalculateMass(self):
		pass

	@property
	def autoCalculateMeshSize(self):
		pass
	@autoCalculateMeshSize.setter
	def autoCalculateMeshSize(self):
		pass

	@property
	def autoCalculateMoment(self):
		pass
	@autoCalculateMoment.setter
	def autoCalculateMoment(self):
		pass

	@property
	def autoCalculateThickness(self):
		pass
	@autoCalculateThickness.setter
	def autoCalculateThickness(self):
		pass

	@property
	def axisAlignedBoundingBox(self):
		pass
	@axisAlignedBoundingBox.setter
	def axisAlignedBoundingBox(self):
		pass

	@property
	def beadPatterns(self):
		pass
	@beadPatterns.setter
	def beadPatterns(self):
		pass

	def booleanCombine(self,target, tools=None):
		"""
		Combines the specified parts.

  Args:
    target (Part): Part to be combined with tools.
    tools (list[Part]): Parts to be combined with target. Destroyed after combine.

  Returns:
    Part: The combined part.
  
		"""
		pass

	def booleanIntersect(self,targets, tools, keepTargets=False, keepTools=False):
		"""
		Retains only the intersecting portions of two sets of solid objects.

  Args:
    targets (list[Part]): The first set of parts.
    tools (list[Part]): A list of parts for boolean intersect operation.
    keepTargets (bool): If True, preserves the target parts after the operation.
    keepTools (bool): If True, preserves the tools parts after the operation.

  Returns:
    Part: The intersected part.
  
		"""
		pass

	def booleanSubtract(self,targets, tools, keepTools=False):
		"""
		Carves out one set of solid objects from another set of solid objects.

  Args:
    targets (list[Part]): The parts being carved.
    tools (list[Part]): The parts doing the carving.
    keepTools (bool): If True, preserves the tools after the operation.

  Returns:
    Part: The remaining part.
  
		"""
		pass

	def breakInstance(self,parts):
		"""
		Break the instances of a part.

  Args:
    parts (list[Part]): Parts for breaking instances.
  
		"""
		pass

	def bridge(self,faces):
		"""
		Bridge tool to create a bridge between two or more faces of either the
    same PolyNURBS cage or different cages.

    Args:
      faces (list[FeatureArea]): The faces to create bridge.
    
		"""
		pass

	@property
	def cg(self):
		pass
	@cg.setter
	def cg(self):
		pass

	def circularPattern(self,input, axis, angle=60, count=3, equalSpacing=False, instances=False, symmetry=False, axisReverse=False, result="NEW_PART", mergeWithAllParts=True, mergeParts=None, copiesToSkip=None):
		"""
		Circular Pattern parts or faces around an axis.

  Args:
    input (list[Part] | list[FeatureArea]): Parts or Features to create circular
      pattern.
    axis (math.Vector | FeatureCurve | Axis): Axis is a reference line, edge,
      or axis to which the pattern will be parallel.
    angle (float): Angle within which the copies are equally spaced.
    count (int): Number of copies.
    equalSpacing (bool): If True, equally space the copies within a specified
      Angle.
    instances (bool): If True, any changes to part or face will apply to all
      instances.
    symmetry (bool): Symmetry in Direction 1.
    axisReverse (bool): Reverse the axis in Direction 1.
    result (str): Result type of circular pattern.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeParts.
    mergeParts (list[Part]): Parts to be merged with circular pattern.
    copiesToSkip (dict{Part: list[indicesToSkip]}): Set copies to skip. It's
      basically a dictionary which contains Part as a key and list of indices to
      skip as values.

  Returns:
  list[Part]: List of parts created.
  
		"""
		pass

	def closeHolesInSolid(self):
		"""
		Closes holes of the given part.
		"""
		pass

	@property
	def cogConstraints(self):
		pass
	@cogConstraints.setter
	def cogConstraints(self):
		pass

	@property
	def color(self):
		pass
	@color.setter
	def color(self):
		pass

	@property
	def concentratedMasses(self):
		pass
	@concentratedMasses.setter
	def concentratedMasses(self):
		pass

	def convertBodiesToParts(self,parts):
		"""
		Convert disconnected bodies to parts.

  Args:
    parts (list[Part]): The parts to be converted.

  Returns:
    list[Part]: Newly created parts.
  
		"""
		pass

	def convertToMass(self,parts, parent=None):
		"""
		Replace Parts to concentrated mass.

  Args:
    parts (list[Part]): Parts to be replaced with concentrated mass.
    parent (Part): Parent for the mass created.
  
		"""
		pass

	def convertToTriangleMesh(self,parts):
		"""
		Convert Parts to triangle mesh.

  Args:
    parts (list[Part]): Parts to be converted in triangle mesh.
  
		"""
		pass

	def create2DSurface(self,numberRowsOfFaces=1, numberColumnOfFaces=1, cornerVertices=[[0, 0, 0], [1, 0, 0], [1, 1, 0], [0, 1, 0]], parent=None):
		"""
		Creates a PolyNURBS surface in space.

    Args:
      numberRowsOfFaces (int): Number of faces to be shown vertically for the
        surface.
      numberColumnOfFaces (int): Number of faces to be shown horizontally for the
        surface.
      cornerVertices (list[math.Point, math.Point, math.Point, math.Point]): The 
        four corner vertices location in global space.
      parent (Assembly): The parent of the new part created.

    Returns:
      PolyNURBS
    
		"""
		pass

	def createBrick(self,x=1, y=1, z=1, position=None, parent=None):
		"""
		Creates a PolyNURBS block in space.

    Args:
      x (float): Length of the block.
      y (float): Width of the block.
      z (float): Depth of the block.
      position (math.Matrix44): Transformation matrix of the block.
      parent (Assembly): The parent of the new part created.

    Returns:
      PolyNURBS
    
		"""
		pass

	def createCustomPolygon(self,vertices, indices, edgeWeights=None, parent=None):
		"""
		Creates a custom PolyNURBs polygon.

    Args:
      vertices (list[math.Point]): List of each vertex location in global
        space.
      indices (list[list[int]]): List of vertex indices forming each polygon.
      edgeWeights (list[list[int, int, float]]): A list of list containing vertex 1 index,
        vertex 2 index and the weight. The weight should be in [0, 10], with 10 
        being perfect crease with the cage.
        Edge weights pull the smooth surface closer to the cage's edge. 
      parent (Assembly): The parent of the new part created.

    Returns:
      PolyNURBS
    
		"""
		pass

	def createPolygonMesh(self,vertices, indices, edgeWeights=None, parent=None):
		"""
		Creates a custom PolyNURBs polygon.

    Args:
      vertices (list[math.Point]): List of each vertex location in global
        space.
      indices (list[list[int]]): List of vertex indices forming each polygon.
      edgeWeights (list[list[int, int, float]]): A list of list containing vertex 1 index,
        vertex 2 index and the weight. The weight should be in [0, 10], with 10 
        being perfect crease with the cage.
        Edge weights pull the smooth surface closer to the cage's edge. 
      parent (Assembly): The parent of the new part created.

    Returns:
      PolyNURBS
    
		"""
		pass

	def createSurfaceGrid(self,numberRowsOfFaces=1, numberColumnOfFaces=1, cornerVertices=[[0, 0, 0], [1, 0, 0], [1, 1, 0], [0, 1, 0]], parent=None):
		"""
		Creates a PolyNURBS surface in space.

    Args:
      numberRowsOfFaces (int): Number of faces to be shown vertically for the
        surface.
      numberColumnOfFaces (int): Number of faces to be shown horizontally for the
        surface.
      cornerVertices (list[math.Point, math.Point, math.Point, math.Point]): The 
        four corner vertices location in global space.
      parent (Assembly): The parent of the new part created.

    Returns:
      PolyNURBS
    
		"""
		pass

	@property
	def currentRepresentation(self):
		pass
	@currentRepresentation.setter
	def currentRepresentation(self):
		pass

	@property
	def designSpace(self):
		pass
	@designSpace.setter
	def designSpace(self):
		pass

	def destroy(self):
		"""
		Destroys occurrences from the model.
    
		"""
		pass

	@property
	def detectCollisions(self):
		pass
	@detectCollisions.setter
	def detectCollisions(self):
		pass

	@property
	def dimensions(self):
		pass
	@dimensions.setter
	def dimensions(self):
		pass

	@property
	def displacementConstraints(self):
		pass
	@displacementConstraints.setter
	def displacementConstraints(self):
		pass

	@property
	def drawDirections(self):
		pass
	@drawDirections.setter
	def drawDirections(self):
		pass

	def edit(self):
		"""
		Contextmanager to group multiple updates for performance.
		"""
		pass

	@property
	def enforcedDisplacements(self):
		pass
	@enforcedDisplacements.setter
	def enforcedDisplacements(self):
		pass

	@property
	def features(self):
		pass
	@features.setter
	def features(self):
		pass

	def findAndFixBadFaces(self):
		"""
		Finds and fixes any bad faces of the given part.
		"""
		pass

	def findMinimumSeparation(self,other):
		"""
		Find closest points between two parts
    
    Args:
      other (Part): The 2nd part.
      
    Returns:
      namedtuple("ClosestPoints", "point1 point2 distance feature1 feature2")
    
		"""
		pass

	def fit(self,parts, numberOfFaces=500, curvature=0.5, autoCrease=False, system=None, symmetry=(0, 0, 0), parent=None):
		"""
		Creates a new PolyNURBS part, on top of an existing mesh geometry.

    Args:
      parts (list[Part]): The parts to be fitted.
        If you pass more than one part, they will be combined into a single part.
      numberOfFaces (int): The number of PolyNURBS cage faces to be created for each
        part.
      curvature (float): The amount of curvature detail to be captured.
        The value should range between 0 and 1. Higher values will capture more features.
      autoCrease (bool): If True, the Fit operation will attempt to retain sharp
        edges from the original model, so you can create fillets at a later time.
      system (System): Reference system which symmetry should occur about.
      symmetry (math.Vector): Specifies the direction of the symmetry along which axis of the system.
        The value can be (0,1,0) specifying the symmetry along Y axis of the reference system.
      parent (Assembly): The parent of the new part created.

    Returns:
      PolyNURBS
    
		"""
		pass

	def fitSynthesis(self,synthesis, curvature=50, numberOfFaces=2500, shrinkWrapSize=0.0019, autoCrease=False, intersect=True, symmetry=True, density=None):
		"""
		Fits an optimized part with PolyNURBS

    Args:
      synthesis (Synthesis): Synthesis object to get the synthesized part
      curvature (float): The amount of curvature detail to be captured. 
        The value must be between 0 and 100. Higher values capture more features.
      numberOfFaces (int): The number of PolyNURBs cage faces to be created for each
        optimized part.
      shrinkWrapSize (float): The Voxel dimension size for each PolyNURB cage.
      autoCrease (bool): If True, the Fit operation will attempt to retain sharp
        edges from the original model, so you can create fillets at a later time.
      intersect (bool): If True, intersects the optimized part with the new PolyNURBS part.
      symmetry (bool): If True, align the optimized part with symmetric constraints.
      density (float): Density Threshold Value.Value can range from 0 to 1.0.
    
		"""
		pass

	@property
	def flexible(self):
		pass
	@flexible.setter
	def flexible(self):
		pass

	def getAllChildren(self,type=None, **kwds):
		"""
		Returns a list of all children that matches the specified type.

    Args:
      type (list[Named]): Filter to use to get the children based on object type.
      **kwds : Additional keyword arguments to match other attributes of the object.

    Returns:
      list[Union[Part, Motor, BoundaryCondition, ...]]: The list of children that satisfy the supplied filters.
    
		"""
		pass

	def getAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value.

    Args:
      name (str): Attribute name to find its class.
    
		"""
		pass

	def getAttributes(self,type=None, **kwds):
		"""
		Return an dict of the attributes.
    Pass type and kwds to filter by type and Attribute properties

    Args:
      type (type): Filters the attribute based on type
      **kwds : Additional kwds argument to filter attribute by its properties

    Returns:
      dict: Return an OrderedDict of the attributes
    
		"""
		pass

	def getChild(self,name=None, recursive=False, **kwds):
		"""
		Returns the child of the object which matches the specified unique name.

    Args:
      name (str): The name of the child object.
      recursive (bool):  Search all descendents.
      **kwds : Additional keyword arguments to match attributes of the object.

    Returns:
      Named: The child object which satisfies the specified filters.
    
		"""
		pass

	def getChildren(self,type=None, recursive=False, sorted=False, **kwds):
		"""
		Returns a list of children that is of the specified type.

    Args:
      type (Type[Named]): Filter objects by class.
      recursive (bool): True to get all descendent Parts and Assemblies.
      sorted (bool): Sort the children base on id.

    Returns:
      list[Named]
    
		"""
		pass

	def getClass(self,className):
		"""
		Returns the class of the object.
    
    It can be simple or qualified (with namespace). If the name is simple, we 
    prepend the cls.namespace.

    Args:
      className (Union[Part, Occurrence, Named..]) : The class name. 
     
    Returns:
      Union[Part, Occurrence, Named..] : The class for the specified className. 

    
		"""
		pass

	def getClassAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value

    Args:
      name (str): Name of the attribute
    
		"""
		pass

	def getClosestPoint(self,point):
		"""
		Get closest point on part from passed point
		"""
		pass

	def getDependents(self,recursive=False, **kwds):
		"""
		Get objects that reference this object through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getFeature(self,name=None):
		"""
		Returns the feature based on its name.
		"""
		pass

	def getFeatures(self,type=None, rep="PolymeshRep", **kwds):
		"""
		Returns a list of features based on specified filters.
		"""
		pass

	def getGuiAttributeNames(self):
		"""
		Return list of the attribute names that are in the gui

    Returns:
      list: Returns list of active gui attribute
    
		"""
		pass

	def getGuiValue(self,attr, **kwds):
		"""
		Get value formatted to be shown in the gui

    Args:
      attr (str): Attribute name to gets its gui value.

    Returns:
      str: Returns a string of the value with its gui units, like "5 mm/s".
    
		"""
		pass

	def getRayIntersections(self,origin, direction):
		"""
		Find list of points where ray intersects part
		"""
		pass

	def getReferences(self,recursive=False, **kwds):
		"""
		Get objects this object references through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getSerializedAttributeValues(self):
		pass

	def getValue(self,attr):
		"""
		Return the attribute value for passed attribute name.
    
    Args:
      attr (String): Attribute name to gets its value.

    Returns:
      str: Returns the attribute value
    
		"""
		pass

	@property
	def ground(self):
		pass
	@ground.setter
	def ground(self):
		pass

	@property
	def grounded(self):
		pass
	@grounded.setter
	def grounded(self):
		pass

	@property
	def holes(self):
		pass
	@holes.setter
	def holes(self):
		pass

	def identifyShape(self):
		"""
		Attempts to identify the part geometry as a known shape.

      The shapes can be:

          - Box
          - Ellipsoid
          - Sphere
          - Cylinder
          - frustum
          - axi-symmetric gear
          - rack
          
    Returns:
      Box,Ellipsoid,Sphere.. : The identified shape.
    
		"""
		pass

	@property
	def ignoreFlexibility(self):
		pass
	@ignoreFlexibility.setter
	def ignoreFlexibility(self):
		pass

	def intersect(self,parts, createSolids=False, keepSourceParts=False):
		"""
		Intersect tool that deletes excess faces, edges and vertices.

  Args:
    parts (list[Part]): Parts to intersect.
    createSolids (bool): If True, faces of solid volumes automatically selected.
    keepSourceParts (bool): Determines whether to keep source parts or not.
      When original parts are not kept, they are deleted from the model
      at the end of a successful operation.

  Returns:
    Part/None: New part if created otherwise none.
  
		"""
		pass

	def intersectCurve(self,targets, tools, combineCurves=False):
		"""
		Split intersecting curves or wire bodies into several curves.

  Args:
    targets (list[Part]): Parts to be intersected with tools.
    tools (list[Part]): Parts used to intersect the targets.
    combineCurves (bool): If True, combine result curves.

  Returns:
    Part: The intersect part.
  
		"""
		pass

	def intersects(self,other):
		"""
		Finds whether the two parts intersect.

    Args:
      other (Part): The 2nd part.
    Returns:
      bool: True if they intersect, False otherwise.
    
		"""
		pass

	@property
	def ip(self):
		pass
	@ip.setter
	def ip(self):
		pass

	def isa(self,type=None, filter=None, name=None, wildcard=None, **kwds):
		"""
		Determines if the object matches the specified settings or not.
    
    Args:
      type (Union[Part, Assembly, Contact..]): The type of the object.
      filter (method): Return value of specified callback method.
      name (str): Name that matches exactly with object name.
      wildcard (str): A pattern to match exactly with the object name.
      **kwds : Additional keyword arguments to match other attributes.

    Returns:
      bool : True, if a match is found, otherwise False.
    
		"""
		pass

	def linearPattern(self,input, direction1, direction2=(0, 0, 0), bothDirection=False, spacing1="0.0", count1=3, spacing2="0.0", count2=3, instances=False, symmetry1=False, symmetry2=False, reverseDir1=False, reverseDir2=False, result="NEW_PART", mergeWithAllParts=True, mergeParts=None, copiesToSkip=None, seedOnly=False):
		"""
		Linear Pattern parts or faces along a direction.

  Args:
    input (list[Part] | list[FeatureArea]): Parts or Features to create linear
      pattern.
    direction1 (math.Vector | FeatureCurve | Axis): Direction can be a 
      reference line, edge, or axis to which the pattern will be parallel.
    direction2 (math.Vector | FeatureCurve | Axis): Direction can be a 
      reference line, edge, or axis to which the pattern will be parallel.
    bothDirection (bool): If True, sets in both direction otherwise single
      direction.
    spacing1 (float): Distance between two copies.
    count1 (int): Number of copies.
    spacing2 (float): Distance between two copies.
    count2 (int): Number of copies.
    instances (bool): If True, any changes to part or face will apply to all
      instances.
    symmetry1 (bool): Symmetry in Direction 1.
    symmetry2 (bool): Symmetry in Direction 2.
    reverseDir1 (bool): Reverse the pattern direction in Direction 1.
    reverseDir2 (bool): Reverse the pattern direction in Direction 2.
    result (str): Result type of linear pattern.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeParts.
    mergeParts (list[Part]): Parts to be merged with linear pattern.
    copiesToSkip ((dict{Part: list[tuplex,y)]}): Set copies to skip. Here x and
      y are the indices in 2D space of copy , which needs to be skipped.
    seedOnly (bool): If True, pattern the entities only along the first row and
      first column.

  Returns:
  list[Part]: List of parts created.
  
		"""
		pass

	@property
	def location(self):
		pass
	@location.setter
	def location(self):
		pass

	def makeSmooth(self,parts=None, maintainVolume=True, intensity=0.5, iterations=40):
		"""
		Smoothens parts from the selected parts with passed params.

  Args:
    parts (list[Part]): A list of parts to smooth
    maintainVolume (bool): If True part volume is targeted to be preserved.
      If false smoothening is done more aggressively every iteration
    intensity (float[0.2, 0.9]): this control how aggressive the smoothening
      operation is every iteration.
    iterations (int): The number of iterations algorithm does smoothening.
      Higher number results in smoother mesh

  
		"""
		pass

	@property
	def mass(self):
		pass
	@mass.setter
	def mass(self):
		pass

	@property
	def material(self):
		pass
	@material.setter
	def material(self):
		pass

	@property
	def maxFreq(self):
		pass
	@maxFreq.setter
	def maxFreq(self):
		pass

	@property
	def maxMeshSize(self):
		pass
	@maxMeshSize.setter
	def maxMeshSize(self):
		pass

	@property
	def maxThickness(self):
		pass
	@maxThickness.setter
	def maxThickness(self):
		pass

	def mergeOptions(self,option):
		"""
		Convert the polyNURBS into a subdivision surface.

    Args:
      option (str): Merge  options for polyBURBS part.
        - SUBDIVISION_SURFACE
        - UNMERGE_SURFACES
        - MERGE_SURFACES
    
		"""
		pass

	def meshInfo(self):
		pass

	def midSurface(self,part, surfaceOptions="Mid"):
		"""
		Extracts a midsurface or side faces from thin solids, and determine where
  surfaces are represented.
    
  Replacing parts with midsurfaces yields better results while increasing 
  speed when running an analysis or optimization.

  Args:
    part (Part): The part which needs midsurface extraction.
    surfaceOptions (str): This options allows you to extract the Mid, Left or Right
      surface of the part.
  
		"""
		pass

	@property
	def minBoundingBox(self):
		pass
	@minBoundingBox.setter
	def minBoundingBox(self):
		pass

	@property
	def minGap(self):
		pass
	@minGap.setter
	def minGap(self):
		pass

	@property
	def minMeshSize(self):
		pass
	@minMeshSize.setter
	def minMeshSize(self):
		pass

	@property
	def minThickness(self):
		pass
	@minThickness.setter
	def minThickness(self):
		pass

	def mirror(self,areas, origin, normal, keepOriginal=True):
		"""
		Tool to mirror PolyNURBS bodies across a symmetry plane.

    Args:
      areas (list[FeatureArea]): The faces to create mirror.
      origin (math.Point): The origin of the mirror.
      normal (math.Vector): The normal of the mirror.
      keepOriginal (bool): If True, both the original and the mirrored bodies
       will be retained in the model.
    
		"""
		pass

	@property
	def modeType(self):
		pass
	@modeType.setter
	def modeType(self):
		pass

	def modelPositions(self):
		"""
		Forces all objects to return the original model positions instead of the
    current analysis positions.

    Useful when defining draw methods on GeneralObjects where behaviour is 
    different while animating.
    
		"""
		pass

	@property
	def modifiable(self):
		pass
	@modifiable.setter
	def modifiable(self):
		pass

	@property
	def morphable(self):
		pass
	@morphable.setter
	def morphable(self):
		pass

	@property
	def motionContactResolution(self):
		pass
	@motionContactResolution.setter
	def motionContactResolution(self):
		pass

	@property
	def movable(self):
		pass
	@movable.setter
	def movable(self):
		pass

	def move(self,part, position):
		"""
		Translates and/or rotates a part. 

  Args:
    part (Part): The part to move.
    position (math.Matrix44): The position to move the part at.
  
		"""
		pass

	def moveEdge(self,edge, direction, distance):
		"""
		Move the edge according to direction and distance.

    Args:
      edge (FeatureLinear): Face to be moved.
      direction (math.Vector): Direction in which face to be moved.
      distance (float): The distance by which face need to be moved.
    
		"""
		pass

	def moveFace(self,face, direction, distance):
		"""
		Move the face according to direction and distance.

    Args:
      face (FeatureArea): Face to be moved.
      direction (math.Vector): Direction in which face to be moved.
      distance (float): The distance by which face need to be moved.
    
		"""
		pass

	def movePoints(self,deltaLocations):
		"""
		Translates the points according to translation deltas given.

    Args:
      deltaLocations (dict[FeaturePoint, math.Point]): A mapping of points to their 
        corresponding (dx, dy, dz) translation.
    
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	@property
	def numModes(self):
		pass
	@numModes.setter
	def numModes(self):
		pass

	def offset(self,input, value, newPart=False):
		"""
		Offset surfaces or parts.

  Args:
    input (list[Part] | list[Feature])
    value (float | str): Desired offset distance. Negative value means inward direction.
      If value is a string it can be a Model Variable or a value with units.
    newPart (bool): If True, creates a new part.

  Returns:
    Part|None: New part created if newPart was True.
  
		"""
		pass

	@property
	def orderType(self):
		pass
	@orderType.setter
	def orderType(self):
		pass

	@property
	def parent(self):
		pass
	@parent.setter
	def parent(self):
		pass

	def patternAlongPath(self,input, path, count=3, equalSpacing=False, spacing=0.01, instances=False, method="TRANSFORM", orientation="MAINTAIN_SEED_ORIENTATION", pathReverse=False, result="NEW_PART", mergeWithAllParts=True, mergeParts=None, copiesToSkip=None):
		"""
		Pattern parts or faces along curve.

   Args:
    input (list[Part] | list[FeatureArea]): Parts or Features to create pattern
      along the curve.
    path (list[FeatureCurve]): Path for pattern.
    count (int): Number of copies.
    equalSpacing (bool): If True, equally space the copies.
    spacing (float): Distance between two copies.
    instances (bool): If True, any changes to part or face will apply to all instances.
    method (str): Pattern method.
      - TRANSFORM
      - OFFSET
    orientation (str): Pattern Orientation.
      - TANGENT_TO_CURVE
      - MAINTAIN_SEED_ORIENTATION
    pathReverse (bool): Reverse the path of pattern.
    result (str): Result type of pattern along path.
      - COMBINE
      - SUBTRACT
      - INTERSECT
      - NEW_PART
    mergeWithAllParts (bool): If True, merge with All parts otherwise merge with
      parts supplied in mergeParts.
    mergeParts (list[Part]): Parts to be merged with pattern along path.
    copiesToSkip (dict{Part: list[indicesToSkip]}): Set copies to skip. It's
      basically a dictionary which contains Part as a key and list of indices to
      skip as values.

  Returns:
  list[Part | Feature]: List of parts/features created.
  
		"""
		pass

	@property
	def position(self):
		pass
	@position.setter
	def position(self):
		pass

	def projectAndSplit(self,targets, tools, direction, trim=True, keepType="EXTERIOR", vectorDirection=None, extendProjection=True, trimExtents="THROUGH_ALL", extractProjection=False, surfaceNormal=None, resultAsSurface=False):
		"""
		Formerly known as projectAndSplit. It removes part of a surface or solid by
  projecting a profile curve on to it. OR use a set of tool surfaces to split a
  set of target surfaces.

  Args:
    targets (list[Part] | list[Feature]): List of Parts or features on which
      feature projection to be.
    tools (list[Feature]): Feature that needs to be projected on Part.
    direction (str): Valid values are: TOOL_NORMAL, X, Y, Z,
      VECTOR and CLOSEST_POINT, SURFACE_NORMAL.
    trim (bool): If True, operation type is trim otherwise split.
    keepType (str): Output to keep. Only valid for split.
      - EXTERIOR
      - INTERIOR
      - BOTH
    vectorDirection (FeatureLinear | System): Vector direction, only applicable
      when direction is 'VECTOR'.
    extendProjection (bool): If True, extends the projection.
    trimExtents (str): Trim extents, Only valid for Trim operation.
      - THROUGH_ALL
      - DIRECTION_1
      - DIRECTION_2
    extractProjection (bool): If True, extract projection without split. Valid
      only for split operation
    surfaceNormal (FeaturePlanar): Planar surface along whose normal you want
     to project the tools.
    resultAsSurface (bool): If True, Force output result being a sheet by
      removing faces on the solid target obtained by cut. Valid only for trim
      operation.

  Returns:
  list[Part]: List of parts created.
  
		"""
		pass

	def removeIsland(self,part):
		"""
		Finds small disconnected regions of a mesh part and delete them.

  Args:
    part (Part): Part having island.
  
		"""
		pass

	def removeSmooth(self,parts=None):
		"""
		
  Removes any existing smoothening from passed parts

  Args:
    parts (list[Part]): A list of parts to removing smooothing from.

  
		"""
		pass

	def replaceFromFile(self,part, filePath):
		"""
		Replace part with the contents of a file.

  Args:
    part (Part): The part to be replaced.
    filePath (str): The path to the file whose contents will replace the part.
  
		"""
		pass

	def replaceFromPart(self,part, toolPart, keepToolPart=False):
		"""
		Replace part with tool part.

  Args:
    part (Part): The part to be replaced.
    toolPart (Part): The part to replace with.
    keepToolPart (bool): Determines whether to keep the toolPart or not after replace.
  
		"""
		pass

	@property
	def representations(self):
		pass
	@representations.setter
	def representations(self):
		pass

	def rib(self,sketch, targetPart, ribThickness=0.01, flipMaterialDirection=False, offsetDirection="MID", ribDirection="NORMAL", draftAngle="0", reverseDraftDirection=False, extensionType="LINEAR"):
		"""
		Extrude rib geometry from a sketch to stiffen your model.

  Args:
    sketch (Part): Sketch profile for rib tool.
    targetPart (Part): Target part on which rib tool will be created.
    ribThickness (bool): Rib thickness.
    flipMaterialDirection (bool): If True, flip the material direction of rib
     tool otherwise not.
    offsetDirection (str): Offset direction type.
     - LEFT
     - MID
     - RIGHT
    ribDirection (str): Rib direction type.
     - NORMAL
     - PARALLEL
    draftAngle (float): Draft angle for rib creation in degree.
    reverseDraftDirection (bool): If True, reverse the draftAngle direction
     otherwise not.
    extensionType (str): Rib extension type.
     - LINEAR
     - NATURAL
  
		"""
		pass

	@property
	def rigid(self):
		pass
	@rigid.setter
	def rigid(self):
		pass

	@property
	def rigidGroup(self):
		pass
	@rigidGroup.setter
	def rigidGroup(self):
		pass

	def rotate(self,part, axis, angle, degrees=True):
		"""
		Rotates a part around the specified axis.

  This is a body rotation.

  Args:
    part (Part): The part to rotate.
    axis (Vector | str): The rotation axis. 
      If axis a string, valid choices are "x", "y", "z".
    angle (float): The rotation angle.
    degrees (bool): If True, angle is considered in degrees, if False in radians.

  
		"""
		pass

	@property
	def rotations(self):
		pass
	@rotations.setter
	def rotations(self):
		pass

	def save(self,file):
		"""
		Save the Part in the specified file.

    Args:
      file (str) : File name and path, where the file needs to be saved.
        Valid file extensions are:
          '.x_b', '.x_t', '.xmt_bin', '.xmt_txt', '.sat', '.sab', '.iges', '.igs',
          '.stl', '.step', '.stp', '.obj', '.vrml', '.vrl'.
    
		"""
		pass

	def scale(self,parts, value=1.1):
		"""
		Resizes the part to the specified scale value.

  This is useful when working with an imported model that is associated 
  with a different default unit system.

  Args:
    parts (list[Part]): Parts that need to be scaled.
    value (float | str): The scale factor.
      If value is a string it can be a Model Variable or a value with units.
  
		"""
		pass

	def setPointLocations(self,locations):
		"""
		Moves points to an exact location.

    Args:
      locations (dict[FeaturePoint, math.Point]): A mapping of points to the 
        corresponding new location.
    
		"""
		pass

	def setValue(self,attr, value):
		"""
		Alias for setattr (attr, value)
    Args:
      attr (str): Attribute name to sets its value.
      value (str): Attribute value to set .
    
		"""
		pass

	def setValues(self,**kwds):
		"""
		Sets passed name/value pairs.
    
    Values are set in a standard order (the order the attribute is defined
    on the class) which is required in certain cases when an attribute's
    setter expects another attribute to have already been set.
    For example, setting a reference before a location that is wrt it.
    
    Args:
      **kwds: Set attributes in one go.
    
		"""
		pass

	def sharpen(self,edge, weight):
		"""
		Controls sharpness along an edge of the part.

    Args:
      edge (FeatureCurve): Edge to sharpen.
      weight (float): Weight to sharpen edge with.

    
		"""
		pass

	@property
	def sheetThickness(self):
		pass
	@sheetThickness.setter
	def sheetThickness(self):
		pass

	def shell(self,areas, thickness="0"):
		"""
		Removes the cage face and creates thin walls to generate a shelled 
    PolyNURBS part.

    Args:
      areas (list[FeatureArea]): The cage faces to remove.
      thickness (float): The wall thickness of the shelled PolyNURBS part.
        If invalid thickness, is passed in, it will be computed.
    
		"""
		pass

	def shrinkWrap(self,parts=None, voxelSize=-1, merge=True, sharpen=False):
		"""
		Creates a new part/parts from the selected parts with a single isosurface

  The shrinkwrap is useful when you want to merge optimized results with 
  non-design-space regions. 

  You would do this so you can fit a single PolyNURBS over the entire model.
  By default, the selected parts are merged into a single part. 
  This option can be disabled by setting merge to False.

  Args:
    parts (list[Part]): A list of parts to be shrink wrapped.
    voxelSize (float): Size of each voxel of the shrink wrapped part. Size
      value should be in the range 0 to 1 Defaults to -1 to auto compute the
      voxel dimension of the part.
    merge (bool): Merge the shrink wrapped parts into single or multiple parts.
    sharpen (bool): If set to True, then sharpen the edges of the new shrink
      wrapped part.

  Returns:
    Part: Returns a new shrink wrapped part
  
		"""
		pass

	def simplifyHoles(self,entity, minSize="0", maxSize=None):
		"""
		Finds and removes holes and pockets, and find raised areas such as lettering.

  Args:
    entity (Part | Assembly | Feature): Part/Assembly from which you want to 
      remove the holes from or FeatureCircular which needs to be removed.
    minSize (float): Minimum size of hole.
    maxSize (float): Maximum size of hole.
  
		"""
		pass

	def simplifyImprints(self,entity):
		"""
		Finds and removes imprints from a part.

  An imprint is an edge or a point that appears on a surface that can be removed
  without changing the underlying integrity of the surface, such as scratches or
  trimmed points.

  Args:
    entity (Part | Assembly | FeatureLinear): Part/Assembly from which you want to
      remove the imprints from or FeatureLinear imprint to be removed.
  
		"""
		pass

	def simplifyPlugs(self,entity, minSize="0", maxSize=None):
		"""
		Finds holes and pockets, and plug them by filling the area with a new part

  Args:
    entity (Part | Assembly | Feature): Part/Assembly from which you want to plug 
      the holes or a Circular feature that needs to be plugged.
    minSize (float): Minimum size of plug.
    maxSize (float): Maximum size of plug.
  
		"""
		pass

	def simplifyRounds(self,entity, roundType="ALL", minSize="0", maxSize=None):
		"""
		Finds and removes both round (convex) and fillet (concave) surfaces.

  Args:
    entity (Part | Assembly | Feature): Part/Assembly from which you want to 
      remove the fillets, chamfers from or a Feature to be removed.
    roundType (str): Valid values are: ROUNDS, FILLETS, CHAMFERS and ALL.
    minSize (float): Minimum size of round.
    maxSize (float): Maximum size of round.
  
		"""
		pass

	def slice(self,targets, cutOrigin=None, cutNormal=None, surfaceFeature=None, extendSurface=True):
		"""
		Slices a set of solid objects with a cutting plane or cutting surface.

  You must provide cutOrigin and cutNormal or surfaceFeature.

  Args:
    targets (list[Part]): The parts to slice across the cutting plane.
    cutOrigin (math.Point): The origin of the cutting plane.
    cutNormal (math.Vector): The normal of the cutting plane.
    surfaceFeature (FeatureArea): The surface to slice the enity accross.
    extendSurface (bool): Set Automatic extension On/Off for tool Surface.

  Returns:
    Part: The new sliced part created.
  
		"""
		pass

	@property
	def spiders(self):
		pass
	@spiders.setter
	def spiders(self):
		pass

	def splitArea(self,area, point1, point2):
		"""
		Splits a single PolyNURBS cage face.

    Divides the area into two, including the original face, with a new edge 
    between the original and new face. The order of points determines which 
    resulting face is the original and which is new.
    
    Args:
      area (FeatureArea): The area to divide.
      point1 (FeaturePoint): The first point of the edge.
      point2 (FeaturePoint): The second point of the edge.

    
		"""
		pass

	@property
	def strainCalculation(self):
		pass
	@strainCalculation.setter
	def strainCalculation(self):
		pass

	@property
	def stressCalculation(self):
		pass
	@stressCalculation.setter
	def stressCalculation(self):
		pass

	@property
	def symmetryConstraints(self):
		pass
	@symmetryConstraints.setter
	def symmetryConstraints(self):
		pass

	@property
	def temperatures(self):
		pass
	@temperatures.setter
	def temperatures(self):
		pass

	def thicken(self,parts, value, symmetric=True):
		"""
		Thicken surface parts and convert them to solids, or thicken and hollow 
  solid parts.

  When used on a solid part, the Thicken tool yields a hollow solid.
  When used on a surface part, the Thicken tool yields a solid part.

  Args:
    parts (list[Part])
    value (float): Desired offset distance. Negative value means inward direction.
    symmetric (bool): If True, offsets symmetrically on both sides of the part surface.
  
		"""
		pass

	def translate(self,part, x="0", y=None, z=None):
		"""
		Translates by the specified distance.

  If y is None, x is assumed to be a list of 3 floats.

  Args:
    part (Part): The part to translate.
    x (float): The distance to translate the 'x' vector. 
    y (float): The distance to translate the 'y' vector.
    z (float): The distance to translate the 'z' vector.
  
		"""
		pass

	@property
	def transparency(self):
		pass
	@transparency.setter
	def transparency(self):
		pass

	def trimAndSplit(self,targets, tools, direction, trim=True, keepType="EXTERIOR", vectorDirection=None, extendProjection=True, trimExtents="THROUGH_ALL", extractProjection=False, surfaceNormal=None, resultAsSurface=False):
		"""
		Formerly known as projectAndSplit. It removes part of a surface or solid by
  projecting a profile curve on to it. OR use a set of tool surfaces to split a
  set of target surfaces.

  Args:
    targets (list[Part] | list[Feature]): List of Parts or features on which
      feature projection to be.
    tools (list[Feature]): Feature that needs to be projected on Part.
    direction (str): Valid values are: TOOL_NORMAL, X, Y, Z,
      VECTOR and CLOSEST_POINT, SURFACE_NORMAL.
    trim (bool): If True, operation type is trim otherwise split.
    keepType (str): Output to keep. Only valid for split.
      - EXTERIOR
      - INTERIOR
      - BOTH
    vectorDirection (FeatureLinear | System): Vector direction, only applicable
      when direction is 'VECTOR'.
    extendProjection (bool): If True, extends the projection.
    trimExtents (str): Trim extents, Only valid for Trim operation.
      - THROUGH_ALL
      - DIRECTION_1
      - DIRECTION_2
    extractProjection (bool): If True, extract projection without split. Valid
      only for split operation
    surfaceNormal (FeaturePlanar): Planar surface along whose normal you want
     to project the tools.
    resultAsSurface (bool): If True, Force output result being a sheet by
      removing faces on the solid target obtained by cut. Valid only for trim
      operation.

  Returns:
  list[Part]: List of parts created.
  
		"""
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

	@property
	def volume(self):
		pass
	@volume.setter
	def volume(self):
		pass

	def wasValueSet(self,attr):
		"""
		Check if attribute was set

    Args:
      attr (str): Attribute name to check it value set or not

    Returns:
      bool: True, if value was set else false.
    
		"""
		pass

class PolyNURBSShapeOptimization:
	def __init__(self,params="{}", runOptions="{}", ignoreWarnings=False):
		"""
Modify the location of cage points (defined by Shape variables) to 
  optimize the shape.
  
  Shape variables are required to run this shape optimization.
  
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	def destroy(self):
		"""
		Delete the object removing it from the model.
    
    The object may come back due to an undo/redo.
    
		"""
		pass

	def export(self,file, params="{}", runOptions="{}", ignoreWarnings=False):
		"""
		Download solver file (.fem, .ssp) for run
    
    Args:
      file (str): File path to save to
      
      See constructor for params, runOptions, ignoreWarnings
    
		"""
		pass

	def getAllChildren(self,type=None, **kwds):
		"""
		Returns a list of all children that matches the specified type.

    Args:
      type (list[Named]): Filter to use to get the children based on object type.
      **kwds : Additional keyword arguments to match other attributes of the object.

    Returns:
      list[Union[Part, Motor, BoundaryCondition, ...]]: The list of children that satisfy the supplied filters.
    
		"""
		pass

	def getAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value.

    Args:
      name (str): Attribute name to find its class.
    
		"""
		pass

	def getAttributes(self,type=None, **kwds):
		"""
		Return an dict of the attributes.
    Pass type and kwds to filter by type and Attribute properties

    Args:
      type (type): Filters the attribute based on type
      **kwds : Additional kwds argument to filter attribute by its properties

    Returns:
      dict: Return an OrderedDict of the attributes
    
		"""
		pass

	def getChild(self,name=None, recursive=False, **kwds):
		"""
		Returns the child of the object which matches the specified unique name.

    Args:
      name (str): The name of the child object.
      recursive (bool):  Search all descendents.
      **kwds : Additional keyword arguments to match attributes of the object.

    Returns:
      Named: The child object which satisfies the specified filters.
    
		"""
		pass

	def getChildren(self,type=None, recursive=False, sorted=False, **kwds):
		"""
		Returns a list of children that is of the specified type.

    Args:
      type (Type[Named]): Filter objects by class.
      recursive (bool): True to get all descendent Parts and Assemblies.
      sorted (bool): Sort the children base on id.

    Returns:
      list[Named]
    
		"""
		pass

	def getClass(self,className):
		"""
		Returns the class of the object.
    
    It can be simple or qualified (with namespace). If the name is simple, we 
    prepend the cls.namespace.

    Args:
      className (Union[Part, Occurrence, Named..]) : The class name. 
     
    Returns:
      Union[Part, Occurrence, Named..] : The class for the specified className. 

    
		"""
		pass

	def getClassAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value

    Args:
      name (str): Name of the attribute
    
		"""
		pass

	def getDependents(self,recursive=False, **kwds):
		"""
		Get objects that reference this object through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getGuiAttributeNames(self):
		"""
		Return list of the attribute names that are in the gui

    Returns:
      list: Returns list of active gui attribute
    
		"""
		pass

	def getGuiValue(self,attr, **kwds):
		"""
		Get value formatted to be shown in the gui

    Args:
      attr (str): Attribute name to gets its gui value.

    Returns:
      str: Returns a string of the value with its gui units, like "5 mm/s".
    
		"""
		pass

	def getReferences(self,recursive=False, **kwds):
		"""
		Get objects this object references through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getSerializedAttributeValues(self):
		pass

	def getValue(self,attr):
		"""
		Return the attribute value for passed attribute name.
    
    Args:
      attr (String): Attribute name to gets its value.

    Returns:
      str: Returns the attribute value
    
		"""
		pass

	def importResults(self,showExplorer=True):
		"""
		Make results available in the Analysis Explorer.
    
    Args:
      showExplorer (bool): Opens the Analysis Explorer dialog (gui mode only)
    
		"""
		pass

	@property
	def imported(self):
		pass
	@imported.setter
	def imported(self):
		pass

	def isa(self,type=None, filter=None, name=None, wildcard=None, **kwds):
		"""
		Determines if the object matches the specified settings or not.
    
    Args:
      type (Union[Part, Assembly, Contact..]): The type of the object.
      filter (method): Return value of specified callback method.
      name (str): Name that matches exactly with object name.
      wildcard (str): A pattern to match exactly with the object name.
      **kwds : Additional keyword arguments to match other attributes.

    Returns:
      bool : True, if a match is found, otherwise False.
    
		"""
		pass

	def modelPositions(self):
		"""
		Forces all objects to return the original model positions instead of the
    current analysis positions.

    Useful when defining draw methods on GeneralObjects where behaviour is 
    different while animating.
    
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	@property
	def parent(self):
		pass
	@parent.setter
	def parent(self):
		pass

	@property
	def progress(self):
		pass
	@progress.setter
	def progress(self):
		pass

	def setValue(self,attr, value):
		"""
		Alias for setattr (attr, value)
    Args:
      attr (str): Attribute name to sets its value.
      value (str): Attribute value to set .
    
		"""
		pass

	def setValues(self,**kwds):
		"""
		Sets passed name/value pairs.
    
    Values are set in a standard order (the order the attribute is defined
    on the class) which is required in certain cases when an attribute's
    setter expects another attribute to have already been set.
    For example, setting a reference before a location that is wrt it.
    
    Args:
      **kwds: Set attributes in one go.
    
		"""
		pass

	@property
	def solverType(self):
		pass
	@solverType.setter
	def solverType(self):
		pass

	@property
	def status(self):
		pass
	@status.setter
	def status(self):
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

	def wasValueSet(self,attr):
		"""
		Check if attribute was set

    Args:
      attr (str): Attribute name to check it value set or not

    Returns:
      bool: True, if value was set else false.
    
		"""
		pass

	@property
	def workingDir(self):
		pass
	@workingDir.setter
	def workingDir(self):
		pass

class Position:
	def __init__(self,default=[[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]], **kwds):
		"""
Store a Matrix44
"""
		pass

	def OnAttributeModify(self,obj, attr, *args):
		pass

	def activateListener(self,obj):
		"""
		Listen to referenced object for any changes.
		"""
		pass

	def apply(self,**kwds):
		"""
		Context manager to specify Attribute constructor kwds
    Useful to avoid repeating kwds while defining a related group
    
		"""
		pass

	def castForGet(self,obj, value):
		pass

	def castForSet(self,obj, value):
		pass

	def classifyObject(self,obj):
		pass

	def create(self,obj):
		pass

	def createList(self,listAttr, obj):
		pass

	def createListList(self,listAttr, obj):
		pass

	def deactivateListener(self,obj):
		"""
		Stop listening to referenced objects.
		"""
		pass

	def disable(self,obj):
		pass

	def enable(self,obj):
		pass

	def getCreateArgs(self):
		"""
		Helper used in create methods
		"""
		pass

	def getDisplayName(self,obj):
		pass

	def getGuiValue(self,obj):
		pass

	def getInCoreValue(self,obj):
		pass

	def getReadonly(self,obj):
		pass

	def getReferenceFrame(self,obj):
		"""
		Get Matrix44 from referenced object in base units.
		"""
		pass

	def getUnits(self,obj):
		pass

	def getValue(self,obj):
		pass

	def getValueList(self,obj):
		pass

	def getValueListList(self,obj):
		pass

	def getWrt(self,obj):
		"""
		Get object this attribute is relative to.
		"""
		pass

	def initialize(self,objCls, name):
		pass

	def loadValue(self,obj, value):
		pass

	def populateGuiValue(self,obj, prop):
		"""
		Override to customize, prop.value, displayValue, allowedValues.
    
    The prop.value type determines which editor widget used:
    - bool -> checkbox
    - str  -> line edit
    - hwtypes.Color -> color picker
    
    Setting prop.allowedValues yields a ComboBox.
    
    prop.displayValue is a str shown when the editor loses focus.
    
		"""
		pass

	def populatePropertyEditor(self,obj, prop, **kwds):
		"""
		Customize how attribute appears in Property Editor and ObjectTables.
    
    Args:
      obj (GeneralObject)
      prop (hwt::Property): Property Editor interface.
      component (int): 0, 1, 2
        Only passed when showing Triples 1 value at a time.
    
		"""
		pass

	def setInCoreValue(self,obj, value):
		pass

	def setValue(self,obj, value):
		pass

	def setValueList(self,obj, value):
		pass

	def setValueListList(self,obj, value):
		pass

	def toGlobal(self,obj, value):
		pass

	def toLocal(self,obj, value):
		pass

	def usingUnits(self,units):
		pass

class PositionImplicit:
	def __init__(self,cppName: str="",doc: str=""):
		"""
math.Matrix44
"""
		pass

class Power:
	def __init__(self,**kwds):
		"""
Implicit Power operation.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class Pressure:
	def __init__(self,features, location=None, direction=None, magnitude=None, **kwds):
		"""
A pressure is a distributed force that acts perpendicular to every point
  along the face.

  Pressures typically arise from gases or liquids pressing on a face
  and can act in either the inward or outward direction on a solid.
  To apply a distributed force to a face that acts in a single uniform direction
  across the entire face, use a force instead of a pressure.
  
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	@property
	def color(self):
		pass
	@color.setter
	def color(self):
		pass

	@property
	def connectionRadius(self):
		pass
	@connectionRadius.setter
	def connectionRadius(self):
		pass

	@property
	def connectionType(self):
		pass
	@connectionType.setter
	def connectionType(self):
		pass

	def destroy(self):
		"""
		Delete the object removing it from the model.
    
    The object may come back due to an undo/redo.
    
		"""
		pass

	@property
	def direction(self):
		pass
	@direction.setter
	def direction(self):
		pass

	@property
	def distributed(self):
		pass
	@distributed.setter
	def distributed(self):
		pass

	@property
	def feature(self):
		pass
	@feature.setter
	def feature(self):
		pass

	@property
	def features(self):
		pass
	@features.setter
	def features(self):
		pass

	def getAllChildren(self,type=None, **kwds):
		"""
		Returns a list of all children that matches the specified type.

    Args:
      type (list[Named]): Filter to use to get the children based on object type.
      **kwds : Additional keyword arguments to match other attributes of the object.

    Returns:
      list[Union[Part, Motor, BoundaryCondition, ...]]: The list of children that satisfy the supplied filters.
    
		"""
		pass

	def getAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value.

    Args:
      name (str): Attribute name to find its class.
    
		"""
		pass

	def getAttributes(self,type=None, **kwds):
		"""
		Return an dict of the attributes.
    Pass type and kwds to filter by type and Attribute properties

    Args:
      type (type): Filters the attribute based on type
      **kwds : Additional kwds argument to filter attribute by its properties

    Returns:
      dict: Return an OrderedDict of the attributes
    
		"""
		pass

	def getChild(self,name=None, recursive=False, **kwds):
		"""
		Returns the child of the object which matches the specified unique name.

    Args:
      name (str): The name of the child object.
      recursive (bool):  Search all descendents.
      **kwds : Additional keyword arguments to match attributes of the object.

    Returns:
      Named: The child object which satisfies the specified filters.
    
		"""
		pass

	def getChildren(self,type=None, recursive=False, sorted=False, **kwds):
		"""
		Returns a list of children that is of the specified type.

    Args:
      type (Type[Named]): Filter objects by class.
      recursive (bool): True to get all descendent Parts and Assemblies.
      sorted (bool): Sort the children base on id.

    Returns:
      list[Named]
    
		"""
		pass

	def getClass(self,className):
		"""
		Returns the class of the object.
    
    It can be simple or qualified (with namespace). If the name is simple, we 
    prepend the cls.namespace.

    Args:
      className (Union[Part, Occurrence, Named..]) : The class name. 
     
    Returns:
      Union[Part, Occurrence, Named..] : The class for the specified className. 

    
		"""
		pass

	def getClassAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value

    Args:
      name (str): Name of the attribute
    
		"""
		pass

	def getDependents(self,recursive=False, **kwds):
		"""
		Get objects that reference this object through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getGuiAttributeNames(self):
		"""
		Return list of the attribute names that are in the gui

    Returns:
      list: Returns list of active gui attribute
    
		"""
		pass

	def getGuiValue(self,attr, **kwds):
		"""
		Get value formatted to be shown in the gui

    Args:
      attr (str): Attribute name to gets its gui value.

    Returns:
      str: Returns a string of the value with its gui units, like "5 mm/s".
    
		"""
		pass

	def getReferences(self,recursive=False, **kwds):
		"""
		Get objects this object references through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getSerializedAttributeValues(self):
		pass

	def getValue(self,attr):
		"""
		Return the attribute value for passed attribute name.
    
    Args:
      attr (String): Attribute name to gets its value.

    Returns:
      str: Returns the attribute value
    
		"""
		pass

	def importLoads(self,csvFile):
		"""
		Imports boundary conditions to the active model from a csv file.

    Args:
      csvFile(str) : Csv file name containing all the BC information.

    Returns:
      list: List of error msgs that happened during import of all the boundary conditions.
    
		"""
		pass

	@property
	def inahole(self):
		pass
	@inahole.setter
	def inahole(self):
		pass

	@property
	def interpolationData(self):
		pass
	@interpolationData.setter
	def interpolationData(self):
		pass

	@property
	def inward(self):
		pass
	@inward.setter
	def inward(self):
		pass

	def isa(self,type=None, filter=None, name=None, wildcard=None, **kwds):
		"""
		Determines if the object matches the specified settings or not.
    
    Args:
      type (Union[Part, Assembly, Contact..]): The type of the object.
      filter (method): Return value of specified callback method.
      name (str): Name that matches exactly with object name.
      wildcard (str): A pattern to match exactly with the object name.
      **kwds : Additional keyword arguments to match other attributes.

    Returns:
      bool : True, if a match is found, otherwise False.
    
		"""
		pass

	@property
	def loadCase(self):
		pass
	@loadCase.setter
	def loadCase(self):
		pass

	@property
	def localToPart(self):
		pass
	@localToPart.setter
	def localToPart(self):
		pass

	@property
	def location(self):
		pass
	@location.setter
	def location(self):
		pass

	@property
	def magnitude(self):
		pass
	@magnitude.setter
	def magnitude(self):
		pass

	@property
	def mode(self):
		pass
	@mode.setter
	def mode(self):
		pass

	def modelPositions(self):
		"""
		Forces all objects to return the original model positions instead of the
    current analysis positions.

    Useful when defining draw methods on GeneralObjects where behaviour is 
    different while animating.
    
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	@property
	def parent(self):
		pass
	@parent.setter
	def parent(self):
		pass

	@property
	def part(self):
		pass
	@part.setter
	def part(self):
		pass

	@property
	def parts(self):
		pass
	@parts.setter
	def parts(self):
		pass

	def setSystem(self,system):
		"""
		Associate system to a boundary condition.

    Args:
      system (System): System tp associate with boundary condition.
    
		"""
		pass

	def setValue(self,attr, value):
		"""
		Alias for setattr (attr, value)
    Args:
      attr (str): Attribute name to sets its value.
      value (str): Attribute value to set .
    
		"""
		pass

	def setValues(self,**kwds):
		"""
		Sets passed name/value pairs.
    
    Values are set in a standard order (the order the attribute is defined
    on the class) which is required in certain cases when an attribute's
    setter expects another attribute to have already been set.
    For example, setting a reference before a location that is wrt it.
    
    Args:
      **kwds: Set attributes in one go.
    
		"""
		pass

	@property
	def type(self):
		pass
	@type.setter
	def type(self):
		pass

	def updatePosition(self,m44):
		"""
		Sets the design space positions of all the inspire parts to their 
    position in the current analysis frame.    
    
		"""
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

	def wasValueSet(self,attr):
		"""
		Check if attribute was set

    Args:
      attr (str): Attribute name to check it value set or not

    Returns:
      bool: True, if value was set else false.
    
		"""
		pass

class Primitives:
	def __init__(self):
		"""
Utilites to create parts with primitive shapes.

  The supported primitive shapes are block, cone, polygon, ellipsoid, 
  prism, sphere, torus and etc. 
  
"""
		pass

	def createCurves(self,points, **kwds):
		"""
		Creates a list of SplineCurve parts that connect the points.

      If the points don't have intersections, creates one SplineCurve part.
      Otherwise, creates one SplineCurve part for each section.

    Args:
      points (list[math.Point]): List of points used to create the SplineCurve part.
      **kwds: Part attributes like name, position, color...

    Returns:
      list [Part] : List of created parts.

    
		"""
		pass

	def createEmptyPart(self,**kwds):
		"""
		Creates an empty part.

    Args:
      **kwds: Part attributes like name, position, color...

    Returns:
      Part
    
		"""
		pass

	def createPointPart(self,**kwds):
		"""
		Creates a point part.

    Args:
      **kwds: Part attributes like name, location, color...

    Returns:
      Part
    
		"""
		pass

	def createPolylines(self,points, **kwds):
		"""
		Creates a list of Polyline parts that connect the points.

      If the points don't have intersections, creates one Polyline part.
      Otherwise, creates one Polyline part for each section.

    Args:
      points (list[math.Point]): List of points to create the Polyline part.
      **kwds: Part attributes like name, position, color...

    Returns:
      list[Part]: List of created parts.
    
		"""
		pass

	def createSheetCircle(self,radius=1, **kwds):
		"""
		Creates a circle centered at the origin in the XY plane.

    Args:
      radius (float)
      **kwds: Part attributes like name, position, color...

    Returns:
      Part
    
		"""
		pass

	def createSheetPolygon(self,radius=1, nsides=3, **kwds):
		"""
		Creates a regular polygon centered at the origin in the XY-plane.

    Args:
      radius (float): The distance from the center to a vertex.
      nsides (int): The number of sides. Must be > 2.
      **kwds: Part attributes like name, position, color...

    Returns:
      Part
    
		"""
		pass

	def createSheetRectangle(self,x=1, y=1, **kwds):
		"""
		Creates a rectangle centered at the origin.

    Args:
      x (float): The length. 
      y (float): The width.
      **kwds: Part attributes like name, position, color...

    Returns:
      Part
    
		"""
		pass

	def createSolidBlock(self,x=1, y=1, z=1, **kwds):
		"""
		Creates a solid block with the center of the base at the origin.

    Args:
      x (float): The length.
      y (float): The width.
      z (float): The height.
      **kwds: Part attributes like name, position, color...

    Returns:
      Part
    
		"""
		pass

	def createSolidCone(self,radius=1, height=1, semiangle="0", **kwds):
		"""
		Creates a a solid cone with the base centered at the origin in the XY 
    plane and the height extending along the z-axis.

    Args:
      radius (float): The radius in the XY-plane.
      height (float): The height along z-axis.
      semiangle (float): The angle the cone makes with the z-axis. Must be > 0 < pi/2.
      **kwds: Part attributes like name, position, color...

    Returns:
      Part
    
		"""
		pass

	def createSolidCylinder(self,radius=1, height=1, **kwds):
		"""
		Creates a solid cylinder with the base centered at the origin in the XY 
    plane and the height extending along the z-axis.

    Args:
      radius (float): The radius in the XY-plane.
      height (float): The height along z-axis.
      **kwds: Part attributes like name, position, color...

    Returns:
      Part
    
		"""
		pass

	def createSolidEllipsoid(self,xRadius=1, yRadius=0.5, zRadius=0.25, **kwds):
		"""
		Creates a solid ellipsoid centered at the origin.

    Args:
      xRadius (float): The radius in x-axis.
      yRadius (float): The radius in y-axis.
      zRadius (float): The radius in z-axis.
      **kwds: Part attributes like name, position, color...

    Returns:
      Part
    
		"""
		pass

	def createSolidPrism(self,radius=1, height=1, nsides=20, blendradius="0", **kwds):
		"""
		Creates a solid prism with the base centered at the origin in the XY 
    plane and the height extending along the z-axis.

    Args:
      radius (float): The radius in the XY-plane.
      height (float): The height along z-axis.
      nsides (int): The number of facets. Must be > 2.
      blendradius (float): The radius used to round the corners.
      **kwds: Part attributes like name, position, color...

    Returns:
      Part
    
		"""
		pass

	def createSolidSphere(self,radius=1, **kwds):
		"""
		Creates a solid sphere with centre at origin.

    Args:
      radius (float)
      **kwds: Part attributes like name, location, color...

    Returns:
      Part
    
		"""
		pass

	def createSolidTorus(self,majorRadius=1, minorRadius=0.5, **kwds):
		"""
		Creates a solid torus centered at the origin, located in the XY-plane 
    with the z-axis sticking through the hole.

    Args:
      majorRadius (float): The radius from the hole's center to the rim's midline.
      minorRadius (float): The radius of the cross section of the rim. 
        Must be less than majorRadius.
      **kwds: Part attributes like name, position, color...

    Returns:
      Part
    
		"""
		pass

class Problem:
	def __init__(self,problem, **kwds):
		"""
Info about an error or warning. Shown to user in the gui.ProblemDialog.

  Args:
    problem (str): Description of the problem.
    type (str): 'error' or 'warning'.
    solution (str): What can be done to solve the issue.
    object (Named): Related object.
    autoFix (Callable): Callback to fix the issue.
      Add a __doc__ to describe action.
    helpTopic (str): Help topic identifier for more info.
    review (str): Name of gui.Action to review the issue. Or:
      - 'context' to show object in its context.
      - 'propertyEditor' to show Property Editor and select the object.
      Use a tuple (action, object) to change the object.
    key (Any): Warning stops being suppressed if this changes.
  
"""
		pass

class RatioDataImplicit:
	def __init__(self,cppName,doc: str=""):
		"""
float
"""
		pass

def ReadHwCfdData(fileName,readMode: str="discard"):
	"""
Fetch data and create new stl part/s for given data.
  
"""
	pass

class Reference:
	def __init__(self,type=None, **kwds):
		"""
Store a Named entity or Feature.
  
  Use List or ListOfList(Reference) to store multiple values.

  Default for references is not currently supported.
  
"""
		pass

	def apply(self,**kwds):
		"""
		Context manager to specify Attribute constructor kwds
    Useful to avoid repeating kwds while defining a related group
    
		"""
		pass

	def castForGet(self,obj, value):
		pass

	def castForSet(self,obj, value):
		pass

	def classifyObject(self,obj):
		pass

	def create(self,obj):
		pass

	def createList(self,listAttr, obj):
		pass

	def createListList(self,listAttr, obj):
		pass

	def disable(self,obj):
		"""
		Called by GeneralObject when destroyed (or undo of a create)
		"""
		pass

	def enable(self,obj):
		"""
		Called by GeneralObject when created (or undo of a destroy)
		"""
		pass

	def getCreateArgs(self):
		"""
		Helper used in create methods
		"""
		pass

	def getDisplayName(self,obj):
		pass

	def getGuiValue(self,obj):
		pass

	def getInCoreValue(self,obj):
		pass

	def getReadonly(self,obj):
		pass

	def getReferences(self,obj):
		pass

	def getUnits(self,obj):
		pass

	def getValue(self,obj):
		pass

	def getValueList(self,obj):
		pass

	def getValueListList(self,obj):
		pass

	def initialize(self,objCls, name):
		"""
		Initializes the attribute.

    Args:
      objCls (class): Object class this attribute belongs to.
      name (str): Name of the attribute.
    
		"""
		pass

	def loadValue(self,obj, value):
		"""
		Called by GeneralObject.loadAttributeValues during stmod deserialization
		"""
		pass

	def populateGuiValue(self,obj, prop):
		pass

	def populatePropertyEditor(self,obj, prop, **kwds):
		"""
		Customize how attribute appears in Property Editor and ObjectTables.
    
    Args:
      obj (GeneralObject)
      prop (hwt::Property): Property Editor interface.
      component (int): 0, 1, 2
        Only passed when showing Triples 1 value at a time.
    
		"""
		pass

	def setInCoreValue(self,obj, value):
		pass

	def setValue(self,obj, value):
		pass

	def setValueList(self,obj, value):
		pass

	def setValueListList(self,obj, value):
		pass

	def usingUnits(self,units):
		pass

class ReferenceBodyImplicit:
	def __init__(self,cppName: str="",doc: str=""):
		"""
Implicit Body
"""
		pass

class ReferenceTracker:
	pass

class Remap:
	def __init__(self,**kwds):
		"""
Remap is a general field of scalar values into a signed distance field.
  After a remap, each position in the field will have a scalar value that is
  the signed distance to the closest point on the object being modelled
  (surface, point, line, etc.). Negative field values are on the inside of the
  model and positive field values are on the outside.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class ResultsCollectionType:
	def __init__(self,value, names=None, module=None, qualname=None, type=None, start=1):
		"""
An enumeration.
"""
		pass

class ResultsFormatOptions:
	def __init__(self,*args):
		pass

	def Context(self):
		pass

	def ConvertValue(self,convertValue: bool):
		pass

	def DefaultOptions(self,context: int =" 0"):
		pass

	def FixedMaxValue(self):
		pass

	def FixedMinValue(self):
		pass

	def Format(self):
		pass

	def FormatString(self):
		pass

	def Formula(self):
		pass

	def IsContextSet(self,context: int):
		pass

	def IsConvertValue(self):
		pass

	def IsShowUnits(self):
		pass

	def IsStripSpaces(self):
		pass

	def IsValidFormatString(self,formatStr: hwString):
		pass

	def Precision(self):
		pass

	def RemoveTrailingZeros(self):
		pass

	def SetContext(self,context: int):
		pass

	def SetFixedRange(self,minValue: float, maxValue: float):
		pass

	def SetFormat(self,format: int):
		pass

	def SetFormatString(self,formatStr: hwString):
		pass

	def SetFormula(self,*args):
		pass

	def SetPrecision(self,precision: int):
		pass

	def SetRemoveTrailingZeros(self,remove: bool):
		pass

	def SetUnits(self,units: hwString):
		pass

	def SetUnitsDisplayName(self,unitsDisplayName: hwString):
		pass

	def SetWidth(self,width: int):
		pass

	def ShowUnits(self,*args):
		pass

	def StripSpaces(self,strip: bool):
		pass

	def Units(self):
		pass

	def UnitsDisplayName(self):
		pass

	def Width(self):
		pass

	def defaultOptions(self):
		pass

	@property
	def thisown(self):
		pass
	@thisown.setter
	def thisown(self):
		pass

class ResultsItem:
	def __init__(self,**kwargs):
		"""
 Results item represents the current item in Results Explorer.
      The properties are:
        run (Synthsis) synthsis object
        stage (int) - stage index
        subcase (int) - subcase index
        resType (str or int) - result type name or id
        step (int) - step index (for the step related result types only)
  
"""
		pass

class RigidGroup:
	def __init__(self,**kwds):
		"""
Group of parts which don't move relative to each other and are realized to
  motion as a single rigid body.

  Rigid groups are mutually exclusive meaning a part can't be in two at the same time.
  
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	def add(self,parts):
		"""
		Adds part or parts to the rigid group.

    It raises a ValueError if the part already exists in a different rigid group.

    Args:
      parts (list[Part]) : List of part or parts to add into rigid group.
    
		"""
		pass

	@property
	def cg(self):
		pass
	@cg.setter
	def cg(self):
		pass

	def create(self,**kwds):
		"""
		Creates and returns a Rigid Group.
    
    Args:
      **name (str) : Name of the rigid group.
      **parts (list[Part]) : Specify a part or list of parts to create rigid group.

   Returns:
     RigidGroup : Return created rigid group.
    
		"""
		pass

	def destroy(self):
		"""
		Delete the object removing it from the model.
    
    The object may come back due to an undo/redo.
    
		"""
		pass

	def discard(self,parts):
		"""
		Remove part or parts from the rigid group.

    Args:
      parts (list[Part]) : List of part or parts to remove from the rigid group.
    
		"""
		pass

	def getAllChildren(self,type=None, **kwds):
		"""
		Returns a list of all children that matches the specified type.

    Args:
      type (list[Named]): Filter to use to get the children based on object type.
      **kwds : Additional keyword arguments to match other attributes of the object.

    Returns:
      list[Union[Part, Motor, BoundaryCondition, ...]]: The list of children that satisfy the supplied filters.
    
		"""
		pass

	def getAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value.

    Args:
      name (str): Attribute name to find its class.
    
		"""
		pass

	def getAttributes(self,type=None, **kwds):
		"""
		Return an dict of the attributes.
    Pass type and kwds to filter by type and Attribute properties

    Args:
      type (type): Filters the attribute based on type
      **kwds : Additional kwds argument to filter attribute by its properties

    Returns:
      dict: Return an OrderedDict of the attributes
    
		"""
		pass

	def getChild(self,name=None, recursive=False, **kwds):
		"""
		Returns the child of the object which matches the specified unique name.

    Args:
      name (str): The name of the child object.
      recursive (bool):  Search all descendents.
      **kwds : Additional keyword arguments to match attributes of the object.

    Returns:
      Named: The child object which satisfies the specified filters.
    
		"""
		pass

	def getChildren(self,type=None, recursive=False, sorted=False, **kwds):
		"""
		Returns a list of children that is of the specified type.

    Args:
      type (Type[Named]): Filter objects by class.
      recursive (bool): True to get all descendent Parts and Assemblies.
      sorted (bool): Sort the children base on id.

    Returns:
      list[Named]
    
		"""
		pass

	def getClass(self,className):
		"""
		Returns the class of the object.
    
    It can be simple or qualified (with namespace). If the name is simple, we 
    prepend the cls.namespace.

    Args:
      className (Union[Part, Occurrence, Named..]) : The class name. 
     
    Returns:
      Union[Part, Occurrence, Named..] : The class for the specified className. 

    
		"""
		pass

	def getClassAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value

    Args:
      name (str): Name of the attribute
    
		"""
		pass

	def getDependents(self,recursive=False, **kwds):
		"""
		Get objects that reference this object through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getGuiAttributeNames(self):
		"""
		Return list of the attribute names that are in the gui

    Returns:
      list: Returns list of active gui attribute
    
		"""
		pass

	def getGuiValue(self,attr, **kwds):
		"""
		Get value formatted to be shown in the gui

    Args:
      attr (str): Attribute name to gets its gui value.

    Returns:
      str: Returns a string of the value with its gui units, like "5 mm/s".
    
		"""
		pass

	def getReferences(self,recursive=False, **kwds):
		"""
		Get objects this object references through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getSerializedAttributeValues(self):
		pass

	def getValue(self,attr):
		"""
		Return the attribute value for passed attribute name.
    
    Args:
      attr (String): Attribute name to gets its value.

    Returns:
      str: Returns the attribute value
    
		"""
		pass

	@property
	def ground(self):
		pass
	@ground.setter
	def ground(self):
		pass

	@property
	def ip(self):
		pass
	@ip.setter
	def ip(self):
		pass

	def isa(self,type=None, filter=None, name=None, wildcard=None, **kwds):
		"""
		Determines if the object matches the specified settings or not.
    
    Args:
      type (Union[Part, Assembly, Contact..]): The type of the object.
      filter (method): Return value of specified callback method.
      name (str): Name that matches exactly with object name.
      wildcard (str): A pattern to match exactly with the object name.
      **kwds : Additional keyword arguments to match other attributes.

    Returns:
      bool : True, if a match is found, otherwise False.
    
		"""
		pass

	@property
	def location(self):
		pass
	@location.setter
	def location(self):
		pass

	@property
	def mass(self):
		pass
	@mass.setter
	def mass(self):
		pass

	def modelPositions(self):
		"""
		Forces all objects to return the original model positions instead of the
    current analysis positions.

    Useful when defining draw methods on GeneralObjects where behaviour is 
    different while animating.
    
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	@property
	def parent(self):
		pass
	@parent.setter
	def parent(self):
		pass

	@property
	def parts(self):
		pass
	@parts.setter
	def parts(self):
		pass

	@property
	def position(self):
		pass
	@position.setter
	def position(self):
		pass

	def remove(self,parts):
		"""
		Remove part or parts from the rigid group.

    It raises a ValueError if the part does not exists in this rigid group.

    Args:
      parts (list[Part]) : List of part or parts to remove from the rigid group.
  
		"""
		pass

	def setValue(self,attr, value):
		"""
		Alias for setattr (attr, value)
    Args:
      attr (str): Attribute name to sets its value.
      value (str): Attribute value to set .
    
		"""
		pass

	def setValues(self,**kwds):
		"""
		Sets passed name/value pairs.
    
    Values are set in a standard order (the order the attribute is defined
    on the class) which is required in certain cases when an attribute's
    setter expects another attribute to have already been set.
    For example, setting a reference before a location that is wrt it.
    
    Args:
      **kwds: Set attributes in one go.
    
		"""
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

	def wasValueSet(self,attr):
		"""
		Check if attribute was set

    Args:
      attr (str): Attribute name to check it value set or not

    Returns:
      bool: True, if value was set else false.
    
		"""
		pass

class Rotation:
	def __init__(self,location, direction, velocity="0", acceleration="0", **kwds):
		"""
Global rotation velocity and acceleration of the model.

  Angular velocity defines the speed of rotation of the entire model
  and the axis about which it rotates.
  Angular acceleration is the rate of change of the model's angular velocity.
  
"""
		pass

	@property
	def acceleration(self):
		pass
	@acceleration.setter
	def acceleration(self):
		pass

	@property
	def accelerationEnabled(self):
		pass
	@accelerationEnabled.setter
	def accelerationEnabled(self):
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	@property
	def color(self):
		pass
	@color.setter
	def color(self):
		pass

	@property
	def connectionRadius(self):
		pass
	@connectionRadius.setter
	def connectionRadius(self):
		pass

	@property
	def connectionType(self):
		pass
	@connectionType.setter
	def connectionType(self):
		pass

	def destroy(self):
		"""
		Delete the object removing it from the model.
    
    The object may come back due to an undo/redo.
    
		"""
		pass

	@property
	def direction(self):
		pass
	@direction.setter
	def direction(self):
		pass

	@property
	def distributed(self):
		pass
	@distributed.setter
	def distributed(self):
		pass

	@property
	def feature(self):
		pass
	@feature.setter
	def feature(self):
		pass

	@property
	def features(self):
		pass
	@features.setter
	def features(self):
		pass

	def getAllChildren(self,type=None, **kwds):
		"""
		Returns a list of all children that matches the specified type.

    Args:
      type (list[Named]): Filter to use to get the children based on object type.
      **kwds : Additional keyword arguments to match other attributes of the object.

    Returns:
      list[Union[Part, Motor, BoundaryCondition, ...]]: The list of children that satisfy the supplied filters.
    
		"""
		pass

	def getAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value.

    Args:
      name (str): Attribute name to find its class.
    
		"""
		pass

	def getAttributes(self,type=None, **kwds):
		"""
		Return an dict of the attributes.
    Pass type and kwds to filter by type and Attribute properties

    Args:
      type (type): Filters the attribute based on type
      **kwds : Additional kwds argument to filter attribute by its properties

    Returns:
      dict: Return an OrderedDict of the attributes
    
		"""
		pass

	def getChild(self,name=None, recursive=False, **kwds):
		"""
		Returns the child of the object which matches the specified unique name.

    Args:
      name (str): The name of the child object.
      recursive (bool):  Search all descendents.
      **kwds : Additional keyword arguments to match attributes of the object.

    Returns:
      Named: The child object which satisfies the specified filters.
    
		"""
		pass

	def getChildren(self,type=None, recursive=False, sorted=False, **kwds):
		"""
		Returns a list of children that is of the specified type.

    Args:
      type (Type[Named]): Filter objects by class.
      recursive (bool): True to get all descendent Parts and Assemblies.
      sorted (bool): Sort the children base on id.

    Returns:
      list[Named]
    
		"""
		pass

	def getClass(self,className):
		"""
		Returns the class of the object.
    
    It can be simple or qualified (with namespace). If the name is simple, we 
    prepend the cls.namespace.

    Args:
      className (Union[Part, Occurrence, Named..]) : The class name. 
     
    Returns:
      Union[Part, Occurrence, Named..] : The class for the specified className. 

    
		"""
		pass

	def getClassAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value

    Args:
      name (str): Name of the attribute
    
		"""
		pass

	def getDependents(self,recursive=False, **kwds):
		"""
		Get objects that reference this object through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getGuiAttributeNames(self):
		"""
		Return list of the attribute names that are in the gui

    Returns:
      list: Returns list of active gui attribute
    
		"""
		pass

	def getGuiValue(self,attr, **kwds):
		"""
		Get value formatted to be shown in the gui

    Args:
      attr (str): Attribute name to gets its gui value.

    Returns:
      str: Returns a string of the value with its gui units, like "5 mm/s".
    
		"""
		pass

	def getReferences(self,recursive=False, **kwds):
		"""
		Get objects this object references through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getSerializedAttributeValues(self):
		pass

	def getValue(self,attr):
		"""
		Return the attribute value for passed attribute name.
    
    Args:
      attr (String): Attribute name to gets its value.

    Returns:
      str: Returns the attribute value
    
		"""
		pass

	def importLoads(self,csvFile):
		"""
		Imports boundary conditions to the active model from a csv file.

    Args:
      csvFile(str) : Csv file name containing all the BC information.

    Returns:
      list: List of error msgs that happened during import of all the boundary conditions.
    
		"""
		pass

	@property
	def inahole(self):
		pass
	@inahole.setter
	def inahole(self):
		pass

	def isa(self,type=None, filter=None, name=None, wildcard=None, **kwds):
		"""
		Determines if the object matches the specified settings or not.
    
    Args:
      type (Union[Part, Assembly, Contact..]): The type of the object.
      filter (method): Return value of specified callback method.
      name (str): Name that matches exactly with object name.
      wildcard (str): A pattern to match exactly with the object name.
      **kwds : Additional keyword arguments to match other attributes.

    Returns:
      bool : True, if a match is found, otherwise False.
    
		"""
		pass

	@property
	def loadCase(self):
		pass
	@loadCase.setter
	def loadCase(self):
		pass

	@property
	def localToPart(self):
		pass
	@localToPart.setter
	def localToPart(self):
		pass

	@property
	def location(self):
		pass
	@location.setter
	def location(self):
		pass

	@property
	def mode(self):
		pass
	@mode.setter
	def mode(self):
		pass

	def modelPositions(self):
		"""
		Forces all objects to return the original model positions instead of the
    current analysis positions.

    Useful when defining draw methods on GeneralObjects where behaviour is 
    different while animating.
    
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	@property
	def parent(self):
		pass
	@parent.setter
	def parent(self):
		pass

	@property
	def part(self):
		pass
	@part.setter
	def part(self):
		pass

	@property
	def parts(self):
		pass
	@parts.setter
	def parts(self):
		pass

	def setSystem(self,system):
		"""
		Associate system to a boundary condition.

    Args:
      system (System): System tp associate with boundary condition.
    
		"""
		pass

	def setValue(self,attr, value):
		"""
		Alias for setattr (attr, value)
    Args:
      attr (str): Attribute name to sets its value.
      value (str): Attribute value to set .
    
		"""
		pass

	def setValues(self,**kwds):
		"""
		Sets passed name/value pairs.
    
    Values are set in a standard order (the order the attribute is defined
    on the class) which is required in certain cases when an attribute's
    setter expects another attribute to have already been set.
    For example, setting a reference before a location that is wrt it.
    
    Args:
      **kwds: Set attributes in one go.
    
		"""
		pass

	def updatePosition(self,m44):
		"""
		Sets the design space positions of all the inspire parts to their 
    position in the current analysis frame.    
    
		"""
		pass

	@property
	def velocity(self):
		pass
	@velocity.setter
	def velocity(self):
		pass

	@property
	def velocityEnabled(self):
		pass
	@velocityEnabled.setter
	def velocityEnabled(self):
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

	def wasValueSet(self,attr):
		"""
		Check if attribute was set

    Args:
      attr (str): Attribute name to check it value set or not

    Returns:
      bool: True, if value was set else false.
    
		"""
		pass

class RotationalDampingTriple:
	def __init__(self,default=(0, 0, 0), **kwds):
		pass

	def apply(self,**kwds):
		"""
		Context manager to specify Attribute constructor kwds
    Useful to avoid repeating kwds while defining a related group
    
		"""
		pass

	def castForGet(self,obj, value):
		"""
		Converts and returns the attribute value to its external type.

    Args:
      obj (GeneralObject): Object this attribute belongs to.
      value (Any): Value of the attribute to be converted.

    Returns:
      value (Any): Converted value.
    
		"""
		pass

	def castForSet(self,obj, value):
		pass

	def classifyObject(self,obj):
		pass

	def create(self,obj):
		pass

	def createList(self,listAttr, obj):
		pass

	def createListList(self,listAttr, obj):
		pass

	def disable(self,obj):
		"""
		Called by GeneralObject when destroyed (or undo of a create)
		"""
		pass

	def enable(self,obj):
		"""
		Called by GeneralObject when created (or undo of a destroy)
		"""
		pass

	def getCreateArgs(self):
		"""
		Helper used in create methods
		"""
		pass

	def getDisplayName(self,obj):
		pass

	def getGuiValue(self,obj, format="modeling"):
		pass

	def getInCoreValue(self,obj):
		pass

	def getReadonly(self,obj):
		pass

	def getUnits(self,obj):
		pass

	def getValue(self,obj):
		pass

	def getValueList(self,obj):
		pass

	def getValueListList(self,obj):
		pass

	def initialize(self,objCls, name):
		"""
		Initializes the attribute.

    Args:
      objCls (class): Object class this attribute belongs to.
      name (str): Name of the attribute.
    
		"""
		pass

	def loadValue(self,obj, value):
		"""
		Called by GeneralObject.loadAttributeValues during stmod deserialization
		"""
		pass

	def populateGuiValue(self,obj, prop, component=None):
		pass

	def populatePropertyEditor(self,obj, prop, **kwds):
		"""
		Customize how attribute appears in Property Editor and ObjectTables.
    
    Args:
      obj (GeneralObject)
      prop (hwt::Property): Property Editor interface.
      component (int): 0, 1, 2
        Only passed when showing Triples 1 value at a time.
    
		"""
		pass

	def setInCoreValue(self,obj, value):
		pass

	def setValue(self,obj, value):
		pass

	def setValueList(self,obj, value):
		pass

	def setValueListList(self,obj, value):
		pass

	def usingUnits(self,units):
		pass

class RotationalStiffnessTriple:
	def __init__(self,default=(0, 0, 0), **kwds):
		pass

	def apply(self,**kwds):
		"""
		Context manager to specify Attribute constructor kwds
    Useful to avoid repeating kwds while defining a related group
    
		"""
		pass

	def castForGet(self,obj, value):
		"""
		Converts and returns the attribute value to its external type.

    Args:
      obj (GeneralObject): Object this attribute belongs to.
      value (Any): Value of the attribute to be converted.

    Returns:
      value (Any): Converted value.
    
		"""
		pass

	def castForSet(self,obj, value):
		pass

	def classifyObject(self,obj):
		pass

	def create(self,obj):
		pass

	def createList(self,listAttr, obj):
		pass

	def createListList(self,listAttr, obj):
		pass

	def disable(self,obj):
		"""
		Called by GeneralObject when destroyed (or undo of a create)
		"""
		pass

	def enable(self,obj):
		"""
		Called by GeneralObject when created (or undo of a destroy)
		"""
		pass

	def getCreateArgs(self):
		"""
		Helper used in create methods
		"""
		pass

	def getDisplayName(self,obj):
		pass

	def getGuiValue(self,obj, format="modeling"):
		pass

	def getInCoreValue(self,obj):
		pass

	def getReadonly(self,obj):
		pass

	def getUnits(self,obj):
		pass

	def getValue(self,obj):
		pass

	def getValueList(self,obj):
		pass

	def getValueListList(self,obj):
		pass

	def initialize(self,objCls, name):
		"""
		Initializes the attribute.

    Args:
      objCls (class): Object class this attribute belongs to.
      name (str): Name of the attribute.
    
		"""
		pass

	def loadValue(self,obj, value):
		"""
		Called by GeneralObject.loadAttributeValues during stmod deserialization
		"""
		pass

	def populateGuiValue(self,obj, prop, component=None):
		pass

	def populatePropertyEditor(self,obj, prop, **kwds):
		"""
		Customize how attribute appears in Property Editor and ObjectTables.
    
    Args:
      obj (GeneralObject)
      prop (hwt::Property): Property Editor interface.
      component (int): 0, 1, 2
        Only passed when showing Triples 1 value at a time.
    
		"""
		pass

	def setInCoreValue(self,obj, value):
		pass

	def setValue(self,obj, value):
		pass

	def setValueList(self,obj, value):
		pass

	def setValueListList(self,obj, value):
		pass

	def usingUnits(self,units):
		pass

class Scale:
	def __init__(self,**kwds):
		"""
Implicit Scale Vector creation.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class SectionPlane:
	def __init__(self,**kwds):
		"""
Creates and view a 2D section planes from the model.
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	def destroy(self):
		"""
		Delete the object removing it from the model.
    
    The object may come back due to an undo/redo.
    
		"""
		pass

	@property
	def displayMode(self):
		pass
	@displayMode.setter
	def displayMode(self):
		pass

	@property
	def distance(self):
		pass
	@distance.setter
	def distance(self):
		pass

	@property
	def equation(self):
		pass
	@equation.setter
	def equation(self):
		pass

	def getAllChildren(self,type=None, **kwds):
		"""
		Returns a list of all children that matches the specified type.

    Args:
      type (list[Named]): Filter to use to get the children based on object type.
      **kwds : Additional keyword arguments to match other attributes of the object.

    Returns:
      list[Union[Part, Motor, BoundaryCondition, ...]]: The list of children that satisfy the supplied filters.
    
		"""
		pass

	def getAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value.

    Args:
      name (str): Attribute name to find its class.
    
		"""
		pass

	def getAttributes(self,type=None, **kwds):
		"""
		Return an dict of the attributes.
    Pass type and kwds to filter by type and Attribute properties

    Args:
      type (type): Filters the attribute based on type
      **kwds : Additional kwds argument to filter attribute by its properties

    Returns:
      dict: Return an OrderedDict of the attributes
    
		"""
		pass

	def getChild(self,name=None, recursive=False, **kwds):
		"""
		Returns the child of the object which matches the specified unique name.

    Args:
      name (str): The name of the child object.
      recursive (bool):  Search all descendents.
      **kwds : Additional keyword arguments to match attributes of the object.

    Returns:
      Named: The child object which satisfies the specified filters.
    
		"""
		pass

	def getChildren(self,type=None, recursive=False, sorted=False, **kwds):
		"""
		Returns a list of children that is of the specified type.

    Args:
      type (Type[Named]): Filter objects by class.
      recursive (bool): True to get all descendent Parts and Assemblies.
      sorted (bool): Sort the children base on id.

    Returns:
      list[Named]
    
		"""
		pass

	def getClass(self,className):
		"""
		Returns the class of the object.
    
    It can be simple or qualified (with namespace). If the name is simple, we 
    prepend the cls.namespace.

    Args:
      className (Union[Part, Occurrence, Named..]) : The class name. 
     
    Returns:
      Union[Part, Occurrence, Named..] : The class for the specified className. 

    
		"""
		pass

	def getClassAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value

    Args:
      name (str): Name of the attribute
    
		"""
		pass

	def getDependents(self,recursive=False, **kwds):
		"""
		Get objects that reference this object through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getGuiAttributeNames(self):
		"""
		Return list of the attribute names that are in the gui

    Returns:
      list: Returns list of active gui attribute
    
		"""
		pass

	def getGuiValue(self,attr, **kwds):
		"""
		Get value formatted to be shown in the gui

    Args:
      attr (str): Attribute name to gets its gui value.

    Returns:
      str: Returns a string of the value with its gui units, like "5 mm/s".
    
		"""
		pass

	def getReferences(self,recursive=False, **kwds):
		"""
		Get objects this object references through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getSerializedAttributeValues(self):
		pass

	def getValue(self,attr):
		"""
		Return the attribute value for passed attribute name.
    
    Args:
      attr (String): Attribute name to gets its value.

    Returns:
      str: Returns the attribute value
    
		"""
		pass

	def isa(self,type=None, filter=None, name=None, wildcard=None, **kwds):
		"""
		Determines if the object matches the specified settings or not.
    
    Args:
      type (Union[Part, Assembly, Contact..]): The type of the object.
      filter (method): Return value of specified callback method.
      name (str): Name that matches exactly with object name.
      wildcard (str): A pattern to match exactly with the object name.
      **kwds : Additional keyword arguments to match other attributes.

    Returns:
      bool : True, if a match is found, otherwise False.
    
		"""
		pass

	@property
	def location(self):
		pass
	@location.setter
	def location(self):
		pass

	def modelPositions(self):
		"""
		Forces all objects to return the original model positions instead of the
    current analysis positions.

    Useful when defining draw methods on GeneralObjects where behaviour is 
    different while animating.
    
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	@property
	def normal(self):
		pass
	@normal.setter
	def normal(self):
		pass

	@property
	def parent(self):
		pass
	@parent.setter
	def parent(self):
		pass

	def setValue(self,attr, value):
		"""
		Alias for setattr (attr, value)
    Args:
      attr (str): Attribute name to sets its value.
      value (str): Attribute value to set .
    
		"""
		pass

	def setValues(self,**kwds):
		"""
		Sets passed name/value pairs.
    
    Values are set in a standard order (the order the attribute is defined
    on the class) which is required in certain cases when an attribute's
    setter expects another attribute to have already been set.
    For example, setting a reference before a location that is wrt it.
    
    Args:
      **kwds: Set attributes in one go.
    
		"""
		pass

	@property
	def thickness(self):
		pass
	@thickness.setter
	def thickness(self):
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

	def wasValueSet(self,attr):
		"""
		Check if attribute was set

    Args:
      attr (str): Attribute name to check it value set or not

    Returns:
      bool: True, if value was set else false.
    
		"""
		pass

def SetOptionsToMakeRunFolderName(addGroupId=True, addTimeStamp=True):
	pass

class ShapeVariable:
	def __init__(self,pointDirections, **kwds):
		"""
Define which directions PolyNURBS cage points can move during PolyNURBS optimization.
  
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	def destroy(self):
		"""
		Delete the object removing it from the model.
    
    The object may come back due to an undo/redo.
    
		"""
		pass

	@property
	def features(self):
		pass
	@features.setter
	def features(self):
		pass

	def getAllChildren(self,type=None, **kwds):
		"""
		Returns a list of all children that matches the specified type.

    Args:
      type (list[Named]): Filter to use to get the children based on object type.
      **kwds : Additional keyword arguments to match other attributes of the object.

    Returns:
      list[Union[Part, Motor, BoundaryCondition, ...]]: The list of children that satisfy the supplied filters.
    
		"""
		pass

	def getAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value.

    Args:
      name (str): Attribute name to find its class.
    
		"""
		pass

	def getAttributes(self,type=None, **kwds):
		"""
		Return an dict of the attributes.
    Pass type and kwds to filter by type and Attribute properties

    Args:
      type (type): Filters the attribute based on type
      **kwds : Additional kwds argument to filter attribute by its properties

    Returns:
      dict: Return an OrderedDict of the attributes
    
		"""
		pass

	def getChild(self,name=None, recursive=False, **kwds):
		"""
		Returns the child of the object which matches the specified unique name.

    Args:
      name (str): The name of the child object.
      recursive (bool):  Search all descendents.
      **kwds : Additional keyword arguments to match attributes of the object.

    Returns:
      Named: The child object which satisfies the specified filters.
    
		"""
		pass

	def getChildren(self,type=None, recursive=False, sorted=False, **kwds):
		"""
		Returns a list of children that is of the specified type.

    Args:
      type (Type[Named]): Filter objects by class.
      recursive (bool): True to get all descendent Parts and Assemblies.
      sorted (bool): Sort the children base on id.

    Returns:
      list[Named]
    
		"""
		pass

	def getClass(self,className):
		"""
		Returns the class of the object.
    
    It can be simple or qualified (with namespace). If the name is simple, we 
    prepend the cls.namespace.

    Args:
      className (Union[Part, Occurrence, Named..]) : The class name. 
     
    Returns:
      Union[Part, Occurrence, Named..] : The class for the specified className. 

    
		"""
		pass

	def getClassAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value

    Args:
      name (str): Name of the attribute
    
		"""
		pass

	def getDependents(self,recursive=False, **kwds):
		"""
		Get objects that reference this object through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getFeatures(self):
		"""
		Returns a list of all features of ShapeVariable.
    
		"""
		pass

	def getGuiAttributeNames(self):
		"""
		Return list of the attribute names that are in the gui

    Returns:
      list: Returns list of active gui attribute
    
		"""
		pass

	def getGuiValue(self,attr, **kwds):
		"""
		Get value formatted to be shown in the gui

    Args:
      attr (str): Attribute name to gets its gui value.

    Returns:
      str: Returns a string of the value with its gui units, like "5 mm/s".
    
		"""
		pass

	def getReferences(self,recursive=False, **kwds):
		"""
		Get objects this object references through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getSerializedAttributeValues(self):
		pass

	def getValue(self,attr):
		"""
		Return the attribute value for passed attribute name.
    
    Args:
      attr (String): Attribute name to gets its value.

    Returns:
      str: Returns the attribute value
    
		"""
		pass

	def isa(self,type=None, filter=None, name=None, wildcard=None, **kwds):
		"""
		Determines if the object matches the specified settings or not.
    
    Args:
      type (Union[Part, Assembly, Contact..]): The type of the object.
      filter (method): Return value of specified callback method.
      name (str): Name that matches exactly with object name.
      wildcard (str): A pattern to match exactly with the object name.
      **kwds : Additional keyword arguments to match other attributes.

    Returns:
      bool : True, if a match is found, otherwise False.
    
		"""
		pass

	def modelPositions(self):
		"""
		Forces all objects to return the original model positions instead of the
    current analysis positions.

    Useful when defining draw methods on GeneralObjects where behaviour is 
    different while animating.
    
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	@property
	def parent(self):
		pass
	@parent.setter
	def parent(self):
		pass

	@property
	def pointDirections(self):
		pass
	@pointDirections.setter
	def pointDirections(self):
		pass

	def setValue(self,attr, value):
		"""
		Alias for setattr (attr, value)
    Args:
      attr (str): Attribute name to sets its value.
      value (str): Attribute value to set .
    
		"""
		pass

	def setValues(self,**kwds):
		"""
		Sets passed name/value pairs.
    
    Values are set in a standard order (the order the attribute is defined
    on the class) which is required in certain cases when an attribute's
    setter expects another attribute to have already been set.
    For example, setting a reference before a location that is wrt it.
    
    Args:
      **kwds: Set attributes in one go.
    
		"""
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

	def wasValueSet(self,attr):
		"""
		Check if attribute was set

    Args:
      attr (str): Attribute name to check it value set or not

    Returns:
      bool: True, if value was set else false.
    
		"""
		pass

class Sign:
	def __init__(self,**kwds):
		"""
Implicit sign operation.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class SimSolidAnalysis:
	def __init__(self,params="{}", runOptions="{}", ignoreWarnings=False):
		"""
Run structural analysis using SimSolid
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	def destroy(self):
		"""
		Delete the object removing it from the model.
    
    The object may come back due to an undo/redo.
    
		"""
		pass

	def export(self,file, params="{}", runOptions="{}", ignoreWarnings=False):
		"""
		Download solver file (.fem, .ssp) for run
    
    Args:
      file (str): File path to save to
      
      See constructor for params, runOptions, ignoreWarnings
    
		"""
		pass

	def getAllChildren(self,type=None, **kwds):
		"""
		Returns a list of all children that matches the specified type.

    Args:
      type (list[Named]): Filter to use to get the children based on object type.
      **kwds : Additional keyword arguments to match other attributes of the object.

    Returns:
      list[Union[Part, Motor, BoundaryCondition, ...]]: The list of children that satisfy the supplied filters.
    
		"""
		pass

	def getAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value.

    Args:
      name (str): Attribute name to find its class.
    
		"""
		pass

	def getAttributes(self,type=None, **kwds):
		"""
		Return an dict of the attributes.
    Pass type and kwds to filter by type and Attribute properties

    Args:
      type (type): Filters the attribute based on type
      **kwds : Additional kwds argument to filter attribute by its properties

    Returns:
      dict: Return an OrderedDict of the attributes
    
		"""
		pass

	def getChild(self,name=None, recursive=False, **kwds):
		"""
		Returns the child of the object which matches the specified unique name.

    Args:
      name (str): The name of the child object.
      recursive (bool):  Search all descendents.
      **kwds : Additional keyword arguments to match attributes of the object.

    Returns:
      Named: The child object which satisfies the specified filters.
    
		"""
		pass

	def getChildren(self,type=None, recursive=False, sorted=False, **kwds):
		"""
		Returns a list of children that is of the specified type.

    Args:
      type (Type[Named]): Filter objects by class.
      recursive (bool): True to get all descendent Parts and Assemblies.
      sorted (bool): Sort the children base on id.

    Returns:
      list[Named]
    
		"""
		pass

	def getClass(self,className):
		"""
		Returns the class of the object.
    
    It can be simple or qualified (with namespace). If the name is simple, we 
    prepend the cls.namespace.

    Args:
      className (Union[Part, Occurrence, Named..]) : The class name. 
     
    Returns:
      Union[Part, Occurrence, Named..] : The class for the specified className. 

    
		"""
		pass

	def getClassAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value

    Args:
      name (str): Name of the attribute
    
		"""
		pass

	def getDependents(self,recursive=False, **kwds):
		"""
		Get objects that reference this object through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getGuiAttributeNames(self):
		"""
		Return list of the attribute names that are in the gui

    Returns:
      list: Returns list of active gui attribute
    
		"""
		pass

	def getGuiValue(self,attr, **kwds):
		"""
		Get value formatted to be shown in the gui

    Args:
      attr (str): Attribute name to gets its gui value.

    Returns:
      str: Returns a string of the value with its gui units, like "5 mm/s".
    
		"""
		pass

	def getReferences(self,recursive=False, **kwds):
		"""
		Get objects this object references through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getSerializedAttributeValues(self):
		pass

	def getValue(self,attr):
		"""
		Return the attribute value for passed attribute name.
    
    Args:
      attr (String): Attribute name to gets its value.

    Returns:
      str: Returns the attribute value
    
		"""
		pass

	def importResults(self,showExplorer=True):
		"""
		Make results available in the Analysis Explorer.
    
    Args:
      showExplorer (bool): Opens the Analysis Explorer dialog (gui mode only)
    
		"""
		pass

	@property
	def imported(self):
		pass
	@imported.setter
	def imported(self):
		pass

	def isa(self,type=None, filter=None, name=None, wildcard=None, **kwds):
		"""
		Determines if the object matches the specified settings or not.
    
    Args:
      type (Union[Part, Assembly, Contact..]): The type of the object.
      filter (method): Return value of specified callback method.
      name (str): Name that matches exactly with object name.
      wildcard (str): A pattern to match exactly with the object name.
      **kwds : Additional keyword arguments to match other attributes.

    Returns:
      bool : True, if a match is found, otherwise False.
    
		"""
		pass

	def modelPositions(self):
		"""
		Forces all objects to return the original model positions instead of the
    current analysis positions.

    Useful when defining draw methods on GeneralObjects where behaviour is 
    different while animating.
    
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	def openResults(self,stage="0"):
		"""
		Open the h3d file to get a cls.Results object.

    Usage:
      with run.openResults() as results:
        print(results)

    Args:
      stage (int): Stage index
    
		"""
		pass

	@property
	def parent(self):
		pass
	@parent.setter
	def parent(self):
		pass

	@property
	def progress(self):
		pass
	@progress.setter
	def progress(self):
		pass

	def setValue(self,attr, value):
		"""
		Alias for setattr (attr, value)
    Args:
      attr (str): Attribute name to sets its value.
      value (str): Attribute value to set .
    
		"""
		pass

	def setValues(self,**kwds):
		"""
		Sets passed name/value pairs.
    
    Values are set in a standard order (the order the attribute is defined
    on the class) which is required in certain cases when an attribute's
    setter expects another attribute to have already been set.
    For example, setting a reference before a location that is wrt it.
    
    Args:
      **kwds: Set attributes in one go.
    
		"""
		pass

	@property
	def solverType(self):
		pass
	@solverType.setter
	def solverType(self):
		pass

	@property
	def status(self):
		pass
	@status.setter
	def status(self):
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

	def wasValueSet(self,attr):
		"""
		Check if attribute was set

    Args:
      attr (str): Attribute name to check it value set or not

    Returns:
      bool: True, if value was set else false.
    
		"""
		pass

	@property
	def workingDir(self):
		pass
	@workingDir.setter
	def workingDir(self):
		pass

class Sin:
	def __init__(self,**kwds):
		"""
Implicit Trigonometry Sin operation.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class SingleHole:
	def __init__(self,hole):
		"""
List of single holes
"""
		pass

	def addAdjacentFeature(self,feature):
		"""
		Add the supplied feature to the HoleData
    
		"""
		pass

	def append(self,item):
		"""
		Overloaded list method to cast the item to a HoleData
    
		"""
		pass

	@property
	def axis(self):
		pass
	@axis.setter
	def axis(self):
		pass

	def copy(self):
		"""
		 Return the copied hole
		"""
		pass

	@property
	def fasteners(self):
		pass
	@fasteners.setter
	def fasteners(self):
		pass

	@property
	def features(self):
		pass
	@features.setter
	def features(self):
		pass

	def isOpen(self):
		pass

	def isaRegularCylinder(self):
		"""
		Return true, if cylindrical hole has perpendicular faces
    
		"""
		pass

	@property
	def isslot(self):
		pass
	@isslot.setter
	def isslot(self):
		pass

	@property
	def isvalid(self):
		pass
	@isvalid.setter
	def isvalid(self):
		pass

	@property
	def location(self):
		pass
	@location.setter
	def location(self):
		pass

	@property
	def origBoltParts(self):
		pass
	@origBoltParts.setter
	def origBoltParts(self):
		pass

	@property
	def parts(self):
		pass
	@parts.setter
	def parts(self):
		pass

	@property
	def radius(self):
		pass
	@radius.setter
	def radius(self):
		pass

	def removeFeature(self,feature):
		"""
		Remove a feature from this hole
    
		"""
		pass

	@property
	def shape(self):
		pass
	@shape.setter
	def shape(self):
		pass

	@property
	def size(self):
		pass
	@size.setter
	def size(self):
		pass

	@property
	def type(self):
		pass
	@type.setter
	def type(self):
		pass

class Sketch:
	def __init__(self,system: str="Global Z", feature=None, origin=None, normal=None):
		"""
Inspire version of the core Sketch class. Redefines the initialization to
     use CFs and has method to convert to an Inspire Part.
  
"""
		pass

	def addArc3Points(self,start, end, third):
		"""
		Adds an arc by defining three points.

    Args:
      start (Point | tuple[float, float]): The start point of the arc.
      end (Point | tuple[float, float]): The end point of the arc.
      third (Point | tuple[float, float]): An another point of the arc.

    Returns:
      Circle: The new arc.
    
		"""
		pass

	def addArcCenter2Points(self,center, point1, point2, ccw=True):
		"""
		Adds an Arc defined by its center and its endpoints.

    Args:
      center (Point | tuple[float, float]): The center of the arc.
      point1 (Point | tuple[float, float]): The point of the circle.
      point2 (Point | tuple[float, float]): The point of the circle.
      ccw (bool): Determines whether to use counter clockwise direction from 
        point1 to point2 or not.

    Returns:
      Circle: The new arc.
    
		"""
		pass

	def addArcTangentTo(self,tangentTo, start, end, bInvertTangent=False):
		"""
		Adds an arc, starting tangent to a curve on a start point and ending on
       a defined point.

    Args:
      tangentTo (InterfaceItem): The item to be tangent to.
      start (Point | tuple[float, float]): The point where the arc starts.
      end (Point | tuple[float, float]): The end point of the arc.
      bInvertTangent (bool): Determines whether to construct the arc with 
        inverted tangent.

    Returns:
      Circle: The new arc.
    
		"""
		pass

	def addBoundedEllipse(self,center, majorAxisPoint, minorAxisPoint, start, end, bCounterClockWise=False):
		"""
		Adds an ellipse defined by center, two points that define an axis and 
    start and end points.

    Args:
      center (Point | tuple[float, float]): The center of the ellipse.
      majorAxisPoint(Line | tuple[float, float]): The start point defining the major axis.
      minorAxisPoint (Line | tuple[float, float]): The end point defining the major axis.
      start (Point | tuple[float, float]): The start point of the ellipse.
      end (Point | tuple[float, float]): The end point of the ellipse.
      bCounterClockWise (bool): Determines whether to use counter clockwise direction from 
        start to end or not.

    Returns:
      Ellipse: The new ellipse.
    
		"""
		pass

	def addCircle2Points(self,point1, point2):
		"""
		Adds a circle defined by the 2 endpoints of a diameter.

    Args:
      point1 (Point | tuple[float, float]): The endpoint of the diameter.
      point2 (Point | tuple[float, float]): The endpoint of the diameter.

    Returns:
      Circle: The new circle.
    
		"""
		pass

	def addCircle3Points(self,point1, point2, point3):
		"""
		Adds a circle defined by three points.

    Args:
      point1 (Point | tuple[float, float]): The point of the circle.
      point2 (Point | tuple[float, float]): The point of the circle.
      point3 (Point | tuple[float, float]): The point of the circle.

    Returns:
      Circle: The new circle.
    
		"""
		pass

	def addCircleCenterPoint(self,center, point):
		"""
		Adds a circle defined by its center and one point.

    Args:
      center (Point | tuple[float, float]): The center of the circle.
      point (Point | tuple[float, float]): The point of the circle.

    Returns:
      Circle: The new circle.
    
		"""
		pass

	def addCircleCenterRadius(self,center, radius):
		"""
		Adds a circle defined by its center and radius.

    Args:
      center (Point | tuple[float, float]): The center of the circle.
      radius (float): The radius of the circle.

    Returns:
      Circle: The new circle.
    
		"""
		pass

	def addConstraint(self,constraint, item1=None, item2=None, mirrorAxis=None):
		"""
		Adds a constraint for one or two items.

    Args:
      constraint (enum): The constraint.
      item1 (InterfaceItem): The item to hold the constraint.
      item2 (InterfaceItem): The item to hold the constraint.
      mirrorAxis (InterfaceItem): The item for a mirror constraints axis.

    Returns:
      Constraint: The new constraint.
    
		"""
		pass

	def addDimension(self,dimension, value=None, item1=None, item2=None, x=1.7976931348623157e+308, y=1.7976931348623157e+308, pickX=1.7976931348623157e+308, pickY=1.7976931348623157e+308):
		"""
		Defines constrain the dimensions of a sketch.

    Args:
      dimension (enum): The type of dimension.
      value: The value of the dimension.
      item1 (InterfaceItem): The item to hold the constraint.
      item2 (InterfaceItem): The item to hold the constraint.

    Returns:
      Dimension: The new dimension.
    
		"""
		pass

	def addEllipse(self,center, verticalAxis, majorRadius, minorRadius=None):
		"""
		Adds an ellipse defined by center, vertical axis and radius, or
       by center Point, and Line for major axis and Line for minor axis.

    Args:
      center (Point | tuple[float, float]): The center of the ellipse.
      verticalAxis (Line | tuple[float, float]): For a Line, the majorAxis,
        otherwise the vertical axis of the ellipse.
      majorRadius (Line | float):  For a Line, the minor axis, otherwie the
        major radius of the ellipse.
      minorRadius (float): The minor radius of the ellipse.

    Returns:
      Ellipse: The new ellipse.
    
		"""
		pass

	def addLine(self,point, direction):
		"""
		Adds a line with the specified direction, that goes through a point.

    Args:
      point (Point | tuple[float, float]): The point of the line.
      direction (tuple[float, float]): The direction of the line.

    Returns:
      Line: The new line.
    
		"""
		pass

	def addLineSegment(self,point1, point2):
		"""
		Adds a line segment defined by two endpoints.

    Args:
      point1 (Point | tuple[float, float]): The endpoint of the line.
      point2 (Point | tuple[float, float]): The endpoint of the line.

    Returns:
      Line: The new line segment.
    
		"""
		pass

	def addParallelogram(self,lowerLeft, lowerRight, upperRight):
		"""
		Adds a parallelogram defined 3 vertex.

    Args:
      lowerLeft (tuple[float, float]): The lower left point of of the parallelogram.
      lowerRight (tuple[float, float]): The lower right point of of the parallelogram.
      upperRight (tuple[float, float]): The lower right point of of the parallelogram.

    Returns:
      tuple[list[Points], list[Lines]]: The points and lines of the parallelogram.
    
		"""
		pass

	def addPoint(self,x, y):
		"""
		
    Adds a Point to the Sketch at defined position.

    Args:
      x (float): The x coordinate of the point.
      y (float): The y coordinate of the point.

    Returns:
      Point: The new Point.
    
		"""
		pass

	def addPolyline(self,points):
		"""
		Adds a Polyline of line segments that go through the specified points.

    Args:
      points (list[tuple[float, float]]: The points of the polyline.

    Returns:
      Polyline: The new created polyline.
    
		"""
		pass

	def addRectangle2Vertex(self,vertex1, vertex2):
		"""
		Adds a rectangle aligned with sketch axis defined by two vertex.

    Args:
      vertex1 (tuple[float, float]): A vertex of the rectangle.
      vertex2 (tuple[float, float]): A vertex of the rectangle.

    Returns:
      tuple[list[Points], list[Lines]]: The points and lines of the rectangle.
    
		"""
		pass

	def addRectangle3Vertex(self,lowerLeft, lowerRight, upperRight):
		"""
		Adds a rectangle defined by three vertex.

    Args:
      lowerLeft (tuple[float, float]): The lower left point of the rectangle.
      lowerRight (tuple[float, float]): The lower right point of the rectangle.
      upperRight (tuple[float, float]): The upper right point of the rectangle.

    Returns:
      tuple[list[Points], list[Lines]]: The points and lines of the rectangle.
    
		"""
		pass

	def addRectangleCenter2Points(self,center, lengthPoint, widthPoint):
		"""
		Adds a rectangle defined by center and two vertex.

    Args:
      center (tuple[float, float]): The center of the rectangle.
      lengthPoint (tuple[float, float]): A vertex of the rectangle.
      widthPoint (tuple[float, float]): A vertex of the rectangle.

    Returns:
      tuple[list[Points], list[Lines]]: The points and lines of the rectangle.
    
		"""
		pass

	def addRectangleCenterVertex(self,center, vertex):
		"""
		Adds a rectangle aligned with sketch axis defined by center and one vertex.

    Args:
      center (tuple[float, float]): The center of the rectangle.
      vertex (tuple[float, float]): A vertex of the rectangle.

    Returns:
      tuple[list[Points], list[Lines]]: The points and lines of the rectangle.
    
		"""
		pass

	def addRegularPolygon(self,center, point, numSides, beMidPoint=False):
		"""
		Adds a regular polygon defined by center, one vertex and the number of sides.

    Args:
      center (tuple[float, float]): The center of the regular polygon.
      point (tuple[float, float]): A vertex of the regular polygon.
      numSides (int): The number of sides.
      beMidPoint (bool): 

    Returns:
      tuple[list[Points], list[Lines]]: The points and lines of the rectangle.
    
		"""
		pass

	def addSpline(self,points, degree=3, periodic=False, interpolated=False):
		"""
		Adds a spline based on a list of points.

    Args:
      points (list[tuple[float, float]]| list[Point]): The points of the spline.
      degree (int): The degree.
      periodic (bool): Determines whether it is periodic.
      interpolated (bool): Determines whether it should get interpolated.

    Returns:
      Spline: The new spline.
    
		"""
		pass

	def circularPattern(self,entities, point, copy, angle, symmetry):
		"""
		Pattern sketch entities around a point.

    Args:
      entities (list[SketchItem]): Sketch curve entity to create linear pattern.
      point (Point): Center Point for circular sketch pattern.
      copy (int): Number of copies.
      angle (float):Distance between two copies in direction 1.
      symmetry (bool): Symmetry in Direction 1.

    Returns:
      CircularPattern: CircularPattern Object.
    
		"""
		pass

	def deleteItem(self,item):
		"""
		Removes an item from the sketch.

    Args:
      item (InterfaceItem): The item to be removed.

    Returns:
      bool: True if the item has been successfully removed, False otherwise.
    
		"""
		pass

	def enableHistory(self,state=True):
		"""
		Set the state of the abilty to store history
    
		"""
		pass

	def evaluate(self):
		"""
		Recalculates sketch items according to constraints.
    
		"""
		pass

	def extend(self,curvePoint, limitPoint):
		"""
		Extend or shorten an entity of a sketch curve.

    Args:
      curvePoint (tuple[float, float]): The point of the curve to extend.
      limitPoint (tuple[float, float]): The point of the limit curve.

    Return:
      bool: True on success, False otherwise.
    
		"""
		pass

	def fillet(self,vertices, radius="0"):
		"""
		Fillet a list of vertices with the specified radius.

    Args:
      vertices (list[Points],): The vertices to be filleted.
      radius (float): The fillet radius.

    Returns:
      bool: True on success, False otherwise.
    
		"""
		pass

	def findCircle(self,uid):
		"""
		Returns the Circle with the specified id.
    
		"""
		pass

	def findConstraint(self,uid):
		"""
		Returns the Constraint with the specified id.
    
		"""
		pass

	def findEllipse(self,uid):
		"""
		Returns the Ellipse with the specified id.
    
		"""
		pass

	def findItem(self,uid):
		"""
		Returns the InterfaceItem with the specified id.
    
		"""
		pass

	def findLine(self,uid):
		"""
		Returns the Line with the specified id.
    
		"""
		pass

	def findPoint(self,uid):
		"""
		Returns the Point with the specified id.
    
		"""
		pass

	def findSpline(self,uid):
		"""
		Returns the Spline with the specified id.
    
		"""
		pass

	def getDimensionVariableName(self,dimension):
		"""
		Gets the variable of a dimension.

    Args:
      dimension (Constraint): The dimension.

    Returns:
      str: The name of the variable.
    
		"""
		pass

	def getEndPoints(self,item):
		"""
		Returns the item endpoints as a PointVector.
    
		"""
		pass

	def getItemStatus(self,item):
		"""
		Returns the status of item according the ITEM_STATUS enum.
    
		"""
		pass

	def getPolylineCurvesCount(self,polyline):
		pass

	def hasCircle(self,uid):
		"""
		Returns True if sketch contains a Point with the specified id, False otherwise.
    
		"""
		pass

	def hasConstraint(self,uid):
		"""
		Returns True if sketch contains a Point with the specified id, False otherwise.
    
		"""
		pass

	def hasEllipse(self,uid):
		"""
		Returns True if sketch contains a Point with the specified id.
    
		"""
		pass

	def hasItem(self,uid):
		"""
		Returns True if sketch contains a Point with the specified id, False otherwise.
    
		"""
		pass

	def hasLine(self,uid):
		"""
		Returns True if sketch contains a Point with the specified id, False otherwise.
    
		"""
		pass

	def hasPoint(self,uid):
		"""
		Returns True if sketch contains a Point with the specified id, False otherwise.
    
		"""
		pass

	def hasSpline(self,uid):
		"""
		Returns True if sketch contains a Point with the specified id, False otherwise.
    
		"""
		pass

	def isAnyOverConstrained(self):
		"""
		Returns True if and items are over constrained, False otherwise.
    
		"""
		pass

	def isConstruction(self,item):
		"""
		Returns True if the item is a construction item, False otherwise.
    
		"""
		pass

	def isDimensionDriven(self,item):
		"""
		Returns True if the item is a dimension and is driven, False otherwise.
    
		"""
		pass

	def isFixed(self,item):
		"""
		Returns True if the item is fixed, False otherwise.
    
		"""
		pass

	def linearPattern(self,entities, direction1, copy1=3, distance1=0.1, symmetry1=False, direction2=None, copy2=3, distance2=0.1, symmetry2=False):
		"""
		Pattern sketch entities in a linear direction.

    Args:
      entities (list[SketchItem]): Sketch curve entity to create linear pattern.
      direction1 (Line): Direction 1 for sketch pattern.
      copy1 (int): Number of copies in direction 1.
      distance1 (float):Distance between two copies in direction 1.
      symmetry1 (bool): Symmetry in Direction 1.
      direction2 (Line): Direction 2 for sketch pattern.
      copy2 (int): Number of copies in direction 2.
      distance2 (float):Distance between two copies in direction 2.
      symmetry2 (bool): Symmetry in Direction 2.

    Returns:
      LinearPattern: LinearPattern Object.
    
		"""
		pass

	def mirror(self,curves, mirrorLine):
		"""
		Creates symmetric copies of selected sketch curves across a selected 
    centerline. 
    
    By default, there is a parent-child relationship between source curves and 
    their symmetric copies.

    Args:
      vertices (list[InterfaceItem]): The curves to be mirrored.
      mirrorLine (Line): The mirror line.

    Returns:
      bool: True if all items have been mirrored, False otherwise.
    
		"""
		pass

	def offset(self,point, distance):
		"""
		Creates a copy of a sketch curve at a specified distance from the source curve.

    Args:
      point (tuple[float, float]):
      distance (float)

    Returns:
      bool: True on success, False otherwise.
    
		"""
		pass

	def origin(self):
		"""
		Returns the Point for the origin.
    
		"""
		pass

	def parameterManager(self):
		"""
		Return the Parameter Manager for this sketch
    
		"""
		pass

	def polylineAddArcTo(self,polyline, arcTo, direction):
		"""
		Adds an arc from the polyline last point to the specified Point.

    Args:
      polyline (Polyline): The polyline that is being constructed.
      arcTo (tuple[float, float]): The position of the endpoint of the new arc.
      direction (enum): The initial direction of the arc.

    Returns:
      bool: True if the arc was successfully added to the polyline, False otherwise.
    
		"""
		pass

	def polylineAddLineTo(self,polyline, pointTo):
		"""
		Adds a line segment from the polyline last point to the specified Point.

    Args:
      polyline (Polyline): The polyline that is being constructed.
      pointTo (tuple[float, float]): The position of the endpoint of the new line.

    Returns:
      bool: True if the arc was successfully added to the polyline, False otherwise.
    
		"""
		pass

	def polylineEnd(self,polyline):
		"""
		Finishs the construction of the polyline.

    Args:
      polyline (Polyline): The polyline that is being constructed.

    Returns:
      tuple[list[Points], list[Lines]]: The points and lines of the polyline.
    
		"""
		pass

	def polylineStart(self,x, y):
		"""
		Starts the creation of a polyline on a specified Point.

    Args:
      x (float): The x coordinate of the first point.
      y (float): The y coordinate of the first point.

    Returns:
      Polyline: The new created polyline.
    
		"""
		pass

	def populate(self):
		"""
		Redraws the sketch if required.
    
		"""
		pass

	def realize(self):
		"""
		Return this sketch as an Inspire Part. This allows to do push/pull on it.
    
		"""
		pass

	def rotate(self,entities, center, angle, keepRelations=True):
		"""
		Rotate Sketch entities.

    Args:
      entities (list[SketchItem]): Sketch entity to rotate.
      center (Point): Center point to rotate sketch entity.
      angle (float): Rotation angle for sketch entity.
      keepRelations (bool): Keep relations between sketch entities after
        rotation.

    Returns:
      bool: True on success, False otherwise.
    
		"""
		pass

	def setConstruction(self,item, state=True):
		"""
		Set the items construction flag.
    
		"""
		pass

	def setDimensionIsDriven(self,item, state):
		"""
		Returns True if the item is a dimension and is driven, False otherwise.
    
		"""
		pass

	def setDimensionVariable(self,dimension, varName):
		"""
		Sets a variable as value for a dimension.

    Args:
      dimension (Constraint): The dimension.
      varName (str): The name of the variable.
    
		"""
		pass

	def setFixed(self,item, state=True):
		"""
		Set the items fixed state.
    
		"""
		pass

	def setParameterManager(self,pm):
		"""
		Set the Parameter Manager to use for this sketch
    
		"""
		pass

	def setWorkplane(self,matrix):
		"""
		Define the workplane from the passed matrix.
    
		"""
		pass

	def split(self,curvePoint, breakPoint):
		"""
		Split a curve in two at a defined break point.

    Args:
      curvePoint (tuple[float, float]): The point of the curve to be splitted.
      breakPoint (tuple[float, float]): The point of break.

    Return:
      bool: True on success, False otherwise.
    
		"""
		pass

	def translate(self,entities, direction, value, keepRelations=True):
		"""
		Translate Sketch entities.

    Args:
      entities (list[SketchItem]): Sketch entity to translate.
      direction (tuple[float, float]): Direction for sketch translation.
      value (float): Translate value for sketch entity.
      keepRelations (bool): Keep relations between sketch entities after
        translation.

    Returns:
      bool: True on success, False otherwise.
    
		"""
		pass

	def trim(self,x, y):
		"""
		Removes one or more geometric entities below the (x, y) coordinates of 
    the sketch curve.
    
    Args:
      x (float): The x coordinate.
      y (float): The y coordinate.

    Returns:
      bool: True if a geometric entity was trimmed, False otherwise.
    
		"""
		pass

	def update(self):
		"""
		Evaluates and populates the sketch.
    
		"""
		pass

class SketchPart:
	def __init__(self):
		"""
A sketch of a part on a plane. Can be push or pulled into a 3d part
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	@property
	def animationPosition(self):
		pass
	@animationPosition.setter
	def animationPosition(self):
		pass

	@property
	def autoCalculateCG(self):
		pass
	@autoCalculateCG.setter
	def autoCalculateCG(self):
		pass

	@property
	def autoCalculateMass(self):
		pass
	@autoCalculateMass.setter
	def autoCalculateMass(self):
		pass

	@property
	def autoCalculateMoment(self):
		pass
	@autoCalculateMoment.setter
	def autoCalculateMoment(self):
		pass

	@property
	def axisAlignedBoundingBox(self):
		pass
	@axisAlignedBoundingBox.setter
	def axisAlignedBoundingBox(self):
		pass

	@property
	def beadPatterns(self):
		pass
	@beadPatterns.setter
	def beadPatterns(self):
		pass

	@property
	def cg(self):
		pass
	@cg.setter
	def cg(self):
		pass

	@property
	def cogConstraints(self):
		pass
	@cogConstraints.setter
	def cogConstraints(self):
		pass

	@property
	def color(self):
		pass
	@color.setter
	def color(self):
		pass

	@property
	def concentratedMasses(self):
		pass
	@concentratedMasses.setter
	def concentratedMasses(self):
		pass

	@property
	def currentRepresentation(self):
		pass
	@currentRepresentation.setter
	def currentRepresentation(self):
		pass

	def destroy(self):
		"""
		Destroys occurrences from the model.
    
		"""
		pass

	@property
	def detectCollisions(self):
		pass
	@detectCollisions.setter
	def detectCollisions(self):
		pass

	@property
	def displacementConstraints(self):
		pass
	@displacementConstraints.setter
	def displacementConstraints(self):
		pass

	@property
	def drawDirections(self):
		pass
	@drawDirections.setter
	def drawDirections(self):
		pass

	@property
	def enforcedDisplacements(self):
		pass
	@enforcedDisplacements.setter
	def enforcedDisplacements(self):
		pass

	@property
	def features(self):
		pass
	@features.setter
	def features(self):
		pass

	def getAllChildren(self,type=None, **kwds):
		"""
		Returns a list of all children that matches the specified type.

    Args:
      type (list[Named]): Filter to use to get the children based on object type.
      **kwds : Additional keyword arguments to match other attributes of the object.

    Returns:
      list[Union[Part, Motor, BoundaryCondition, ...]]: The list of children that satisfy the supplied filters.
    
		"""
		pass

	def getAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value.

    Args:
      name (str): Attribute name to find its class.
    
		"""
		pass

	def getAttributes(self,type=None, **kwds):
		"""
		Return an dict of the attributes.
    Pass type and kwds to filter by type and Attribute properties

    Args:
      type (type): Filters the attribute based on type
      **kwds : Additional kwds argument to filter attribute by its properties

    Returns:
      dict: Return an OrderedDict of the attributes
    
		"""
		pass

	def getChild(self,name=None, recursive=False, **kwds):
		"""
		Returns the child of the object which matches the specified unique name.

    Args:
      name (str): The name of the child object.
      recursive (bool):  Search all descendents.
      **kwds : Additional keyword arguments to match attributes of the object.

    Returns:
      Named: The child object which satisfies the specified filters.
    
		"""
		pass

	def getChildren(self,type=None, recursive=False, sorted=False, **kwds):
		"""
		Returns a list of children that is of the specified type.

    Args:
      type (Type[Named]): Filter objects by class.
      recursive (bool): True to get all descendent Parts and Assemblies.
      sorted (bool): Sort the children base on id.

    Returns:
      list[Named]
    
		"""
		pass

	def getClass(self,className):
		"""
		Returns the class of the object.
    
    It can be simple or qualified (with namespace). If the name is simple, we 
    prepend the cls.namespace.

    Args:
      className (Union[Part, Occurrence, Named..]) : The class name. 
     
    Returns:
      Union[Part, Occurrence, Named..] : The class for the specified className. 

    
		"""
		pass

	def getClassAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value

    Args:
      name (str): Name of the attribute
    
		"""
		pass

	def getDependents(self,recursive=False, **kwds):
		"""
		Get objects that reference this object through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getFeature(self,name=None):
		"""
		Returns the feature based on its name.
		"""
		pass

	def getFeatures(self,type=None, rep="BestRep", **kwds):
		"""
		Returns a list of features based on specified filters.

    Args:
      type ((FeaturePoint, FeatureArea, FeatureCylindrical..etc)): Filters the 
        features based on type.
      rep (str): Feature representation. See part.representations for options
      **kwds : Additional attributes to consider while filtering.

    Returns:
      list [FeaturePoint, FeatureArea, FeatureCylindrical..etc)]: List of 
        features that satisfies all the filter criteria.
    
		"""
		pass

	def getGuiAttributeNames(self):
		"""
		Return list of the attribute names that are in the gui

    Returns:
      list: Returns list of active gui attribute
    
		"""
		pass

	def getGuiValue(self,attr, **kwds):
		"""
		Get value formatted to be shown in the gui

    Args:
      attr (str): Attribute name to gets its gui value.

    Returns:
      str: Returns a string of the value with its gui units, like "5 mm/s".
    
		"""
		pass

	def getReferences(self,recursive=False, **kwds):
		"""
		Get objects this object references through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getSerializedAttributeValues(self):
		pass

	def getValue(self,attr):
		"""
		Return the attribute value for passed attribute name.
    
    Args:
      attr (String): Attribute name to gets its value.

    Returns:
      str: Returns the attribute value
    
		"""
		pass

	@property
	def ground(self):
		pass
	@ground.setter
	def ground(self):
		pass

	@property
	def grounded(self):
		pass
	@grounded.setter
	def grounded(self):
		pass

	@property
	def ip(self):
		pass
	@ip.setter
	def ip(self):
		pass

	def isa(self,type=None, filter=None, name=None, wildcard=None, **kwds):
		"""
		Determines if the object matches the specified settings or not.
    
    Args:
      type (Union[Part, Assembly, Contact..]): The type of the object.
      filter (method): Return value of specified callback method.
      name (str): Name that matches exactly with object name.
      wildcard (str): A pattern to match exactly with the object name.
      **kwds : Additional keyword arguments to match other attributes.

    Returns:
      bool : True, if a match is found, otherwise False.
    
		"""
		pass

	@property
	def location(self):
		pass
	@location.setter
	def location(self):
		pass

	@property
	def mass(self):
		pass
	@mass.setter
	def mass(self):
		pass

	@property
	def material(self):
		pass
	@material.setter
	def material(self):
		pass

	def meshInfo(self):
		pass

	@property
	def minBoundingBox(self):
		pass
	@minBoundingBox.setter
	def minBoundingBox(self):
		pass

	def modelPositions(self):
		"""
		Forces all objects to return the original model positions instead of the
    current analysis positions.

    Useful when defining draw methods on GeneralObjects where behaviour is 
    different while animating.
    
		"""
		pass

	@property
	def modifiable(self):
		pass
	@modifiable.setter
	def modifiable(self):
		pass

	@property
	def morphable(self):
		pass
	@morphable.setter
	def morphable(self):
		pass

	@property
	def movable(self):
		pass
	@movable.setter
	def movable(self):
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	@property
	def parent(self):
		pass
	@parent.setter
	def parent(self):
		pass

	@property
	def position(self):
		pass
	@position.setter
	def position(self):
		pass

	@property
	def representations(self):
		pass
	@representations.setter
	def representations(self):
		pass

	@property
	def rotations(self):
		pass
	@rotations.setter
	def rotations(self):
		pass

	def save(self,file):
		"""
		Save the Part in the specified file.

    Args:
      file (str) : File name and path, where the file needs to be saved.
        Valid file extensions are:
          '.x_b', '.x_t', '.xmt_bin', '.xmt_txt', '.sat', '.sab', '.iges', '.igs',
          '.stl', '.step', '.stp', '.obj', '.vrml', '.vrl'.
    
		"""
		pass

	def setValue(self,attr, value):
		"""
		Alias for setattr (attr, value)
    Args:
      attr (str): Attribute name to sets its value.
      value (str): Attribute value to set .
    
		"""
		pass

	def setValues(self,**kwds):
		"""
		Sets passed name/value pairs.
    
    Values are set in a standard order (the order the attribute is defined
    on the class) which is required in certain cases when an attribute's
    setter expects another attribute to have already been set.
    For example, setting a reference before a location that is wrt it.
    
    Args:
      **kwds: Set attributes in one go.
    
		"""
		pass

	def simplifyHoles(self,entity, minSize="0", maxSize=None):
		"""
		Finds and removes holes and pockets, and find raised areas such as lettering.

  Args:
    entity (Part | Assembly | Feature): Part/Assembly from which you want to 
      remove the holes from or FeatureCircular which needs to be removed.
    minSize (float): Minimum size of hole.
    maxSize (float): Maximum size of hole.
  
		"""
		pass

	def simplifyImprints(self,entity):
		"""
		Finds and removes imprints from a part.

  An imprint is an edge or a point that appears on a surface that can be removed
  without changing the underlying integrity of the surface, such as scratches or
  trimmed points.

  Args:
    entity (Part | Assembly | FeatureLinear): Part/Assembly from which you want to
      remove the imprints from or FeatureLinear imprint to be removed.
  
		"""
		pass

	def simplifyPlugs(self,entity, minSize="0", maxSize=None):
		"""
		Finds holes and pockets, and plug them by filling the area with a new part

  Args:
    entity (Part | Assembly | Feature): Part/Assembly from which you want to plug 
      the holes or a Circular feature that needs to be plugged.
    minSize (float): Minimum size of plug.
    maxSize (float): Maximum size of plug.
  
		"""
		pass

	def simplifyRounds(self,entity, roundType="ALL", minSize="0", maxSize=None):
		"""
		Finds and removes both round (convex) and fillet (concave) surfaces.

  Args:
    entity (Part | Assembly | Feature): Part/Assembly from which you want to 
      remove the fillets, chamfers from or a Feature to be removed.
    roundType (str): Valid values are: ROUNDS, FILLETS, CHAMFERS and ALL.
    minSize (float): Minimum size of round.
    maxSize (float): Maximum size of round.
  
		"""
		pass

	@property
	def spiders(self):
		pass
	@spiders.setter
	def spiders(self):
		pass

	@property
	def symmetryConstraints(self):
		pass
	@symmetryConstraints.setter
	def symmetryConstraints(self):
		pass

	@property
	def temperatures(self):
		pass
	@temperatures.setter
	def temperatures(self):
		pass

	@property
	def transparency(self):
		pass
	@transparency.setter
	def transparency(self):
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

	@property
	def volume(self):
		pass
	@volume.setter
	def volume(self):
		pass

	def wasValueSet(self,attr):
		"""
		Check if attribute was set

    Args:
      attr (str): Attribute name to check it value set or not

    Returns:
      bool: True, if value was set else false.
    
		"""
		pass

class Smooth:
	def __init__(self,**kwds):
		"""
The Smooth tool is used to reduce the size of, or remove, unwanted small
  and/or sharp features in an implicit body. It is analogous to �blurring� in
  digital image processing. It operates by moving a window through the
  underlying field, performing filtering operations on the field values that
  fall within the window. Example smoothing filters include Mean, Median,
  Gaussian and Laplacian. Each of these have relative pros and cons, giving
  different smoothing effects.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class SmoothBatchModeCleanup:
	def __init__(self):
		pass

class Sphere:
	def __init__(self,**kwds):
		"""
Create a Spherical implicit body.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class Spider:
	def __init__(self,*features, **kwds):
		"""
Creates bonding connection between two or more parts by features separated 
  in space.
  
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	def addSecondaryFeature(self,feature):
		"""
		Adds secondary spider connection with supplied features.

    Args:
      feature (Feature) : Specify feature to add as secondary features.
    
		"""
		pass

	@property
	def connectionRadius(self):
		pass
	@connectionRadius.setter
	def connectionRadius(self):
		pass

	@property
	def connectionType(self):
		pass
	@connectionType.setter
	def connectionType(self):
		pass

	def destroy(self):
		"""
		Delete the object removing it from the model.
    
    The object may come back due to an undo/redo.
    
		"""
		pass

	@property
	def features(self):
		pass
	@features.setter
	def features(self):
		pass

	def getAllChildren(self,type=None, **kwds):
		"""
		Returns a list of all children that matches the specified type.

    Args:
      type (list[Named]): Filter to use to get the children based on object type.
      **kwds : Additional keyword arguments to match other attributes of the object.

    Returns:
      list[Union[Part, Motor, BoundaryCondition, ...]]: The list of children that satisfy the supplied filters.
    
		"""
		pass

	def getAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value.

    Args:
      name (str): Attribute name to find its class.
    
		"""
		pass

	def getAttributes(self,type=None, **kwds):
		"""
		Return an dict of the attributes.
    Pass type and kwds to filter by type and Attribute properties

    Args:
      type (type): Filters the attribute based on type
      **kwds : Additional kwds argument to filter attribute by its properties

    Returns:
      dict: Return an OrderedDict of the attributes
    
		"""
		pass

	def getChild(self,name=None, recursive=False, **kwds):
		"""
		Returns the child of the object which matches the specified unique name.

    Args:
      name (str): The name of the child object.
      recursive (bool):  Search all descendents.
      **kwds : Additional keyword arguments to match attributes of the object.

    Returns:
      Named: The child object which satisfies the specified filters.
    
		"""
		pass

	def getChildren(self,type=None, recursive=False, sorted=False, **kwds):
		"""
		Returns a list of children that is of the specified type.

    Args:
      type (Type[Named]): Filter objects by class.
      recursive (bool): True to get all descendent Parts and Assemblies.
      sorted (bool): Sort the children base on id.

    Returns:
      list[Named]
    
		"""
		pass

	def getClass(self,className):
		"""
		Returns the class of the object.
    
    It can be simple or qualified (with namespace). If the name is simple, we 
    prepend the cls.namespace.

    Args:
      className (Union[Part, Occurrence, Named..]) : The class name. 
     
    Returns:
      Union[Part, Occurrence, Named..] : The class for the specified className. 

    
		"""
		pass

	def getClassAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value

    Args:
      name (str): Name of the attribute
    
		"""
		pass

	def getDependents(self,recursive=False, **kwds):
		"""
		Get objects that reference this object through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getGuiAttributeNames(self):
		"""
		Return list of the attribute names that are in the gui

    Returns:
      list: Returns list of active gui attribute
    
		"""
		pass

	def getGuiValue(self,attr, **kwds):
		"""
		Get value formatted to be shown in the gui

    Args:
      attr (str): Attribute name to gets its gui value.

    Returns:
      str: Returns a string of the value with its gui units, like "5 mm/s".
    
		"""
		pass

	def getReferences(self,recursive=False, **kwds):
		"""
		Get objects this object references through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getSerializedAttributeValues(self):
		pass

	def getValue(self,attr):
		"""
		Return the attribute value for passed attribute name.
    
    Args:
      attr (String): Attribute name to gets its value.

    Returns:
      str: Returns the attribute value
    
		"""
		pass

	def isa(self,type=None, filter=None, name=None, wildcard=None, **kwds):
		"""
		Determines if the object matches the specified settings or not.
    
    Args:
      type (Union[Part, Assembly, Contact..]): The type of the object.
      filter (method): Return value of specified callback method.
      name (str): Name that matches exactly with object name.
      wildcard (str): A pattern to match exactly with the object name.
      **kwds : Additional keyword arguments to match other attributes.

    Returns:
      bool : True, if a match is found, otherwise False.
    
		"""
		pass

	@property
	def location(self):
		pass
	@location.setter
	def location(self):
		pass

	def modelPositions(self):
		"""
		Forces all objects to return the original model positions instead of the
    current analysis positions.

    Useful when defining draw methods on GeneralObjects where behaviour is 
    different while animating.
    
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	@property
	def parent(self):
		pass
	@parent.setter
	def parent(self):
		pass

	@property
	def parts(self):
		pass
	@parts.setter
	def parts(self):
		pass

	@property
	def primaryFeatures(self):
		pass
	@primaryFeatures.setter
	def primaryFeatures(self):
		pass

	def removeSecondaryFeature(self,feature):
		"""
		Removes secondary spider connection with supplied features.
    
    Args:
      feature (Feature) : Specify feature to remove from secondary features.
    
		"""
		pass

	@property
	def secondaryFeatures(self):
		pass
	@secondaryFeatures.setter
	def secondaryFeatures(self):
		pass

	def setValue(self,attr, value):
		"""
		Alias for setattr (attr, value)
    Args:
      attr (str): Attribute name to sets its value.
      value (str): Attribute value to set .
    
		"""
		pass

	def setValues(self,**kwds):
		"""
		Sets passed name/value pairs.
    
    Values are set in a standard order (the order the attribute is defined
    on the class) which is required in certain cases when an attribute's
    setter expects another attribute to have already been set.
    For example, setting a reference before a location that is wrt it.
    
    Args:
      **kwds: Set attributes in one go.
    
		"""
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

	def wasValueSet(self,attr):
		"""
		Check if attribute was set

    Args:
      attr (str): Attribute name to check it value set or not

    Returns:
      bool: True, if value was set else false.
    
		"""
		pass

class SpotWeld:
	def __init__(self,partsPoints, **kwds):
		"""
Spot welds two or more parts together.

  Spot welds connect parts together by welding them at specific locations.
  
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	@property
	def connectionRadius(self):
		pass
	@connectionRadius.setter
	def connectionRadius(self):
		pass

	def destroy(self):
		"""
		Delete the object removing it from the model.
    
    The object may come back due to an undo/redo.
    
		"""
		pass

	@property
	def diameter(self):
		pass
	@diameter.setter
	def diameter(self):
		pass

	def getAllChildren(self,type=None, **kwds):
		"""
		Returns a list of all children that matches the specified type.

    Args:
      type (list[Named]): Filter to use to get the children based on object type.
      **kwds : Additional keyword arguments to match other attributes of the object.

    Returns:
      list[Union[Part, Motor, BoundaryCondition, ...]]: The list of children that satisfy the supplied filters.
    
		"""
		pass

	def getAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value.

    Args:
      name (str): Attribute name to find its class.
    
		"""
		pass

	def getAttributes(self,type=None, **kwds):
		"""
		Return an dict of the attributes.
    Pass type and kwds to filter by type and Attribute properties

    Args:
      type (type): Filters the attribute based on type
      **kwds : Additional kwds argument to filter attribute by its properties

    Returns:
      dict: Return an OrderedDict of the attributes
    
		"""
		pass

	def getChild(self,name=None, recursive=False, **kwds):
		"""
		Returns the child of the object which matches the specified unique name.

    Args:
      name (str): The name of the child object.
      recursive (bool):  Search all descendents.
      **kwds : Additional keyword arguments to match attributes of the object.

    Returns:
      Named: The child object which satisfies the specified filters.
    
		"""
		pass

	def getChildren(self,type=None, recursive=False, sorted=False, **kwds):
		"""
		Returns a list of children that is of the specified type.

    Args:
      type (Type[Named]): Filter objects by class.
      recursive (bool): True to get all descendent Parts and Assemblies.
      sorted (bool): Sort the children base on id.

    Returns:
      list[Named]
    
		"""
		pass

	def getClass(self,className):
		"""
		Returns the class of the object.
    
    It can be simple or qualified (with namespace). If the name is simple, we 
    prepend the cls.namespace.

    Args:
      className (Union[Part, Occurrence, Named..]) : The class name. 
     
    Returns:
      Union[Part, Occurrence, Named..] : The class for the specified className. 

    
		"""
		pass

	def getClassAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value

    Args:
      name (str): Name of the attribute
    
		"""
		pass

	def getDependents(self,recursive=False, **kwds):
		"""
		Get objects that reference this object through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getGuiAttributeNames(self):
		"""
		Return list of the attribute names that are in the gui

    Returns:
      list: Returns list of active gui attribute
    
		"""
		pass

	def getGuiValue(self,attr, **kwds):
		"""
		Get value formatted to be shown in the gui

    Args:
      attr (str): Attribute name to gets its gui value.

    Returns:
      str: Returns a string of the value with its gui units, like "5 mm/s".
    
		"""
		pass

	def getReferences(self,recursive=False, **kwds):
		"""
		Get objects this object references through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getSerializedAttributeValues(self):
		pass

	def getValue(self,attr):
		"""
		Return the attribute value for passed attribute name.
    
    Args:
      attr (String): Attribute name to gets its value.

    Returns:
      str: Returns the attribute value
    
		"""
		pass

	def isa(self,type=None, filter=None, name=None, wildcard=None, **kwds):
		"""
		Determines if the object matches the specified settings or not.
    
    Args:
      type (Union[Part, Assembly, Contact..]): The type of the object.
      filter (method): Return value of specified callback method.
      name (str): Name that matches exactly with object name.
      wildcard (str): A pattern to match exactly with the object name.
      **kwds : Additional keyword arguments to match other attributes.

    Returns:
      bool : True, if a match is found, otherwise False.
    
		"""
		pass

	@property
	def location(self):
		pass
	@location.setter
	def location(self):
		pass

	@property
	def material(self):
		pass
	@material.setter
	def material(self):
		pass

	def modelPositions(self):
		"""
		Forces all objects to return the original model positions instead of the
    current analysis positions.

    Useful when defining draw methods on GeneralObjects where behaviour is 
    different while animating.
    
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	@property
	def parent(self):
		pass
	@parent.setter
	def parent(self):
		pass

	@property
	def parts(self):
		pass
	@parts.setter
	def parts(self):
		pass

	@property
	def points(self):
		pass
	@points.setter
	def points(self):
		pass

	def setValue(self,attr, value):
		"""
		Alias for setattr (attr, value)
    Args:
      attr (str): Attribute name to sets its value.
      value (str): Attribute value to set .
    
		"""
		pass

	def setValues(self,**kwds):
		"""
		Sets passed name/value pairs.
    
    Values are set in a standard order (the order the attribute is defined
    on the class) which is required in certain cases when an attribute's
    setter expects another attribute to have already been set.
    For example, setting a reference before a location that is wrt it.
    
    Args:
      **kwds: Set attributes in one go.
    
		"""
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

	def wasValueSet(self,attr):
		"""
		Check if attribute was set

    Args:
      attr (str): Attribute name to check it value set or not

    Returns:
      bool: True, if value was set else false.
    
		"""
		pass

	@property
	def weldGroup(self):
		pass
	@weldGroup.setter
	def weldGroup(self):
		pass

class Sqrt:
	def __init__(self,**kwds):
		"""
Implicit sqrt operation.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class Step:
	def __init__(self,**kwds):
		"""
Implicit step operation.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class StochasticStrutLattice:
	def __init__(self,**kwds):
		"""
Stochastic lattice is built by thickening a point-edge set, which is a
  graph of points that are connected by edges. If the points are randomly
  arranged and/or the edges between them are randomly created, this creates a
  stochastic (randomized) lattice structure.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class String:
	def __init__(self,default: str="", **kwds):
		"""
Store string value
"""
		pass

	def apply(self,**kwds):
		"""
		Context manager to specify Attribute constructor kwds
    Useful to avoid repeating kwds while defining a related group
    
		"""
		pass

	def castForGet(self,obj, value):
		"""
		Converts and returns the attribute value to its external type.

    Args:
      obj (GeneralObject): Object this attribute belongs to.
      value (Any): Value of the attribute to be converted.

    Returns:
      value (Any): Converted value.
    
		"""
		pass

	def castForSet(self,obj, value):
		"""
		Converts and validates the value of the attribute before setting.

      Converts the value it to its internal type (and base units if applicable).

    Args:
      obj (GeneralObject): Object this attribute belongs to.
      value (Any): Value of the attribute to set.

    Returns:
      value (Any): Validated and converted value.
    
		"""
		pass

	def classifyObject(self,obj):
		pass

	def create(self,obj):
		pass

	def createList(self,listAttr, obj):
		pass

	def createListList(self,listAttr, obj):
		pass

	def disable(self,obj):
		"""
		Called by GeneralObject when destroyed (or undo of a create)
		"""
		pass

	def enable(self,obj):
		"""
		Called by GeneralObject when created (or undo of a destroy)
		"""
		pass

	def getCreateArgs(self):
		"""
		Helper used in create methods
		"""
		pass

	def getDisplayName(self,obj):
		pass

	def getGuiValue(self,obj):
		"""
		Returns the formatted value, as shown in the Property Editor.
		"""
		pass

	def getInCoreValue(self,obj):
		pass

	def getReadonly(self,obj):
		pass

	def getUnits(self,obj):
		pass

	def getValue(self,obj):
		pass

	def getValueList(self,obj):
		pass

	def getValueListList(self,obj):
		pass

	def initialize(self,objCls, name):
		"""
		Initializes the attribute.

    Args:
      objCls (class): Object class this attribute belongs to.
      name (str): Name of the attribute.
    
		"""
		pass

	def loadValue(self,obj, value):
		"""
		Called by GeneralObject.loadAttributeValues during stmod deserialization
		"""
		pass

	def populateGuiValue(self,obj, prop):
		"""
		Override to customize, prop.value, displayValue, allowedValues.
    
    The prop.value type determines which editor widget used:
    - bool -> checkbox
    - str  -> line edit
    - hwtypes.Color -> color picker
    
    Setting prop.allowedValues yields a ComboBox.
    
    prop.displayValue is a str shown when the editor loses focus.
    
		"""
		pass

	def populatePropertyEditor(self,obj, prop, **kwds):
		"""
		Customize how attribute appears in Property Editor and ObjectTables.
    
    Args:
      obj (GeneralObject)
      prop (hwt::Property): Property Editor interface.
      component (int): 0, 1, 2
        Only passed when showing Triples 1 value at a time.
    
		"""
		pass

	def setInCoreValue(self,obj, value):
		pass

	def setValue(self,obj, value):
		pass

	def setValueList(self,obj, value):
		pass

	def setValueListList(self,obj, value):
		pass

	def usingUnits(self,units):
		pass

class StringImplicit:
	def __init__(self,cppName: str="",doc: str=""):
		"""
str
"""
		pass

class StrutLattice:
	def __init__(self,**kwds):
		"""
Strut lattices are constructed from nodes and these nodes are connected
  by beams. Typically, there is a base unit cell that is tiled/patterned in
  one, two, or three dimensions to form the overall lattices structure. A
  popular example is the Body Centred Cubic lattice.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class Subtract:
	def __init__(self,**kwds):
		"""
Implicit Subtract operation.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class SurfaceLattice:
	def __init__(self,**kwds):
		"""
Surface lattices are cellular structures constructed from one or
  sometimes two surfaces. Rather than tiling/patterning a base unit cell, the
  natural repetition of the surfaces creates a lattice-like structure
  automatically. Popular examples are Triply Periodic Minimal Surfaces (TPMS),
  such as the Gyroid.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class SymmetryConstraint:
	def __init__(self,part, symType, **kwds):
		"""
Symmetry and Cyclic Shape Controls.

  Symmetry and cyclic repetition are used to create optimized shapes with 
  repeating patterns and/or nearly symmetric results. Both are valid for 
  optimization but not analysis. There are two kinds of cyclic shapes: those with 
  symmetric sectors and those with asymmetric sectors. 

  You can only apply one type of symmetry constraint to a design space.

    - Choose SYMMETRIC to apply symmetry planes to a design space.
    - Choose CYCLIC_SYMMETRIC to apply cyclic symmetric repetition to a design space.
    - Choose CYCLIC to apply cyclic repetition to a design space.
    
  
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	@property
	def activePlanes(self):
		pass
	@activePlanes.setter
	def activePlanes(self):
		pass

	@property
	def color(self):
		pass
	@color.setter
	def color(self):
		pass

	@property
	def connectionRadius(self):
		pass
	@connectionRadius.setter
	def connectionRadius(self):
		pass

	@property
	def connectionType(self):
		pass
	@connectionType.setter
	def connectionType(self):
		pass

	def destroy(self):
		"""
		Delete the object removing it from the model.
    
    The object may come back due to an undo/redo.
    
		"""
		pass

	@property
	def direction(self):
		pass
	@direction.setter
	def direction(self):
		pass

	@property
	def distributed(self):
		pass
	@distributed.setter
	def distributed(self):
		pass

	@property
	def feature(self):
		pass
	@feature.setter
	def feature(self):
		pass

	@property
	def features(self):
		pass
	@features.setter
	def features(self):
		pass

	def getAllChildren(self,type=None, **kwds):
		"""
		Returns a list of all children that matches the specified type.

    Args:
      type (list[Named]): Filter to use to get the children based on object type.
      **kwds : Additional keyword arguments to match other attributes of the object.

    Returns:
      list[Union[Part, Motor, BoundaryCondition, ...]]: The list of children that satisfy the supplied filters.
    
		"""
		pass

	def getAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value.

    Args:
      name (str): Attribute name to find its class.
    
		"""
		pass

	def getAttributes(self,type=None, **kwds):
		"""
		Return an dict of the attributes.
    Pass type and kwds to filter by type and Attribute properties

    Args:
      type (type): Filters the attribute based on type
      **kwds : Additional kwds argument to filter attribute by its properties

    Returns:
      dict: Return an OrderedDict of the attributes
    
		"""
		pass

	def getChild(self,name=None, recursive=False, **kwds):
		"""
		Returns the child of the object which matches the specified unique name.

    Args:
      name (str): The name of the child object.
      recursive (bool):  Search all descendents.
      **kwds : Additional keyword arguments to match attributes of the object.

    Returns:
      Named: The child object which satisfies the specified filters.
    
		"""
		pass

	def getChildren(self,type=None, recursive=False, sorted=False, **kwds):
		"""
		Returns a list of children that is of the specified type.

    Args:
      type (Type[Named]): Filter objects by class.
      recursive (bool): True to get all descendent Parts and Assemblies.
      sorted (bool): Sort the children base on id.

    Returns:
      list[Named]
    
		"""
		pass

	def getClass(self,className):
		"""
		Returns the class of the object.
    
    It can be simple or qualified (with namespace). If the name is simple, we 
    prepend the cls.namespace.

    Args:
      className (Union[Part, Occurrence, Named..]) : The class name. 
     
    Returns:
      Union[Part, Occurrence, Named..] : The class for the specified className. 

    
		"""
		pass

	def getClassAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value

    Args:
      name (str): Name of the attribute
    
		"""
		pass

	def getDependents(self,recursive=False, **kwds):
		"""
		Get objects that reference this object through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getGuiAttributeNames(self):
		"""
		Return list of the attribute names that are in the gui

    Returns:
      list: Returns list of active gui attribute
    
		"""
		pass

	def getGuiValue(self,attr, **kwds):
		"""
		Get value formatted to be shown in the gui

    Args:
      attr (str): Attribute name to gets its gui value.

    Returns:
      str: Returns a string of the value with its gui units, like "5 mm/s".
    
		"""
		pass

	def getReferences(self,recursive=False, **kwds):
		"""
		Get objects this object references through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getSerializedAttributeValues(self):
		pass

	def getValue(self,attr):
		"""
		Return the attribute value for passed attribute name.
    
    Args:
      attr (String): Attribute name to gets its value.

    Returns:
      str: Returns the attribute value
    
		"""
		pass

	def importLoads(self,csvFile):
		"""
		Imports boundary conditions to the active model from a csv file.

    Args:
      csvFile(str) : Csv file name containing all the BC information.

    Returns:
      list: List of error msgs that happened during import of all the boundary conditions.
    
		"""
		pass

	@property
	def inahole(self):
		pass
	@inahole.setter
	def inahole(self):
		pass

	def isa(self,type=None, filter=None, name=None, wildcard=None, **kwds):
		"""
		Determines if the object matches the specified settings or not.
    
    Args:
      type (Union[Part, Assembly, Contact..]): The type of the object.
      filter (method): Return value of specified callback method.
      name (str): Name that matches exactly with object name.
      wildcard (str): A pattern to match exactly with the object name.
      **kwds : Additional keyword arguments to match other attributes.

    Returns:
      bool : True, if a match is found, otherwise False.
    
		"""
		pass

	@property
	def loadCase(self):
		pass
	@loadCase.setter
	def loadCase(self):
		pass

	@property
	def localToPart(self):
		pass
	@localToPart.setter
	def localToPart(self):
		pass

	@property
	def location(self):
		pass
	@location.setter
	def location(self):
		pass

	@property
	def mode(self):
		pass
	@mode.setter
	def mode(self):
		pass

	def modelPositions(self):
		"""
		Forces all objects to return the original model positions instead of the
    current analysis positions.

    Useful when defining draw methods on GeneralObjects where behaviour is 
    different while animating.
    
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	@property
	def parent(self):
		pass
	@parent.setter
	def parent(self):
		pass

	@property
	def part(self):
		pass
	@part.setter
	def part(self):
		pass

	@property
	def parts(self):
		pass
	@parts.setter
	def parts(self):
		pass

	@property
	def sectors(self):
		pass
	@sectors.setter
	def sectors(self):
		pass

	def setSystem(self,system):
		"""
		Associate system to a boundary condition.

    Args:
      system (System): System tp associate with boundary condition.
    
		"""
		pass

	def setValue(self,attr, value):
		"""
		Alias for setattr (attr, value)
    Args:
      attr (str): Attribute name to sets its value.
      value (str): Attribute value to set .
    
		"""
		pass

	def setValues(self,**kwds):
		"""
		Sets passed name/value pairs.
    
    Values are set in a standard order (the order the attribute is defined
    on the class) which is required in certain cases when an attribute's
    setter expects another attribute to have already been set.
    For example, setting a reference before a location that is wrt it.
    
    Args:
      **kwds: Set attributes in one go.
    
		"""
		pass

	@property
	def type(self):
		pass
	@type.setter
	def type(self):
		pass

	def updatePosition(self,m44):
		"""
		Sets the design space positions of all the inspire parts to their 
    position in the current analysis frame.    
    
		"""
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

	def wasValueSet(self,attr):
		"""
		Check if attribute was set

    Args:
      attr (str): Attribute name to check it value set or not

    Returns:
      bool: True, if value was set else false.
    
		"""
		pass

class Synthesis:
	def __init__(self):
		"""
Information about an optimization
  
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	def destroy(self):
		"""
		Delete the object removing it from the model.
    
    The object may come back due to an undo/redo.
    
		"""
		pass

	def getAllChildren(self,type=None, **kwds):
		"""
		Returns a list of all children that matches the specified type.

    Args:
      type (list[Named]): Filter to use to get the children based on object type.
      **kwds : Additional keyword arguments to match other attributes of the object.

    Returns:
      list[Union[Part, Motor, BoundaryCondition, ...]]: The list of children that satisfy the supplied filters.
    
		"""
		pass

	def getAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value.

    Args:
      name (str): Attribute name to find its class.
    
		"""
		pass

	def getAttributes(self,type=None, **kwds):
		"""
		Return an dict of the attributes.
    Pass type and kwds to filter by type and Attribute properties

    Args:
      type (type): Filters the attribute based on type
      **kwds : Additional kwds argument to filter attribute by its properties

    Returns:
      dict: Return an OrderedDict of the attributes
    
		"""
		pass

	def getChild(self,name=None, recursive=False, **kwds):
		"""
		Returns the child of the object which matches the specified unique name.

    Args:
      name (str): The name of the child object.
      recursive (bool):  Search all descendents.
      **kwds : Additional keyword arguments to match attributes of the object.

    Returns:
      Named: The child object which satisfies the specified filters.
    
		"""
		pass

	def getChildren(self,type=None, recursive=False, sorted=False, **kwds):
		"""
		Returns a list of children that is of the specified type.

    Args:
      type (Type[Named]): Filter objects by class.
      recursive (bool): True to get all descendent Parts and Assemblies.
      sorted (bool): Sort the children base on id.

    Returns:
      list[Named]
    
		"""
		pass

	def getClass(self,className):
		"""
		Returns the class of the object.
    
    It can be simple or qualified (with namespace). If the name is simple, we 
    prepend the cls.namespace.

    Args:
      className (Union[Part, Occurrence, Named..]) : The class name. 
     
    Returns:
      Union[Part, Occurrence, Named..] : The class for the specified className. 

    
		"""
		pass

	def getClassAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value

    Args:
      name (str): Name of the attribute
    
		"""
		pass

	def getDependents(self,recursive=False, **kwds):
		"""
		Get objects that reference this object through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getGuiAttributeNames(self):
		"""
		Return list of the attribute names that are in the gui

    Returns:
      list: Returns list of active gui attribute
    
		"""
		pass

	def getGuiValue(self,attr, **kwds):
		"""
		Get value formatted to be shown in the gui

    Args:
      attr (str): Attribute name to gets its gui value.

    Returns:
      str: Returns a string of the value with its gui units, like "5 mm/s".
    
		"""
		pass

	def getReferences(self,recursive=False, **kwds):
		"""
		Get objects this object references through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getSerializedAttributeValues(self):
		pass

	def getValue(self,attr):
		"""
		Return the attribute value for passed attribute name.
    
    Args:
      attr (String): Attribute name to gets its value.

    Returns:
      str: Returns the attribute value
    
		"""
		pass

	@property
	def imported(self):
		pass
	@imported.setter
	def imported(self):
		pass

	def isa(self,type=None, filter=None, name=None, wildcard=None, **kwds):
		"""
		Determines if the object matches the specified settings or not.
    
    Args:
      type (Union[Part, Assembly, Contact..]): The type of the object.
      filter (method): Return value of specified callback method.
      name (str): Name that matches exactly with object name.
      wildcard (str): A pattern to match exactly with the object name.
      **kwds : Additional keyword arguments to match other attributes.

    Returns:
      bool : True, if a match is found, otherwise False.
    
		"""
		pass

	def modelPositions(self):
		"""
		Forces all objects to return the original model positions instead of the
    current analysis positions.

    Useful when defining draw methods on GeneralObjects where behaviour is 
    different while animating.
    
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	@property
	def parent(self):
		pass
	@parent.setter
	def parent(self):
		pass

	@property
	def progress(self):
		pass
	@progress.setter
	def progress(self):
		pass

	def setValue(self,attr, value):
		"""
		Alias for setattr (attr, value)
    Args:
      attr (str): Attribute name to sets its value.
      value (str): Attribute value to set .
    
		"""
		pass

	def setValues(self,**kwds):
		"""
		Sets passed name/value pairs.
    
    Values are set in a standard order (the order the attribute is defined
    on the class) which is required in certain cases when an attribute's
    setter expects another attribute to have already been set.
    For example, setting a reference before a location that is wrt it.
    
    Args:
      **kwds: Set attributes in one go.
    
		"""
		pass

	@property
	def solverType(self):
		pass
	@solverType.setter
	def solverType(self):
		pass

	@property
	def status(self):
		pass
	@status.setter
	def status(self):
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

	def wasValueSet(self,attr):
		"""
		Check if attribute was set

    Args:
      attr (str): Attribute name to check it value set or not

    Returns:
      bool: True, if value was set else false.
    
		"""
		pass

	@property
	def workingDir(self):
		pass
	@workingDir.setter
	def workingDir(self):
		pass

class System:
	def __init__(self,**kwds):
		"""
System defines an orthonormal, right-handed coordinate system.

  A part can be associated to the system.
  
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	def destroy(self):
		"""
		Delete the object removing it from the model.
    
    The object may come back due to an undo/redo.
    
		"""
		pass

	def getAllChildren(self,type=None, **kwds):
		"""
		Returns a list of all children that matches the specified type.

    Args:
      type (list[Named]): Filter to use to get the children based on object type.
      **kwds : Additional keyword arguments to match other attributes of the object.

    Returns:
      list[Union[Part, Motor, BoundaryCondition, ...]]: The list of children that satisfy the supplied filters.
    
		"""
		pass

	def getAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value.

    Args:
      name (str): Attribute name to find its class.
    
		"""
		pass

	def getAttributes(self,type=None, **kwds):
		"""
		Return an dict of the attributes.
    Pass type and kwds to filter by type and Attribute properties

    Args:
      type (type): Filters the attribute based on type
      **kwds : Additional kwds argument to filter attribute by its properties

    Returns:
      dict: Return an OrderedDict of the attributes
    
		"""
		pass

	def getChild(self,name=None, recursive=False, **kwds):
		"""
		Returns the child of the object which matches the specified unique name.

    Args:
      name (str): The name of the child object.
      recursive (bool):  Search all descendents.
      **kwds : Additional keyword arguments to match attributes of the object.

    Returns:
      Named: The child object which satisfies the specified filters.
    
		"""
		pass

	def getChildren(self,type=None, recursive=False, sorted=False, **kwds):
		"""
		Returns a list of children that is of the specified type.

    Args:
      type (Type[Named]): Filter objects by class.
      recursive (bool): True to get all descendent Parts and Assemblies.
      sorted (bool): Sort the children base on id.

    Returns:
      list[Named]
    
		"""
		pass

	def getClass(self,className):
		"""
		Returns the class of the object.
    
    It can be simple or qualified (with namespace). If the name is simple, we 
    prepend the cls.namespace.

    Args:
      className (Union[Part, Occurrence, Named..]) : The class name. 
     
    Returns:
      Union[Part, Occurrence, Named..] : The class for the specified className. 

    
		"""
		pass

	def getClassAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value

    Args:
      name (str): Name of the attribute
    
		"""
		pass

	def getDependents(self,recursive=False, **kwds):
		"""
		Get objects that reference this object through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getGuiAttributeNames(self):
		"""
		Return list of the attribute names that are in the gui

    Returns:
      list: Returns list of active gui attribute
    
		"""
		pass

	def getGuiValue(self,attr, **kwds):
		"""
		Get value formatted to be shown in the gui

    Args:
      attr (str): Attribute name to gets its gui value.

    Returns:
      str: Returns a string of the value with its gui units, like "5 mm/s".
    
		"""
		pass

	def getReferences(self,recursive=False, **kwds):
		"""
		Get objects this object references through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getSerializedAttributeValues(self):
		pass

	def getValue(self,attr):
		"""
		Return the attribute value for passed attribute name.
    
    Args:
      attr (String): Attribute name to gets its value.

    Returns:
      str: Returns the attribute value
    
		"""
		pass

	def isa(self,type=None, filter=None, name=None, wildcard=None, **kwds):
		"""
		Determines if the object matches the specified settings or not.
    
    Args:
      type (Union[Part, Assembly, Contact..]): The type of the object.
      filter (method): Return value of specified callback method.
      name (str): Name that matches exactly with object name.
      wildcard (str): A pattern to match exactly with the object name.
      **kwds : Additional keyword arguments to match other attributes.

    Returns:
      bool : True, if a match is found, otherwise False.
    
		"""
		pass

	@property
	def location(self):
		pass
	@location.setter
	def location(self):
		pass

	def modelPositions(self):
		"""
		Forces all objects to return the original model positions instead of the
    current analysis positions.

    Useful when defining draw methods on GeneralObjects where behaviour is 
    different while animating.
    
		"""
		pass

	@property
	def moveWithPart(self):
		pass
	@moveWithPart.setter
	def moveWithPart(self):
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	@property
	def origin(self):
		pass
	@origin.setter
	def origin(self):
		pass

	@property
	def parent(self):
		pass
	@parent.setter
	def parent(self):
		pass

	@property
	def part(self):
		pass
	@part.setter
	def part(self):
		pass

	@property
	def position(self):
		pass
	@position.setter
	def position(self):
		pass

	def roatate(self,angle, axis="X"):
		"""
		Rotate system along given axis at given angle.

    Args:
      angle (float): Angle at which system is rotated.
      axis (str): Axis of rotation.
        - X
        - Y
        - Z
    
		"""
		pass

	def setValue(self,attr, value):
		"""
		Alias for setattr (attr, value)
    Args:
      attr (str): Attribute name to sets its value.
      value (str): Attribute value to set .
    
		"""
		pass

	def setValues(self,**kwds):
		"""
		Sets passed name/value pairs.
    
    Values are set in a standard order (the order the attribute is defined
    on the class) which is required in certain cases when an attribute's
    setter expects another attribute to have already been set.
    For example, setting a reference before a location that is wrt it.
    
    Args:
      **kwds: Set attributes in one go.
    
		"""
		pass

	@property
	def type(self):
		pass
	@type.setter
	def type(self):
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

	def wasValueSet(self,attr):
		"""
		Check if attribute was set

    Args:
      attr (str): Attribute name to check it value set or not

    Returns:
      bool: True, if value was set else false.
    
		"""
		pass

class Tan:
	def __init__(self,**kwds):
		"""
Implicit Trigonometry Tan operation.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class TargetsImplicit:
	def __init__(self,cppName: str="",doc: str=""):
		"""
list[ImplicitBody]
"""
		pass

class Temperature:
	def __init__(self,ents, initTemp, finalTemp, location, **kwds):
		"""
Creates temperature load on supplied parts.

  Use the temperature load to simulate the effects of temperature changes on your model.
  
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	@property
	def color(self):
		pass
	@color.setter
	def color(self):
		pass

	@property
	def connectionRadius(self):
		pass
	@connectionRadius.setter
	def connectionRadius(self):
		pass

	@property
	def connectionType(self):
		pass
	@connectionType.setter
	def connectionType(self):
		pass

	def destroy(self):
		"""
		Delete the object removing it from the model.
    
    The object may come back due to an undo/redo.
    
		"""
		pass

	@property
	def direction(self):
		pass
	@direction.setter
	def direction(self):
		pass

	@property
	def distributed(self):
		pass
	@distributed.setter
	def distributed(self):
		pass

	@property
	def feature(self):
		pass
	@feature.setter
	def feature(self):
		pass

	@property
	def features(self):
		pass
	@features.setter
	def features(self):
		pass

	def getAllChildren(self,type=None, **kwds):
		"""
		Returns a list of all children that matches the specified type.

    Args:
      type (list[Named]): Filter to use to get the children based on object type.
      **kwds : Additional keyword arguments to match other attributes of the object.

    Returns:
      list[Union[Part, Motor, BoundaryCondition, ...]]: The list of children that satisfy the supplied filters.
    
		"""
		pass

	def getAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value.

    Args:
      name (str): Attribute name to find its class.
    
		"""
		pass

	def getAttributes(self,type=None, **kwds):
		"""
		Return an dict of the attributes.
    Pass type and kwds to filter by type and Attribute properties

    Args:
      type (type): Filters the attribute based on type
      **kwds : Additional kwds argument to filter attribute by its properties

    Returns:
      dict: Return an OrderedDict of the attributes
    
		"""
		pass

	def getChild(self,name=None, recursive=False, **kwds):
		"""
		Returns the child of the object which matches the specified unique name.

    Args:
      name (str): The name of the child object.
      recursive (bool):  Search all descendents.
      **kwds : Additional keyword arguments to match attributes of the object.

    Returns:
      Named: The child object which satisfies the specified filters.
    
		"""
		pass

	def getChildren(self,type=None, recursive=False, sorted=False, **kwds):
		"""
		Returns a list of children that is of the specified type.

    Args:
      type (Type[Named]): Filter objects by class.
      recursive (bool): True to get all descendent Parts and Assemblies.
      sorted (bool): Sort the children base on id.

    Returns:
      list[Named]
    
		"""
		pass

	def getClass(self,className):
		"""
		Returns the class of the object.
    
    It can be simple or qualified (with namespace). If the name is simple, we 
    prepend the cls.namespace.

    Args:
      className (Union[Part, Occurrence, Named..]) : The class name. 
     
    Returns:
      Union[Part, Occurrence, Named..] : The class for the specified className. 

    
		"""
		pass

	def getClassAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value

    Args:
      name (str): Name of the attribute
    
		"""
		pass

	def getDependents(self,recursive=False, **kwds):
		"""
		Get objects that reference this object through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getGuiAttributeNames(self):
		"""
		Return list of the attribute names that are in the gui

    Returns:
      list: Returns list of active gui attribute
    
		"""
		pass

	def getGuiValue(self,attr, **kwds):
		"""
		Get value formatted to be shown in the gui

    Args:
      attr (str): Attribute name to gets its gui value.

    Returns:
      str: Returns a string of the value with its gui units, like "5 mm/s".
    
		"""
		pass

	def getReferences(self,recursive=False, **kwds):
		"""
		Get objects this object references through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getSerializedAttributeValues(self):
		pass

	def getValue(self,attr):
		"""
		Return the attribute value for passed attribute name.
    
    Args:
      attr (String): Attribute name to gets its value.

    Returns:
      str: Returns the attribute value
    
		"""
		pass

	def importLoads(self,csvFile):
		"""
		Imports boundary conditions to the active model from a csv file.

    Args:
      csvFile(str) : Csv file name containing all the BC information.

    Returns:
      list: List of error msgs that happened during import of all the boundary conditions.
    
		"""
		pass

	@property
	def inahole(self):
		pass
	@inahole.setter
	def inahole(self):
		pass

	def isa(self,type=None, filter=None, name=None, wildcard=None, **kwds):
		"""
		Determines if the object matches the specified settings or not.
    
    Args:
      type (Union[Part, Assembly, Contact..]): The type of the object.
      filter (method): Return value of specified callback method.
      name (str): Name that matches exactly with object name.
      wildcard (str): A pattern to match exactly with the object name.
      **kwds : Additional keyword arguments to match other attributes.

    Returns:
      bool : True, if a match is found, otherwise False.
    
		"""
		pass

	@property
	def loadCase(self):
		pass
	@loadCase.setter
	def loadCase(self):
		pass

	@property
	def localToPart(self):
		pass
	@localToPart.setter
	def localToPart(self):
		pass

	@property
	def location(self):
		pass
	@location.setter
	def location(self):
		pass

	@property
	def mode(self):
		pass
	@mode.setter
	def mode(self):
		pass

	def modelPositions(self):
		"""
		Forces all objects to return the original model positions instead of the
    current analysis positions.

    Useful when defining draw methods on GeneralObjects where behaviour is 
    different while animating.
    
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	@property
	def parent(self):
		pass
	@parent.setter
	def parent(self):
		pass

	@property
	def part(self):
		pass
	@part.setter
	def part(self):
		pass

	@property
	def parts(self):
		pass
	@parts.setter
	def parts(self):
		pass

	def setSystem(self,system):
		"""
		Associate system to a boundary condition.

    Args:
      system (System): System tp associate with boundary condition.
    
		"""
		pass

	def setValue(self,attr, value):
		"""
		Alias for setattr (attr, value)
    Args:
      attr (str): Attribute name to sets its value.
      value (str): Attribute value to set .
    
		"""
		pass

	def setValues(self,**kwds):
		"""
		Sets passed name/value pairs.
    
    Values are set in a standard order (the order the attribute is defined
    on the class) which is required in certain cases when an attribute's
    setter expects another attribute to have already been set.
    For example, setting a reference before a location that is wrt it.
    
    Args:
      **kwds: Set attributes in one go.
    
		"""
		pass

	def updatePosition(self,m44):
		"""
		Sets the design space positions of all the inspire parts to their 
    position in the current analysis frame.    
    
		"""
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

	def wasValueSet(self,attr):
		"""
		Check if attribute was set

    Args:
      attr (str): Attribute name to check it value set or not

    Returns:
      bool: True, if value was set else false.
    
		"""
		pass

class ToolsImplicit:
	def __init__(self,cppName: str="",doc: str=""):
		"""
list[ImplicitBody]
"""
		pass

class TopographyAndGaugeOptimization:
	def __init__(self,params="{}", runOptions="{}", ignoreWarnings=False):
		"""
Concurrently run a topography and gauge optimization.
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	def destroy(self):
		"""
		Delete the object removing it from the model.
    
    The object may come back due to an undo/redo.
    
		"""
		pass

	def export(self,file, params="{}", runOptions="{}", ignoreWarnings=False):
		"""
		Download solver file (.fem, .ssp) for run
    
    Args:
      file (str): File path to save to
      
      See constructor for params, runOptions, ignoreWarnings
    
		"""
		pass

	def getAllChildren(self,type=None, **kwds):
		"""
		Returns a list of all children that matches the specified type.

    Args:
      type (list[Named]): Filter to use to get the children based on object type.
      **kwds : Additional keyword arguments to match other attributes of the object.

    Returns:
      list[Union[Part, Motor, BoundaryCondition, ...]]: The list of children that satisfy the supplied filters.
    
		"""
		pass

	def getAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value.

    Args:
      name (str): Attribute name to find its class.
    
		"""
		pass

	def getAttributes(self,type=None, **kwds):
		"""
		Return an dict of the attributes.
    Pass type and kwds to filter by type and Attribute properties

    Args:
      type (type): Filters the attribute based on type
      **kwds : Additional kwds argument to filter attribute by its properties

    Returns:
      dict: Return an OrderedDict of the attributes
    
		"""
		pass

	def getChild(self,name=None, recursive=False, **kwds):
		"""
		Returns the child of the object which matches the specified unique name.

    Args:
      name (str): The name of the child object.
      recursive (bool):  Search all descendents.
      **kwds : Additional keyword arguments to match attributes of the object.

    Returns:
      Named: The child object which satisfies the specified filters.
    
		"""
		pass

	def getChildren(self,type=None, recursive=False, sorted=False, **kwds):
		"""
		Returns a list of children that is of the specified type.

    Args:
      type (Type[Named]): Filter objects by class.
      recursive (bool): True to get all descendent Parts and Assemblies.
      sorted (bool): Sort the children base on id.

    Returns:
      list[Named]
    
		"""
		pass

	def getClass(self,className):
		"""
		Returns the class of the object.
    
    It can be simple or qualified (with namespace). If the name is simple, we 
    prepend the cls.namespace.

    Args:
      className (Union[Part, Occurrence, Named..]) : The class name. 
     
    Returns:
      Union[Part, Occurrence, Named..] : The class for the specified className. 

    
		"""
		pass

	def getClassAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value

    Args:
      name (str): Name of the attribute
    
		"""
		pass

	def getDependents(self,recursive=False, **kwds):
		"""
		Get objects that reference this object through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getGuiAttributeNames(self):
		"""
		Return list of the attribute names that are in the gui

    Returns:
      list: Returns list of active gui attribute
    
		"""
		pass

	def getGuiValue(self,attr, **kwds):
		"""
		Get value formatted to be shown in the gui

    Args:
      attr (str): Attribute name to gets its gui value.

    Returns:
      str: Returns a string of the value with its gui units, like "5 mm/s".
    
		"""
		pass

	def getReferences(self,recursive=False, **kwds):
		"""
		Get objects this object references through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getSerializedAttributeValues(self):
		pass

	def getValue(self,attr):
		"""
		Return the attribute value for passed attribute name.
    
    Args:
      attr (String): Attribute name to gets its value.

    Returns:
      str: Returns the attribute value
    
		"""
		pass

	def importResults(self,showExplorer=True):
		"""
		Make results available in the Shape Explorer.
    
    Args:
      showExplorer (bool): Opens the Shape Explorer dialog (gui mode only)
    
		"""
		pass

	@property
	def imported(self):
		pass
	@imported.setter
	def imported(self):
		pass

	def isa(self,type=None, filter=None, name=None, wildcard=None, **kwds):
		"""
		Determines if the object matches the specified settings or not.
    
    Args:
      type (Union[Part, Assembly, Contact..]): The type of the object.
      filter (method): Return value of specified callback method.
      name (str): Name that matches exactly with object name.
      wildcard (str): A pattern to match exactly with the object name.
      **kwds : Additional keyword arguments to match other attributes.

    Returns:
      bool : True, if a match is found, otherwise False.
    
		"""
		pass

	def modelPositions(self):
		"""
		Forces all objects to return the original model positions instead of the
    current analysis positions.

    Useful when defining draw methods on GeneralObjects where behaviour is 
    different while animating.
    
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	@property
	def parent(self):
		pass
	@parent.setter
	def parent(self):
		pass

	@property
	def progress(self):
		pass
	@progress.setter
	def progress(self):
		pass

	def reanalyze(self,density, runOptions="{}", ignoreWarnings=False):
		"""
		Run an OptiStructAnalysis on the generated shape.
    
    Args:
      density (float): Density threshold value.
        1.0 - maximum density on design space.
        0.0 - minimum density on design space.
      runOptions (dict): See cls.RunOptions
      ignoreWarnings (bool): Abort on warnings
      
    Returns:
      OptiStructReanalysis
    
		"""
		pass

	def setValue(self,attr, value):
		"""
		Alias for setattr (attr, value)
    Args:
      attr (str): Attribute name to sets its value.
      value (str): Attribute value to set .
    
		"""
		pass

	def setValues(self,**kwds):
		"""
		Sets passed name/value pairs.
    
    Values are set in a standard order (the order the attribute is defined
    on the class) which is required in certain cases when an attribute's
    setter expects another attribute to have already been set.
    For example, setting a reference before a location that is wrt it.
    
    Args:
      **kwds: Set attributes in one go.
    
		"""
		pass

	@property
	def solverType(self):
		pass
	@solverType.setter
	def solverType(self):
		pass

	@property
	def status(self):
		pass
	@status.setter
	def status(self):
		pass

	def switchToOptimizedParts(self):
		"""
		Change part alternatives to this result.
		"""
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

	def wasValueSet(self,attr):
		"""
		Check if attribute was set

    Args:
      attr (str): Attribute name to check it value set or not

    Returns:
      bool: True, if value was set else false.
    
		"""
		pass

	@property
	def workingDir(self):
		pass
	@workingDir.setter
	def workingDir(self):
		pass

class TopographyOptimization:
	def __init__(self,params="{}", runOptions="{}", ignoreWarnings=False):
		"""
An advanced form of shape optimization that generates beads or swages on a
  design space.
  
  This optimization only works on parts that are defined by surface geometry.
  
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	def destroy(self):
		"""
		Delete the object removing it from the model.
    
    The object may come back due to an undo/redo.
    
		"""
		pass

	def export(self,file, params="{}", runOptions="{}", ignoreWarnings=False):
		"""
		Download solver file (.fem, .ssp) for run
    
    Args:
      file (str): File path to save to
      
      See constructor for params, runOptions, ignoreWarnings
    
		"""
		pass

	def getAllChildren(self,type=None, **kwds):
		"""
		Returns a list of all children that matches the specified type.

    Args:
      type (list[Named]): Filter to use to get the children based on object type.
      **kwds : Additional keyword arguments to match other attributes of the object.

    Returns:
      list[Union[Part, Motor, BoundaryCondition, ...]]: The list of children that satisfy the supplied filters.
    
		"""
		pass

	def getAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value.

    Args:
      name (str): Attribute name to find its class.
    
		"""
		pass

	def getAttributes(self,type=None, **kwds):
		"""
		Return an dict of the attributes.
    Pass type and kwds to filter by type and Attribute properties

    Args:
      type (type): Filters the attribute based on type
      **kwds : Additional kwds argument to filter attribute by its properties

    Returns:
      dict: Return an OrderedDict of the attributes
    
		"""
		pass

	def getChild(self,name=None, recursive=False, **kwds):
		"""
		Returns the child of the object which matches the specified unique name.

    Args:
      name (str): The name of the child object.
      recursive (bool):  Search all descendents.
      **kwds : Additional keyword arguments to match attributes of the object.

    Returns:
      Named: The child object which satisfies the specified filters.
    
		"""
		pass

	def getChildren(self,type=None, recursive=False, sorted=False, **kwds):
		"""
		Returns a list of children that is of the specified type.

    Args:
      type (Type[Named]): Filter objects by class.
      recursive (bool): True to get all descendent Parts and Assemblies.
      sorted (bool): Sort the children base on id.

    Returns:
      list[Named]
    
		"""
		pass

	def getClass(self,className):
		"""
		Returns the class of the object.
    
    It can be simple or qualified (with namespace). If the name is simple, we 
    prepend the cls.namespace.

    Args:
      className (Union[Part, Occurrence, Named..]) : The class name. 
     
    Returns:
      Union[Part, Occurrence, Named..] : The class for the specified className. 

    
		"""
		pass

	def getClassAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value

    Args:
      name (str): Name of the attribute
    
		"""
		pass

	def getDependents(self,recursive=False, **kwds):
		"""
		Get objects that reference this object through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getGuiAttributeNames(self):
		"""
		Return list of the attribute names that are in the gui

    Returns:
      list: Returns list of active gui attribute
    
		"""
		pass

	def getGuiValue(self,attr, **kwds):
		"""
		Get value formatted to be shown in the gui

    Args:
      attr (str): Attribute name to gets its gui value.

    Returns:
      str: Returns a string of the value with its gui units, like "5 mm/s".
    
		"""
		pass

	def getReferences(self,recursive=False, **kwds):
		"""
		Get objects this object references through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getSerializedAttributeValues(self):
		pass

	def getValue(self,attr):
		"""
		Return the attribute value for passed attribute name.
    
    Args:
      attr (String): Attribute name to gets its value.

    Returns:
      str: Returns the attribute value
    
		"""
		pass

	def importResults(self,showExplorer=True):
		"""
		Make results available in the Shape Explorer.
    
    Args:
      showExplorer (bool): Opens the Shape Explorer dialog (gui mode only)
    
		"""
		pass

	@property
	def imported(self):
		pass
	@imported.setter
	def imported(self):
		pass

	def isa(self,type=None, filter=None, name=None, wildcard=None, **kwds):
		"""
		Determines if the object matches the specified settings or not.
    
    Args:
      type (Union[Part, Assembly, Contact..]): The type of the object.
      filter (method): Return value of specified callback method.
      name (str): Name that matches exactly with object name.
      wildcard (str): A pattern to match exactly with the object name.
      **kwds : Additional keyword arguments to match other attributes.

    Returns:
      bool : True, if a match is found, otherwise False.
    
		"""
		pass

	def modelPositions(self):
		"""
		Forces all objects to return the original model positions instead of the
    current analysis positions.

    Useful when defining draw methods on GeneralObjects where behaviour is 
    different while animating.
    
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	@property
	def parent(self):
		pass
	@parent.setter
	def parent(self):
		pass

	@property
	def progress(self):
		pass
	@progress.setter
	def progress(self):
		pass

	def reanalyze(self,density, runOptions="{}", ignoreWarnings=False):
		"""
		Run an OptiStructAnalysis on the generated shape.
    
    Args:
      density (float): Density threshold value.
        1.0 - maximum density on design space.
        0.0 - minimum density on design space.
      runOptions (dict): See cls.RunOptions
      ignoreWarnings (bool): Abort on warnings
      
    Returns:
      OptiStructReanalysis
    
		"""
		pass

	def setValue(self,attr, value):
		"""
		Alias for setattr (attr, value)
    Args:
      attr (str): Attribute name to sets its value.
      value (str): Attribute value to set .
    
		"""
		pass

	def setValues(self,**kwds):
		"""
		Sets passed name/value pairs.
    
    Values are set in a standard order (the order the attribute is defined
    on the class) which is required in certain cases when an attribute's
    setter expects another attribute to have already been set.
    For example, setting a reference before a location that is wrt it.
    
    Args:
      **kwds: Set attributes in one go.
    
		"""
		pass

	@property
	def solverType(self):
		pass
	@solverType.setter
	def solverType(self):
		pass

	@property
	def status(self):
		pass
	@status.setter
	def status(self):
		pass

	def switchToOptimizedParts(self):
		"""
		Change part alternatives to this result.
		"""
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

	def wasValueSet(self,attr):
		"""
		Check if attribute was set

    Args:
      attr (str): Attribute name to check it value set or not

    Returns:
      bool: True, if value was set else false.
    
		"""
		pass

	@property
	def workingDir(self):
		pass
	@workingDir.setter
	def workingDir(self):
		pass

class TopologyOptimization:
	def __init__(self,params="{}", runOptions="{}", ignoreWarnings=False):
		"""
Carve material away from design spaces, creating the lightest structure
  capable of withstanding the forces you apply to your model.
  
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	def destroy(self):
		"""
		Delete the object removing it from the model.
    
    The object may come back due to an undo/redo.
    
		"""
		pass

	def export(self,file, params="{}", runOptions="{}", ignoreWarnings=False):
		"""
		Download solver file (.fem, .ssp) for run
    
    Args:
      file (str): File path to save to
      
      See constructor for params, runOptions, ignoreWarnings
    
		"""
		pass

	def getAllChildren(self,type=None, **kwds):
		"""
		Returns a list of all children that matches the specified type.

    Args:
      type (list[Named]): Filter to use to get the children based on object type.
      **kwds : Additional keyword arguments to match other attributes of the object.

    Returns:
      list[Union[Part, Motor, BoundaryCondition, ...]]: The list of children that satisfy the supplied filters.
    
		"""
		pass

	def getAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value.

    Args:
      name (str): Attribute name to find its class.
    
		"""
		pass

	def getAttributes(self,type=None, **kwds):
		"""
		Return an dict of the attributes.
    Pass type and kwds to filter by type and Attribute properties

    Args:
      type (type): Filters the attribute based on type
      **kwds : Additional kwds argument to filter attribute by its properties

    Returns:
      dict: Return an OrderedDict of the attributes
    
		"""
		pass

	def getChild(self,name=None, recursive=False, **kwds):
		"""
		Returns the child of the object which matches the specified unique name.

    Args:
      name (str): The name of the child object.
      recursive (bool):  Search all descendents.
      **kwds : Additional keyword arguments to match attributes of the object.

    Returns:
      Named: The child object which satisfies the specified filters.
    
		"""
		pass

	def getChildren(self,type=None, recursive=False, sorted=False, **kwds):
		"""
		Returns a list of children that is of the specified type.

    Args:
      type (Type[Named]): Filter objects by class.
      recursive (bool): True to get all descendent Parts and Assemblies.
      sorted (bool): Sort the children base on id.

    Returns:
      list[Named]
    
		"""
		pass

	def getClass(self,className):
		"""
		Returns the class of the object.
    
    It can be simple or qualified (with namespace). If the name is simple, we 
    prepend the cls.namespace.

    Args:
      className (Union[Part, Occurrence, Named..]) : The class name. 
     
    Returns:
      Union[Part, Occurrence, Named..] : The class for the specified className. 

    
		"""
		pass

	def getClassAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value

    Args:
      name (str): Name of the attribute
    
		"""
		pass

	def getDependents(self,recursive=False, **kwds):
		"""
		Get objects that reference this object through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getGuiAttributeNames(self):
		"""
		Return list of the attribute names that are in the gui

    Returns:
      list: Returns list of active gui attribute
    
		"""
		pass

	def getGuiValue(self,attr, **kwds):
		"""
		Get value formatted to be shown in the gui

    Args:
      attr (str): Attribute name to gets its gui value.

    Returns:
      str: Returns a string of the value with its gui units, like "5 mm/s".
    
		"""
		pass

	def getReferences(self,recursive=False, **kwds):
		"""
		Get objects this object references through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getSerializedAttributeValues(self):
		pass

	def getValue(self,attr):
		"""
		Return the attribute value for passed attribute name.
    
    Args:
      attr (String): Attribute name to gets its value.

    Returns:
      str: Returns the attribute value
    
		"""
		pass

	def importResults(self,showExplorer=True):
		"""
		Make results available in the Shape Explorer.
    
    Args:
      showExplorer (bool): Opens the Shape Explorer dialog (gui mode only)
    
		"""
		pass

	@property
	def imported(self):
		pass
	@imported.setter
	def imported(self):
		pass

	def isa(self,type=None, filter=None, name=None, wildcard=None, **kwds):
		"""
		Determines if the object matches the specified settings or not.
    
    Args:
      type (Union[Part, Assembly, Contact..]): The type of the object.
      filter (method): Return value of specified callback method.
      name (str): Name that matches exactly with object name.
      wildcard (str): A pattern to match exactly with the object name.
      **kwds : Additional keyword arguments to match other attributes.

    Returns:
      bool : True, if a match is found, otherwise False.
    
		"""
		pass

	def modelPositions(self):
		"""
		Forces all objects to return the original model positions instead of the
    current analysis positions.

    Useful when defining draw methods on GeneralObjects where behaviour is 
    different while animating.
    
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	@property
	def parent(self):
		pass
	@parent.setter
	def parent(self):
		pass

	@property
	def progress(self):
		pass
	@progress.setter
	def progress(self):
		pass

	def reanalyze(self,density, runOptions="{}", ignoreWarnings=False):
		"""
		Run an OptiStructAnalysis on the generated shape.
    
    Args:
      density (float): Density threshold value.
        1.0 - maximum density on design space.
        0.0 - minimum density on design space.
      runOptions (dict): See cls.RunOptions
      ignoreWarnings (bool): Abort on warnings
      
    Returns:
      OptiStructReanalysis
    
		"""
		pass

	def setValue(self,attr, value):
		"""
		Alias for setattr (attr, value)
    Args:
      attr (str): Attribute name to sets its value.
      value (str): Attribute value to set .
    
		"""
		pass

	def setValues(self,**kwds):
		"""
		Sets passed name/value pairs.
    
    Values are set in a standard order (the order the attribute is defined
    on the class) which is required in certain cases when an attribute's
    setter expects another attribute to have already been set.
    For example, setting a reference before a location that is wrt it.
    
    Args:
      **kwds: Set attributes in one go.
    
		"""
		pass

	@property
	def solverType(self):
		pass
	@solverType.setter
	def solverType(self):
		pass

	@property
	def status(self):
		pass
	@status.setter
	def status(self):
		pass

	def switchToOptimizedParts(self):
		"""
		Change part alternatives to this result.
		"""
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

	def wasValueSet(self,attr):
		"""
		Check if attribute was set

    Args:
      attr (str): Attribute name to check it value set or not

    Returns:
      bool: True, if value was set else false.
    
		"""
		pass

	@property
	def workingDir(self):
		pass
	@workingDir.setter
	def workingDir(self):
		pass

class Torque:
	def __init__(self,features, location=None, direction=None, magnitude=None, isRemote=False, **kwds):
		"""
A torque is a twisting force.

  It is a type of load and can be applied either to a face or the center of a
  hole, in which case it acts on the interior face of the hole.
  
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	@property
	def color(self):
		pass
	@color.setter
	def color(self):
		pass

	@property
	def connectionRadius(self):
		pass
	@connectionRadius.setter
	def connectionRadius(self):
		pass

	@property
	def connectionType(self):
		pass
	@connectionType.setter
	def connectionType(self):
		pass

	def destroy(self):
		"""
		Delete the object removing it from the model.
    
    The object may come back due to an undo/redo.
    
		"""
		pass

	@property
	def direction(self):
		pass
	@direction.setter
	def direction(self):
		pass

	@property
	def distributed(self):
		pass
	@distributed.setter
	def distributed(self):
		pass

	@property
	def feature(self):
		pass
	@feature.setter
	def feature(self):
		pass

	@property
	def features(self):
		pass
	@features.setter
	def features(self):
		pass

	def getAllChildren(self,type=None, **kwds):
		"""
		Returns a list of all children that matches the specified type.

    Args:
      type (list[Named]): Filter to use to get the children based on object type.
      **kwds : Additional keyword arguments to match other attributes of the object.

    Returns:
      list[Union[Part, Motor, BoundaryCondition, ...]]: The list of children that satisfy the supplied filters.
    
		"""
		pass

	def getAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value.

    Args:
      name (str): Attribute name to find its class.
    
		"""
		pass

	def getAttributes(self,type=None, **kwds):
		"""
		Return an dict of the attributes.
    Pass type and kwds to filter by type and Attribute properties

    Args:
      type (type): Filters the attribute based on type
      **kwds : Additional kwds argument to filter attribute by its properties

    Returns:
      dict: Return an OrderedDict of the attributes
    
		"""
		pass

	def getChild(self,name=None, recursive=False, **kwds):
		"""
		Returns the child of the object which matches the specified unique name.

    Args:
      name (str): The name of the child object.
      recursive (bool):  Search all descendents.
      **kwds : Additional keyword arguments to match attributes of the object.

    Returns:
      Named: The child object which satisfies the specified filters.
    
		"""
		pass

	def getChildren(self,type=None, recursive=False, sorted=False, **kwds):
		"""
		Returns a list of children that is of the specified type.

    Args:
      type (Type[Named]): Filter objects by class.
      recursive (bool): True to get all descendent Parts and Assemblies.
      sorted (bool): Sort the children base on id.

    Returns:
      list[Named]
    
		"""
		pass

	def getClass(self,className):
		"""
		Returns the class of the object.
    
    It can be simple or qualified (with namespace). If the name is simple, we 
    prepend the cls.namespace.

    Args:
      className (Union[Part, Occurrence, Named..]) : The class name. 
     
    Returns:
      Union[Part, Occurrence, Named..] : The class for the specified className. 

    
		"""
		pass

	def getClassAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value

    Args:
      name (str): Name of the attribute
    
		"""
		pass

	def getDependents(self,recursive=False, **kwds):
		"""
		Get objects that reference this object through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getGuiAttributeNames(self):
		"""
		Return list of the attribute names that are in the gui

    Returns:
      list: Returns list of active gui attribute
    
		"""
		pass

	def getGuiValue(self,attr, **kwds):
		"""
		Get value formatted to be shown in the gui

    Args:
      attr (str): Attribute name to gets its gui value.

    Returns:
      str: Returns a string of the value with its gui units, like "5 mm/s".
    
		"""
		pass

	def getReferences(self,recursive=False, **kwds):
		"""
		Get objects this object references through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getSerializedAttributeValues(self):
		pass

	def getValue(self,attr):
		"""
		Return the attribute value for passed attribute name.
    
    Args:
      attr (String): Attribute name to gets its value.

    Returns:
      str: Returns the attribute value
    
		"""
		pass

	def importLoads(self,csvFile):
		"""
		Imports boundary conditions to the active model from a csv file.

    Args:
      csvFile(str) : Csv file name containing all the BC information.

    Returns:
      list: List of error msgs that happened during import of all the boundary conditions.
    
		"""
		pass

	@property
	def inahole(self):
		pass
	@inahole.setter
	def inahole(self):
		pass

	def isa(self,type=None, filter=None, name=None, wildcard=None, **kwds):
		"""
		Determines if the object matches the specified settings or not.
    
    Args:
      type (Union[Part, Assembly, Contact..]): The type of the object.
      filter (method): Return value of specified callback method.
      name (str): Name that matches exactly with object name.
      wildcard (str): A pattern to match exactly with the object name.
      **kwds : Additional keyword arguments to match other attributes.

    Returns:
      bool : True, if a match is found, otherwise False.
    
		"""
		pass

	@property
	def loadCase(self):
		pass
	@loadCase.setter
	def loadCase(self):
		pass

	@property
	def localToPart(self):
		pass
	@localToPart.setter
	def localToPart(self):
		pass

	@property
	def location(self):
		pass
	@location.setter
	def location(self):
		pass

	@property
	def magnitude(self):
		pass
	@magnitude.setter
	def magnitude(self):
		pass

	@property
	def mode(self):
		pass
	@mode.setter
	def mode(self):
		pass

	def modelPositions(self):
		"""
		Forces all objects to return the original model positions instead of the
    current analysis positions.

    Useful when defining draw methods on GeneralObjects where behaviour is 
    different while animating.
    
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	@property
	def parent(self):
		pass
	@parent.setter
	def parent(self):
		pass

	@property
	def part(self):
		pass
	@part.setter
	def part(self):
		pass

	@property
	def parts(self):
		pass
	@parts.setter
	def parts(self):
		pass

	def setSystem(self,system):
		"""
		Associate system to a boundary condition.

    Args:
      system (System): System tp associate with boundary condition.
    
		"""
		pass

	def setValue(self,attr, value):
		"""
		Alias for setattr (attr, value)
    Args:
      attr (str): Attribute name to sets its value.
      value (str): Attribute value to set .
    
		"""
		pass

	def setValues(self,**kwds):
		"""
		Sets passed name/value pairs.
    
    Values are set in a standard order (the order the attribute is defined
    on the class) which is required in certain cases when an attribute's
    setter expects another attribute to have already been set.
    For example, setting a reference before a location that is wrt it.
    
    Args:
      **kwds: Set attributes in one go.
    
		"""
		pass

	def updatePosition(self,m44):
		"""
		Update the position by multiplying input M44 matrix.
		"""
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

	def wasValueSet(self,attr):
		"""
		Check if attribute was set

    Args:
      attr (str): Attribute name to check it value set or not

    Returns:
      bool: True, if value was set else false.
    
		"""
		pass

class Torus:
	def __init__(self,**kwds):
		"""
Create a Torus implicit body.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class TranslationalDampingTriple:
	def __init__(self,default=(0, 0, 0), **kwds):
		pass

	def apply(self,**kwds):
		"""
		Context manager to specify Attribute constructor kwds
    Useful to avoid repeating kwds while defining a related group
    
		"""
		pass

	def castForGet(self,obj, value):
		"""
		Converts and returns the attribute value to its external type.

    Args:
      obj (GeneralObject): Object this attribute belongs to.
      value (Any): Value of the attribute to be converted.

    Returns:
      value (Any): Converted value.
    
		"""
		pass

	def castForSet(self,obj, value):
		pass

	def classifyObject(self,obj):
		pass

	def create(self,obj):
		pass

	def createList(self,listAttr, obj):
		pass

	def createListList(self,listAttr, obj):
		pass

	def disable(self,obj):
		"""
		Called by GeneralObject when destroyed (or undo of a create)
		"""
		pass

	def enable(self,obj):
		"""
		Called by GeneralObject when created (or undo of a destroy)
		"""
		pass

	def getCreateArgs(self):
		"""
		Helper used in create methods
		"""
		pass

	def getDisplayName(self,obj):
		pass

	def getGuiValue(self,obj, format="modeling"):
		pass

	def getInCoreValue(self,obj):
		pass

	def getReadonly(self,obj):
		pass

	def getUnits(self,obj):
		pass

	def getValue(self,obj):
		pass

	def getValueList(self,obj):
		pass

	def getValueListList(self,obj):
		pass

	def initialize(self,objCls, name):
		"""
		Initializes the attribute.

    Args:
      objCls (class): Object class this attribute belongs to.
      name (str): Name of the attribute.
    
		"""
		pass

	def loadValue(self,obj, value):
		"""
		Called by GeneralObject.loadAttributeValues during stmod deserialization
		"""
		pass

	def populateGuiValue(self,obj, prop, component=None):
		pass

	def populatePropertyEditor(self,obj, prop, **kwds):
		"""
		Customize how attribute appears in Property Editor and ObjectTables.
    
    Args:
      obj (GeneralObject)
      prop (hwt::Property): Property Editor interface.
      component (int): 0, 1, 2
        Only passed when showing Triples 1 value at a time.
    
		"""
		pass

	def setInCoreValue(self,obj, value):
		pass

	def setValue(self,obj, value):
		pass

	def setValueList(self,obj, value):
		pass

	def setValueListList(self,obj, value):
		pass

	def usingUnits(self,units):
		pass

class TranslationalStiffnessTriple:
	def __init__(self,default=(0, 0, 0), **kwds):
		pass

	def apply(self,**kwds):
		"""
		Context manager to specify Attribute constructor kwds
    Useful to avoid repeating kwds while defining a related group
    
		"""
		pass

	def castForGet(self,obj, value):
		"""
		Converts and returns the attribute value to its external type.

    Args:
      obj (GeneralObject): Object this attribute belongs to.
      value (Any): Value of the attribute to be converted.

    Returns:
      value (Any): Converted value.
    
		"""
		pass

	def castForSet(self,obj, value):
		pass

	def classifyObject(self,obj):
		pass

	def create(self,obj):
		pass

	def createList(self,listAttr, obj):
		pass

	def createListList(self,listAttr, obj):
		pass

	def disable(self,obj):
		"""
		Called by GeneralObject when destroyed (or undo of a create)
		"""
		pass

	def enable(self,obj):
		"""
		Called by GeneralObject when created (or undo of a destroy)
		"""
		pass

	def getCreateArgs(self):
		"""
		Helper used in create methods
		"""
		pass

	def getDisplayName(self,obj):
		pass

	def getGuiValue(self,obj, format="modeling"):
		pass

	def getInCoreValue(self,obj):
		pass

	def getReadonly(self,obj):
		pass

	def getUnits(self,obj):
		pass

	def getValue(self,obj):
		pass

	def getValueList(self,obj):
		pass

	def getValueListList(self,obj):
		pass

	def initialize(self,objCls, name):
		"""
		Initializes the attribute.

    Args:
      objCls (class): Object class this attribute belongs to.
      name (str): Name of the attribute.
    
		"""
		pass

	def loadValue(self,obj, value):
		"""
		Called by GeneralObject.loadAttributeValues during stmod deserialization
		"""
		pass

	def populateGuiValue(self,obj, prop, component=None):
		pass

	def populatePropertyEditor(self,obj, prop, **kwds):
		"""
		Customize how attribute appears in Property Editor and ObjectTables.
    
    Args:
      obj (GeneralObject)
      prop (hwt::Property): Property Editor interface.
      component (int): 0, 1, 2
        Only passed when showing Triples 1 value at a time.
    
		"""
		pass

	def setInCoreValue(self,obj, value):
		pass

	def setValue(self,obj, value):
		pass

	def setValueList(self,obj, value):
		pass

	def setValueListList(self,obj, value):
		pass

	def usingUnits(self,units):
		pass

class Triple:
	def __init__(self,default=(0, 0, 0), **kwds):
		"""
Store 3 float values.

    Base class for Color, Direction, Location.
  
"""
		pass

	def apply(self,**kwds):
		"""
		Context manager to specify Attribute constructor kwds
    Useful to avoid repeating kwds while defining a related group
    
		"""
		pass

	def castForGet(self,obj, value):
		"""
		Converts and returns the attribute value to its external type.

    Args:
      obj (GeneralObject): Object this attribute belongs to.
      value (Any): Value of the attribute to be converted.

    Returns:
      value (Any): Converted value.
    
		"""
		pass

	def castForSet(self,obj, value):
		pass

	def classifyObject(self,obj):
		pass

	def create(self,obj):
		pass

	def createList(self,listAttr, obj):
		pass

	def createListList(self,listAttr, obj):
		pass

	def disable(self,obj):
		"""
		Called by GeneralObject when destroyed (or undo of a create)
		"""
		pass

	def enable(self,obj):
		"""
		Called by GeneralObject when created (or undo of a destroy)
		"""
		pass

	def getCreateArgs(self):
		"""
		Helper used in create methods
		"""
		pass

	def getDisplayName(self,obj):
		pass

	def getGuiValue(self,obj, format="modeling"):
		pass

	def getInCoreValue(self,obj):
		pass

	def getReadonly(self,obj):
		pass

	def getUnits(self,obj):
		pass

	def getValue(self,obj):
		pass

	def getValueList(self,obj):
		pass

	def getValueListList(self,obj):
		pass

	def initialize(self,objCls, name):
		"""
		Initializes the attribute.

    Args:
      objCls (class): Object class this attribute belongs to.
      name (str): Name of the attribute.
    
		"""
		pass

	def loadValue(self,obj, value):
		"""
		Called by GeneralObject.loadAttributeValues during stmod deserialization
		"""
		pass

	def populateGuiValue(self,obj, prop, component=None):
		pass

	def populatePropertyEditor(self,obj, prop, **kwds):
		"""
		Customize how attribute appears in Property Editor and ObjectTables.
    
    Args:
      obj (GeneralObject)
      prop (hwt::Property): Property Editor interface.
      component (int): 0, 1, 2
        Only passed when showing Triples 1 value at a time.
    
		"""
		pass

	def setInCoreValue(self,obj, value):
		pass

	def setValue(self,obj, value):
		pass

	def setValueList(self,obj, value):
		pass

	def setValueListList(self,obj, value):
		pass

	def usingUnits(self,units):
		pass

class TrippleListImplicit:
	def __init__(self,cppName: str="",doc: str=""):
		"""
list[math.Point]
"""
		pass

class UnitlessFloatDataImplicit:
	def __init__(self,cppName: str="",doc: str=""):
		"""
float
"""
		pass

class Units:
	def __init__(self,system: str="SI", **aliases):
		"""
Utility class used to convert values from one set of units to another.
  
"""
		pass

	def changeUnitInUnitSystem(self,unitType, unitName, unitSystemName):
		"""
		Changes the name of the unit in use, for the 'unitType' in the unit system
    'unitSystemName'.

    Args:
      unitType (str): The unit type.
      unitName (str): The new unit name.
      unitSystemName (str): The system name.

    Returns:
      bool: True on success, False otherwise.
    
		"""
		pass

	def convert(self,value, units, formula, toBase):
		"""
		Converts the specified value to/from base units.

    Args:
      value (Union[float, list[float], str, list[str]]): The value to convert.
      units (str): The units to convert.
      formula (str): The string conversion expression: m, mm, in, etc.
      toBase (bool): Determines whether to convert to base units or not.

    Raises:
      ValueError: If units is invalid.

    Returns:
      float: The converted value.
    
		"""
		pass

	def createUnit(self,unitType, unitName, substitution_str, multiplier=1.0):
		"""
		Creates a new unit 'unitName' of type 'unitType'.
    
    For instance:
      createUnit('pressure', 'bar', 'kg, m, s', multiplier=1e5)

    Args:
        unitType (str): The new unit type.
        unitName (str): The new unit name.
        substitution_str (str): A string that must contain, a comma separated list
          of units which suffice to build the unitType.
        multiplier (float): The conversion factor to the corresponding
          unit in the model unit.

    Returns:
      bool: True on success, False otherwise.
    
		"""
		pass

	def createUnitSystem(self,newUnitSystemName, templateUnitSystemName="m Kg N Pa", unitsToChange=None):
		"""
		Creates a new Unit System by copying the units used in the templateUnitSystem
      and then replacing the units for the unit types defined in unitsToChange.

    Args:
      newUnitSystemName (str): The new unit system name.
      templateUnitSystemName (str): Template unit system to get units
        from and apply to new unit system. 
      unitsToChange (dict[str, str]): A dictionary with unitTypes as
        keys and units as values. 

    Returns:
      bool: True on success, False otherwise. 
    
		"""
		pass

	def deleteUnitSystem(self,unitSystemName):
		"""
		Deletes the unit system.

    Args:
      unitSystemName (str): The unit system to delete.

    Returns:
      bool: True on success, False otherwise.
    
		"""
		pass

	def extractValueAndUnit(self,string):
		"""
		Returns a double value and a unit expression from the specified string.

    Args:
      string (str): The string containing both the value and the unit.

    Raises:
      ValueError: If Units could not be split.

    Returns:
      tuple[float, str]: The double value and the unit expression as a string.
    
		"""
		pass

	def fromBase(self,value, units="length"):
		"""
		Converts the value from base units to the user specified unit.

    Args:
      value (Union[float, list[float], str, list[str]]): The value to convert.
      units (str): The units to convert.

    Returns:
      float: The converted value.
    
		"""
		pass

	def getConversionScaleFactor(self,sourceUnit, targetUnit, units):
		"""
		Returns the scale factor from source unit to target for the particular formula

    Args:
      sourceUnit (str): "m", "kg", "deg" ...
      targetUnit (str): "cm", "g", "rad" ...
      units (str): "length", "mass", "angle" ...

    Returns:
      float
    
		"""
		pass

	def getDefinedUnits(self,units="length"):
		"""
		Returns all the units defined for the particular formula

    Args:
      units (str): "length", "mass", "angle" ...

    Returns:
      list[str]
    
		"""
		pass

	def getFormattedString(self,value, units="length", format="modeling"):
		"""
		Converts the value from base units to user units and formats it into a
    string containing the value and unit: 5 -> '5 cm'.

    Args:
      value (float | list[float]): The float to display.
        An iterable is returned comma separated: [1, 2] -> '1 cm, 2 cm'.
      units (str): length, mass, ...
      format (str | list[float, float]):
        "modeling": User preference for values shown during model setup.
        "results": User preference for solver results.
        [width, precision]
        Python format string like "%g".

    Returns:
      str
    
		"""
		pass

	def getInternalName(self,units):
		"""
		Named used in c++
		"""
		pass

	def getPublicName(self,units):
		"""
		Named used in python
		"""
		pass

	def getSystemNames(self):
		"""
		Returns a list of names of the supported systems.
    
		"""
		pass

	def getUnit(self,units="length"):
		"""
		Returns the formula in the user unit system for the specified units.

    Args:
      units (str): The units to consider.

    Raises:
      ValueError: If units is invalid.

    Returns:
      str: The formula in the user unit system.
    
		"""
		pass

	def getUnitsDisplayName(self,units, withUnits=True):
		"""
		Converts units to a gui label.

    Args:
      units (str): The units.
      withUnits (bool): Determines whether to include units in the return value.

    Returns:
      str: The display name.
    
		"""
		pass

	def getUnitsFromDisplayName(self,name):
		"""
		Returns the units from the display name.
    
    This is the inverse of getUnitsDisplayName.
    
		"""
		pass

	def getUserUnit(self,units="length"):
		"""
		Returns the formula in the user unit system for the specified units.

    Args:
      units (str): The units to consider.

    Raises:
      ValueError: If units is invalid.

    Returns:
      str: The formula in the user unit system.
    
		"""
		pass

	def setSystem(self,system="SI"):
		"""
		Sets user specified system to system.
		"""
		pass

	@property
	def shortSystemName(self):
		pass
	@shortSystemName.setter
	def shortSystemName(self):
		pass

	@property
	def system(self):
		pass
	@system.setter
	def system(self):
		pass

	def toBase(self,value, units="length"):
		"""
		Converts the value from the user specified unit to base units

    Args:
      value (Union[float, list[float], str, list[str]]): The value to convert.
      units (str): The units to convert.

    Returns:
      float: The converted value.
    
		"""
		pass

class UnitsManager:
	def __init__(self,project):
		"""
Manages the various unit systems used throughout the application.

     - gui     - for displaying/setting numeric values in the gui.
     - solver  - for converting numbers when exporting to a solver.
     - current - the system used when setting/getting attribute values.

     There is one gui unit system used throughout Inspire.
     Its system can be set either via the settings dialog or the popup menu
     on the main window. All numeric gui values are displayed/entered using
     these units.

     The solver units are used when exporting the model to a solver.
     Every time you ask for the solver units you get a new unit system with
     its system set from the value in settings.

     setting/getting numeric values is 'current units'. Aware
     when you call part.mass the value is multiplied the the current units
     as defined by this class. The current units are specified using the
     usingUnits context method current units can be:

          - base
          - gui
          - solver
          - any system, like MKS, IPS, MPA, ...
  
"""
		pass

	@property
	def current(self):
		pass
	@current.setter
	def current(self):
		pass

	def getUnits(self,system):
		"""
		Returns a common.Units manager for the passed system name.

    Args:
      system (str) : Can be base, gui, solver,
        any system like MKS, IPS, MPA, CGS,...

    Returns:
      Units : The units system specified by system.
  
		"""
		pass

	@property
	def gui(self):
		pass
	@gui.setter
	def gui(self):
		pass

	@property
	def solver(self):
		pass
	@solver.setter
	def solver(self):
		pass

	def usingUnits(self,system):
		"""
		Context to specify the current units.
    
    Args:
      system (str) : System can be

        - base : always SI units, internal units of the data model, this is default.
        - gui : user specified gui units and angle=deg, ang_velocity=rpm.
        - solver : "Model units" from preferences and angle=rad.
        - any unit system: "MKS", "MMKS", "IPS, "MPA", ...
    
		"""
		pass

class UnitsUnion:
	def __init__(self,getUnits, *args, **kwds):
		"""
Group of mutually exclusive attributes where only one is active at at time.

      The active attribute is controlled by units.
  
"""
		pass

	def apply(self,**kwds):
		"""
		Context manager to specify Attribute constructor kwds
    Useful to avoid repeating kwds while defining a related group
    
		"""
		pass

	def castForGet(self,obj, value):
		"""
		Converts and returns the attribute value to its external type.

    Args:
      obj (GeneralObject): Object this attribute belongs to.
      value (Any): Value of the attribute to be converted.

    Returns:
      value (Any): Converted value.
    
		"""
		pass

	def castForSet(self,obj, value):
		pass

	def classifyObject(self,obj):
		pass

	def createList(self,listAttr, obj):
		pass

	def createListList(self,listAttr, obj):
		pass

	def disable(self,obj):
		"""
		Called by GeneralObject when destroyed (or undo of a create)
		"""
		pass

	def enable(self,obj):
		"""
		Called by GeneralObject when created (or undo of a destroy)
		"""
		pass

	def get(self,key, default=None):
		"""
		D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.
		"""
		pass

	def getActiveAttribute(self,obj):
		"""
		Returns the active attribute.
		"""
		pass

	def getActiveKey(self,obj):
		"""
		Returns the active attribute.
		"""
		pass

	def getCreateArgs(self):
		"""
		Helper used in create methods
		"""
		pass

	def getDisplayName(self,obj):
		"""
		Returns the display name of the active attribute.
		"""
		pass

	def getGuiValue(self,obj):
		"""
		Returns the formatted value, as shown in the Property Editor.
		"""
		pass

	def getInCoreValue(self,obj):
		pass

	def getReadonly(self,obj):
		pass

	def getUnits(self,obj):
		"""
		Returns the units for the active attribute.
		"""
		pass

	def getValue(self,obj):
		pass

	def getValueList(self,obj):
		pass

	def getValueListList(self,obj):
		pass

	def initialize(self,objCls, name):
		pass

	def items(self):
		"""
		D.items() -> a set-like object providing a view on D's items
		"""
		pass

	def keys(self):
		"""
		D.keys() -> a set-like object providing a view on D's keys
		"""
		pass

	def loadValue(self,obj, value):
		"""
		Called by GeneralObject.loadAttributeValues during stmod deserialization
		"""
		pass

	def populateGuiValue(self,obj, prop):
		"""
		Override to customize, prop.value, displayValue, allowedValues.
    
    The prop.value type determines which editor widget used:
    - bool -> checkbox
    - str  -> line edit
    - hwtypes.Color -> color picker
    
    Setting prop.allowedValues yields a ComboBox.
    
    prop.displayValue is a str shown when the editor loses focus.
    
		"""
		pass

	def populatePropertyEditor(self,obj, prop, **kwds):
		"""
		Customize how attribute appears in Property Editor and ObjectTables.
    
    Args:
      obj (GeneralObject)
      prop (hwt::Property): Property Editor interface.
      component (int): 0, 1, 2
        Only passed when showing Triples 1 value at a time.
    
		"""
		pass

	def setInCoreValue(self,obj, value):
		pass

	def setValue(self,obj, value):
		pass

	def setValueList(self,obj, value):
		pass

	def setValueListList(self,obj, value):
		pass

	def usingUnits(self,units):
		pass

	def values(self):
		"""
		D.values() -> an object providing a view on D's values
		"""
		pass

class UserHole:
	def __init__(self,holes=None):
		"""
List of UserHoleData
"""
		pass

	def addAdjacentFeature(self,feature):
		"""
		Add the supplied feature to the HoleData
    
		"""
		pass

	def append(self,item):
		"""
		Overloaded list method to cast the item to a HoleData
    
		"""
		pass

	@property
	def axis(self):
		pass
	@axis.setter
	def axis(self):
		pass

	def copy(self):
		"""
		 Return the copied hole
		"""
		pass

	@property
	def fasteners(self):
		pass
	@fasteners.setter
	def fasteners(self):
		pass

	@property
	def features(self):
		pass
	@features.setter
	def features(self):
		pass

	def isOpen(self):
		pass

	def isaRegularCylinder(self):
		"""
		Return true, if cylindrical hole has perpendicular faces
    
		"""
		pass

	@property
	def isslot(self):
		pass
	@isslot.setter
	def isslot(self):
		pass

	@property
	def isvalid(self):
		pass
	@isvalid.setter
	def isvalid(self):
		pass

	@property
	def location(self):
		pass
	@location.setter
	def location(self):
		pass

	@property
	def origBoltParts(self):
		pass
	@origBoltParts.setter
	def origBoltParts(self):
		pass

	@property
	def parts(self):
		pass
	@parts.setter
	def parts(self):
		pass

	@property
	def radius(self):
		pass
	@radius.setter
	def radius(self):
		pass

	def removeFeature(self,feature):
		"""
		Remove a feature from this hole
    
		"""
		pass

	@property
	def shape(self):
		pass
	@shape.setter
	def shape(self):
		pass

	@property
	def size(self):
		pass
	@size.setter
	def size(self):
		pass

	@property
	def type(self):
		pass
	@type.setter
	def type(self):
		pass

class UserHoleData:
	def __init__(self,items):
		"""
HoleData created from a list of features
  
"""
		pass

	def addAdjacentFeature(self,feature):
		"""
		Return true, if specifed feature is added to this hole
    
		"""
		pass

	@property
	def axis(self):
		pass
	@axis.setter
	def axis(self):
		pass

	def copy(self):
		"""
		Return the copied holes
		"""
		pass

	@property
	def features(self):
		pass
	@features.setter
	def features(self):
		pass

	def getHoleData(self):
		"""
		Returns list of features that defines this hole.
    
		"""
		pass

	@property
	def radius(self):
		pass
	@radius.setter
	def radius(self):
		pass

	@property
	def size(self):
		pass
	@size.setter
	def size(self):
		pass

	@property
	def sizeBig(self):
		pass
	@sizeBig.setter
	def sizeBig(self):
		pass

class Validator:
	def __init__(self):
		"""
Interface used in validateSelf* functions to log errors and warnings.
  See sendError, sendWarning

  Errors and warnings are grouped by the object that logged them in
  self.errors, self.warnings
  
"""
		pass

	def pushObject(self,obj):
		"""
		To be called with an object before it is validated
		"""
		pass

	def sendError(self,problem, **kwds):
		"""
		Log error for current object.  Errors must be fixed in order for
    realization and analysis to work
    
		"""
		pass

	def sendWarning(self,problem, **kwds):
		"""
		Log warning for current object
		"""
		pass

class Variable:
	def __init__(self,default="0",units: str="", **kwds):
		pass

	def apply(self,**kwds):
		"""
		Context manager to specify Attribute constructor kwds
    Useful to avoid repeating kwds while defining a related group
    
		"""
		pass

	def castForGet(self,obj, value):
		pass

	def castForSet(self,obj, value):
		pass

	def classifyObject(self,obj):
		pass

	def create(self,obj):
		pass

	def createList(self,listAttr, obj):
		pass

	def createListList(self,listAttr, obj):
		pass

	def disable(self,obj):
		"""
		Called by GeneralObject when destroyed (or undo of a create)
		"""
		pass

	@property
	def doubleName(self):
		pass
	@doubleName.setter
	def doubleName(self):
		pass

	def enable(self,obj):
		"""
		Called by GeneralObject when created (or undo of a destroy)
		"""
		pass

	def getCreateArgs(self):
		"""
		Helper used in create methods
		"""
		pass

	def getDisplayName(self,obj):
		pass

	def getGuiValue(self,obj, **kwds):
		"""
		Returns the formatted variable value, as shown in the Property Editor.
		"""
		pass

	def getInCoreValue(self,obj):
		pass

	def getReadonly(self,obj):
		pass

	def getUnits(self,obj):
		pass

	def getValue(self,obj):
		pass

	def getValueList(self,obj):
		pass

	def getValueListList(self,obj):
		pass

	def initialize(self,objCls, name):
		pass

	def loadValue(self,obj, value):
		pass

	def populateGuiValue(self,obj, prop):
		"""
		Override to customize, prop.value, displayValue, allowedValues.
    
    The prop.value type determines which editor widget used:
    - bool -> checkbox
    - str  -> line edit
    - hwtypes.Color -> color picker
    
    Setting prop.allowedValues yields a ComboBox.
    
    prop.displayValue is a str shown when the editor loses focus.
    
		"""
		pass

	def populatePropertyEditor(self,obj, prop, **kwds):
		"""
		Customize how attribute appears in Property Editor and ObjectTables.
    
    Args:
      obj (GeneralObject)
      prop (hwt::Property): Property Editor interface.
      component (int): 0, 1, 2
        Only passed when showing Triples 1 value at a time.
    
		"""
		pass

	def setInCoreValue(self,obj, value):
		pass

	def setValue(self,obj, value):
		pass

	def setValueList(self,obj, value):
		pass

	def setValueListList(self,obj, value):
		pass

	def usingUnits(self,units):
		pass

	@property
	def varName(self):
		pass
	@varName.setter
	def varName(self):
		pass

class VectorElement:
	def __init__(self,**kwds):
		"""
Implicit vector element operation.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class WeightsImplicit:
	def __init__(self,cppName,units: str="length",doc: str=""):
		"""
list[Float]
"""
		pass

class WeldGroup:
	def __init__(self,welds=[],name: str="", **kwds):
		"""
Group of Welds.
"""
		pass

	@property
	def active(self):
		pass
	@active.setter
	def active(self):
		pass

	def add(self,welds):
		"""
		Adds weld or welds to the weld group. 
    If any weld or welds is in another WeldGroup it gets moved to this WeldGroup.
    If any weld or welds is already in the WeldGroup nothing happens for it.

    Args:
        welds (Union[list[SpotWeld], SpotWeld]): The welds or weld to add.
    
    Raisess:
        ValueError: In case any of the passed welds is not of type SpotWeld.
    
		"""
		pass

	def destroy(self):
		"""
		Delete the object removing it from the model.
    
    The object may come back due to an undo/redo.
    
		"""
		pass

	def getAllChildren(self,type=None, **kwds):
		"""
		Returns a list of all children that matches the specified type.

    Args:
      type (list[Named]): Filter to use to get the children based on object type.
      **kwds : Additional keyword arguments to match other attributes of the object.

    Returns:
      list[Union[Part, Motor, BoundaryCondition, ...]]: The list of children that satisfy the supplied filters.
    
		"""
		pass

	def getAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value.

    Args:
      name (str): Attribute name to find its class.
    
		"""
		pass

	def getAttributes(self,type=None, **kwds):
		"""
		Return an dict of the attributes.
    Pass type and kwds to filter by type and Attribute properties

    Args:
      type (type): Filters the attribute based on type
      **kwds : Additional kwds argument to filter attribute by its properties

    Returns:
      dict: Return an OrderedDict of the attributes
    
		"""
		pass

	def getChild(self,name=None, recursive=False, **kwds):
		"""
		Returns the child of the object which matches the specified unique name.

    Args:
      name (str): The name of the child object.
      recursive (bool):  Search all descendents.
      **kwds : Additional keyword arguments to match attributes of the object.

    Returns:
      Named: The child object which satisfies the specified filters.
    
		"""
		pass

	def getChildren(self,type=None, recursive=False, sorted=False, **kwds):
		"""
		Returns a list of children that is of the specified type.

    Args:
      type (Type[Named]): Filter objects by class.
      recursive (bool): True to get all descendent Parts and Assemblies.
      sorted (bool): Sort the children base on id.

    Returns:
      list[Named]
    
		"""
		pass

	def getClass(self,className):
		"""
		Returns the class of the object.
    
    It can be simple or qualified (with namespace). If the name is simple, we 
    prepend the cls.namespace.

    Args:
      className (Union[Part, Occurrence, Named..]) : The class name. 
     
    Returns:
      Union[Part, Occurrence, Named..] : The class for the specified className. 

    
		"""
		pass

	def getClassAttribute(self,name):
		"""
		Returns the Attribute off the class, not the value

    Args:
      name (str): Name of the attribute
    
		"""
		pass

	def getDependents(self,recursive=False, **kwds):
		"""
		Get objects that reference this object through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getGuiAttributeNames(self):
		"""
		Return list of the attribute names that are in the gui

    Returns:
      list: Returns list of active gui attribute
    
		"""
		pass

	def getGuiValue(self,attr, **kwds):
		"""
		Get value formatted to be shown in the gui

    Args:
      attr (str): Attribute name to gets its gui value.

    Returns:
      str: Returns a string of the value with its gui units, like "5 mm/s".
    
		"""
		pass

	def getReferences(self,recursive=False, **kwds):
		"""
		Get objects this object references through a Reference attribute.

    Args:
      recursive (bool)
      **kwds : Filter objects using isa.

    Returns:
      set[Named]
    
		"""
		pass

	def getSerializedAttributeValues(self):
		pass

	def getValue(self,attr):
		"""
		Return the attribute value for passed attribute name.
    
    Args:
      attr (String): Attribute name to gets its value.

    Returns:
      str: Returns the attribute value
    
		"""
		pass

	def isa(self,type=None, filter=None, name=None, wildcard=None, **kwds):
		"""
		Determines if the object matches the specified settings or not.
    
    Args:
      type (Union[Part, Assembly, Contact..]): The type of the object.
      filter (method): Return value of specified callback method.
      name (str): Name that matches exactly with object name.
      wildcard (str): A pattern to match exactly with the object name.
      **kwds : Additional keyword arguments to match other attributes.

    Returns:
      bool : True, if a match is found, otherwise False.
    
		"""
		pass

	def modelPositions(self):
		"""
		Forces all objects to return the original model positions instead of the
    current analysis positions.

    Useful when defining draw methods on GeneralObjects where behaviour is 
    different while animating.
    
		"""
		pass

	@property
	def name(self):
		pass
	@name.setter
	def name(self):
		pass

	@property
	def parent(self):
		pass
	@parent.setter
	def parent(self):
		pass

	def remove(self,welds):
		"""
		Removes weld or welds from the weld group.
    If any weld or welds is not in the WeldGroup nothing happens for it.

    Args:
        welds (Union[list[SpotWeld], SpotWeld]): The welds or weld to remove.
    
    Raises:
        ValueError: In case any of the passed welds is not of type SpotWeld.
    
		"""
		pass

	def setValue(self,attr, value):
		"""
		Alias for setattr (attr, value)
    Args:
      attr (str): Attribute name to sets its value.
      value (str): Attribute value to set .
    
		"""
		pass

	def setValues(self,**kwds):
		"""
		Sets passed name/value pairs.
    
    Values are set in a standard order (the order the attribute is defined
    on the class) which is required in certain cases when an attribute's
    setter expects another attribute to have already been set.
    For example, setting a reference before a location that is wrt it.
    
    Args:
      **kwds: Set attributes in one go.
    
		"""
		pass

	@property
	def visible(self):
		pass
	@visible.setter
	def visible(self):
		pass

	def wasValueSet(self,attr):
		"""
		Check if attribute was set

    Args:
      attr (str): Attribute name to check it value set or not

    Returns:
      bool: True, if value was set else false.
    
		"""
		pass

	@property
	def welds(self):
		pass
	@welds.setter
	def welds(self):
		pass

class XAXIS:
	"""
A mathematical represenation of a Vector in 3D space.
"""
	pass

class XRef:
	def __init__(self,**kwds):
		"""
Implicit X Reference.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class YRef:
	def __init__(self,**kwds):
		"""
Implicit Y Reference.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class ZRef:
	def __init__(self,**kwds):
		"""
Implicit Z Reference.
  
"""
		pass

	def getParameters(self):
		pass

	def store(self):
		pass

class abc:
	"""
Abstract Base Classes (ABCs) according to PEP 3119.
"""
	pass

class cf:
	pass

def classify(obj):
	"""
Convert hwfdmcore proxy objects to python API equivalent
  
  Args:
    obj (SWIG object) : SWIG object to convert into python native one.

  Returns:
    obj : For "Named" objects returns the same proxy so they can be compared with 'is'.
      For "Features" different objects are returned everytime.
  
"""
	pass

class classproperty:
	def __init__(self,fget=None, fset=None, fdel=None, doc=None):
		"""
Like classmethod but for properties.
  
  Used to give cls.attr a docstring and run a function.
  
  Use inspect.getattr_static to get the descriptor.
  
"""
		pass

def clearMessage():
	"""
Removes a message from the status bar.
  
"""
	pass

def clearProgress():
	pass

class collections:
	"""
This module implements specialized container datatypes providing
alternatives to Python's general purpose built-in containers, dict,
list, set, and tuple.

* namedtuple   factory function for creating tuple subclasses with named fields
* deque        list-like container with fast appends and pops on either end
* ChainMap     dict-like class for creating a single view of multiple mappings
* Counter      dict subclass for counting hashable objects
* OrderedDict  dict subclass that remembers the order entries were added
* defaultdict  dict subclass that calls a factory function to supply missing values
* UserDict     wrapper around dictionary objects for easier dict subclassing
* UserList     wrapper around list objects for easier list subclassing
* UserString   wrapper around string objects for easier string subclassing


"""
	pass

class contextlib:
	"""
Utilities for with-statement contexts.  See PEP 343.
"""
	pass

def contextmanager(func):
	"""
@contextmanager decorator.

    Typical usage:

        @contextmanager
        def some_generator(<arguments>):
            <setup>
            try:
                yield <value>
            finally:
                <cleanup>

    This makes this:

        with some_generator(<arguments>) as <variable>:
            <body>

    equivalent to this:

        <setup>
        try:
            <variable> = <value>
            <body>
        finally:
            <cleanup>
    
"""
	pass

def convertToBaseUnit(value,unit: str="length"):
	pass

def convertToTriangleMesh(parts):
	"""
Convert Parts to triangle mesh.

  Args:
    parts (list[Part]): Parts to be converted in triangle mesh.
  
"""
	pass

class copy:
	"""
Generic (shallow and deep) copying operations.

Interface summary:

        import copy

        x = copy.copy(y)        # make a shallow copy of y
        x = copy.deepcopy(y)    # make a deep copy of y

For module specific errors, copy.Error is raised.

The difference between shallow and deep copying is only relevant for
compound objects (objects that contain other objects, like lists or
class instances).

- A shallow copy constructs a new compound object and then (to the
  extent possible) inserts *the same objects* into it that the
  original contains.

- A deep copy constructs a new compound object and then, recursively,
  inserts *copies* into it of the objects found in the original.

Two problems often exist with deep copy operations that don't exist
with shallow copy operations:

 a) recursive objects (compound objects that, directly or indirectly,
    contain a reference to themselves) may cause a recursive loop

 b) because deep copy copies *everything* it may copy too much, e.g.
    administrative data structures that should be shared even between
    copies

Python's deep copy operation avoids these problems by:

 a) keeping a table of objects already copied during the current
    copying pass

 b) letting user-defined classes override the copying operation or the
    set of components copied

This version does not copy types like module, class, function, method,
nor stack trace, stack frame, nor file, socket, window, nor array, nor
any similar types.

Classes can use the same interfaces to control copying that they use
to control pickling: they can define methods called __getinitargs__(),
__getstate__() and __setstate__().  See the documentation for module
"pickle" for information on these methods.

"""
	pass

class core:
	pass

def enableDebugMessaging(level: str="ALL"):
	"""
Prints internal inspire messaging to command window.

  Args:
    level (str) : level defines the lowest level of messaging that should be seen.
      Defaults to ALL.
      Level can be,
      ERROR - prints internal inspire error messaging to command window.     
      WARN  - prints internal inspire warning messaging to command window.
      INFO  - prints internal inspire error, warning and info messaging 
            to command window.
      False - passed as boolean and disables all messaging.
  
"""
	pass

class enum:
	pass

def findClosestPoints(referencePoints, parts=None, featureType=None, localSys=True):
	"""
Finds the closest feature, distance, location from the given referencePoints.

  Args:
    referencePoints [Point]: Reference points.
    parts [Parts]: Parts on which find the closest feature.
      By default considers all the parts.
    featureType (str):  Filter the nearest feature based on feature type.
      valid filters are:
      - POINT
      - CURVE
      - AREA
    localSys (bool): If set to False, output points will be wrt to Global CSys
      else wrt local CSys.

  Returns:
    namedtuple("ClosestPoints", "points distances features")

  
"""
	pass

def fitView(objects=None, padded=True):
	"""
Ensures all visible objects can be seen in the view.
  
  See hwx.inspire.gui.fitView
  
"""
	pass

def flatten(x):
	"""
Recursively iterates through all leaf objects a container
"""
	pass

class functools:
	"""
functools.py - Tools for working with functions and callable objects

"""
	pass

class geometry:
	pass

def getActiveModel():
	"""
The root of the Inspire data model tree.
  
  Its not explicitly created. It exists as a singleton for the lifetime of the
  application. Multiple models may be supported in future releases.

  Use model.getChildren(...) to access all the descendent entities. Most types
  are stored as direct children of the model but Parts & Assemblies form
  a hierarchy.

  Use model.save(file) and inspire.openFile(file) to save/load the model contents.

  Returns:
    Model
  
"""
	pass

def getActiveProject():
	pass

def getCenterOfGravity(parts):
	"""
Return the Center of Gravity of the parts.
"""
	pass

def getClient():
	pass

def getCurrentResultsExplorer():
	"""
 Get the active Results Explorer object or None 
"""
	pass

def getMaterials():
	"""
Return a dictionary of defined material keys to the material name.

  Returns:
    dict[str, Material]
  
"""
	pass

def getModel():
	"""
The root of the Inspire data model tree.
  
  Its not explicitly created. It exists as a singleton for the lifetime of the
  application. Multiple models may be supported in future releases.

  Use model.getChildren(...) to access all the descendent entities. Most types
  are stored as direct children of the model but Parts & Assemblies form
  a hierarchy.

  Use model.save(file) and inspire.openFile(file) to save/load the model contents.

  Returns:
    Model
  
"""
	pass

def getProject():
	pass

def getRunHistoryPath():
	"""
Returns the path to the application run history directory.

  Returns:
    pathlib.Path
  
"""
	pass

def getSetting(setting=None, mustExist=False):
	"""
Returns the user preference value for a given setting.

  Args:
    setting (str): The preference option path with '/'.
    mustExist (bool): Raise exception if setting does not exist.

  Returns:
    bool | int | float | str | None
  
"""
	pass

def getSettings(setting=None, mustExist=False):
	"""
Returns the user preference value for a given setting.

  Args:
    setting (str): The preference option path with '/'.
    mustExist (bool): Raise exception if setting does not exist.

  Returns:
    bool | int | float | str | None
  
"""
	pass

def getSystemDirectory():
	"""
Returns the path to the installation directory.

  Returns:
    pathlib.Path
  
"""
	pass

def getTutorialFilePath(file):
	"""
Returns the absolute path to a tutorial model give a relative path.

  Args:
    file (str): Path relative to the tutorial_models directory.

  Returns:
    pathlib.Path
  
"""
	pass

def getUnits():
	"""
UnitsManager: For internal use...

  Use `with inspire.usingUnits(...)` to get/set values in a certain unit system.
  
"""
	pass

class gui:
	pass

def handleProblem(handler, suppress=False):
	"""
Contextmanager to wrap calls to inspire.useProblem.
  
  Useful to customize inspire.raiseProblem behavior in the context:
   - ignore warnings.
   - customize problem message.
  
  Args:
    wrapper (Callable): Receives Args:
      raiseProblem (Callable): Default raiseProblem implementation.
        Calling inspire.raiseProblem would be an infinite loop.
      problem (Problem): Problem passed to inspire.raiseProblem.
    suppress (bool): True to catch and ignore raised problems.
  
"""
	pass

def highlight(objects, color=True):
	"""
Temporarily make objects stand out, particularly useful to see features.
  
  Args:
    objects (list[Named, Feature] | Hole, Cavity)
  
"""
	pass

class hwcont:
	pass

class hwfdmImplicitEditIface:
	def __init__(self,other: hwfdmImplicitEditIface):
		pass

	def AddNewObject(self,*args):
		pass

	def EndEdit(self,accept: bool):
		pass

	def EraseObject(self,obj: hwfdmImplicitGeomObject, eraseChildren: bool = True):
		pass

	def FindObjectByCompoundId(self,id: hwString):
		pass

	def GetAllObjects(self,objects: hwfdmImplicitGeomObjectCollection, onlyValid: bool):
		pass

	def GetBodies(self,bodies: hwfdmImplicitGeomObjectCollection):
		pass

	def GetBodiesFromFeatureAreas(self,featureAreas: hwfdmFeatureAreaCollection, bodies: hwfdmImplicitGeomObjectCollection):
		pass

	def GetGraphicsInfo(self):
		pass

	def GetInstance(self,*args):
		pass

	def GetPart(self):
		pass

	def GetUniversalIdentifier(self,occurrence: hwfdmOccurrence):
		pass

	def GetVoxelSize(self):
		pass

	def HackyDoo(self):
		pass

	def HideBody(self,body: hwfdmImplicitGeomObject):
		pass

	def IsOpenedForEdit(self):
		pass

	def ModifyObject(self,*args):
		pass

	def OpenForEdit(self):
		pass

	def OpenMathObject(self,uuid: hwString):
		pass

	def RemoveTransformFromObject(self,obj: hwfdmImplicitGeomObject):
		pass

	def ResetObjectName(self,obj: hwfdmImplicitGeomObject, newName: hwString):
		pass

	def SaveMultifabPartID(self,partID: int , voidID: int , voxelSize: float , bounds: hwBox3d, fn: hwString):
		pass

	def SaveMultifabSDF(self,voxelSize: float , bounds: hwBox3d, fn: hwString):
		pass

	def SaveXML(self,fn: hwString):
		pass

	def SetBodyColor(self,body: hwfdmImplicitGeomObject, rgb: hwTriple, alpha: float):
		pass

	def SetObjectLocalTransform(self,obj: hwfdmImplicitGeomObject, transformInput: DirectImplicitTransformInputBase):
		pass

	def SetObjectTransform(self,obj: hwfdmImplicitGeomObject, transformInput: DirectImplicitTransformInputBase):
		pass

	def SetVoxelSize(self,voxelSize: float):
		pass

	def ShowBody(self,body: hwfdmImplicitGeomObject):
		pass

	def ShowHideToggleBody(self,body: hwfdmImplicitGeomObject):
		pass

	@property
	def thisown(self):
		pass
	@thisown.setter
	def thisown(self):
		pass

class hwfdmcore:
	pass

class hwfdminterface:
	pass

class hwfdmpluginAdapter:
	"""

Inspire's active project/model is managed by the hwfdmClient. This is a problem
during batch mode when no gui exists. This module defines a mock hwfdmClient to
store the active project when a real one doesn't exist.

This allows model to be used in 2 distinct contexts:
1) Unity is running with the Inspire plugin
   Core.py acts on the plugins Model object and is reflected in the gui
2) The Inspire plugin isn't loaded
   Core.py acts on a new Model with no gui overhead
   This is useful to speed up testing.
   
 Note: The HW_DEBUG env var is used to specify whether to use debug or release
 dlls on Windows when both builds exist.


"""
	pass

class hwhistory:
	pass

class hwmathbasic:
	pass

class hwmetadata:
	pass

class hwtypes:
	pass

class hwx:
	pass

class implicit:
	pass

def importFile(file):
	"""
Imports and merges a saved model with the current model.

  The imported model is inserted as an assembly under the top-level folder in 
  the Model Browser.
  
  Args:
    file (str): Path to the file.
  
"""
	pass

def importTutorialFile(file):
	"""
Opens the model from the tutorials folder and add it to the active model.

  Args:
    file (str): Path relative to the tutorial_models directory.
  
"""
	pass

def installTranslations(file):
	"""
Install the translation file (*.qm) to handle internationalization.
     
     If running in GUI, delegate the call to the gui code
     if running in batch, do nothing

     see hwx.gui.installTranslations from more information
  
"""
	pass

class ipMgr:
	def __init__(self,*args, **kwargs):
		pass

	def Classify(self,cf: hwfdmConstructionFeature):
		pass

	def CreateAcornPart(self,parent: hwfdmAssemblyOccurrence, points: hwTripleList, occSystem: hwSystem, excludeCreatedPartFromConstructionHistory: bool = False):
		pass

	def CreateAxis(self):
		pass

	def CreateBlendCurve(self):
		pass

	def CreateBooleanIntersect(self):
		pass

	def CreateBooleanSubtract(self):
		pass

	def CreateBooleanUnion(self):
		pass

	def CreateBreakInstance(self):
		pass

	def CreateChamfer(self):
		pass

	def CreateCircularPattern(self):
		pass

	def CreateCloseHoles(self):
		pass

	def CreateConvertToGeometry(self):
		pass

	def CreateConvertToMass(self):
		pass

	def CreateConvertToTriangleMesh(self):
		pass

	def CreateDeleteAssemblies(self):
		pass

	def CreateDeleteParts(self):
		pass

	def CreateDesignPosition(self):
		pass

	def CreateDivideCurve(self):
		pass

	def CreateDraft(self):
		pass

	def CreateEdgeFillet(self):
		pass

	def CreateExplode(self):
		pass

	def CreateExtendCurve(self):
		pass

	def CreateExtendFace(self):
		pass

	def CreateExtract(self):
		pass

	def CreateExtrude(self):
		pass

	def CreateFaceCurve(self):
		pass

	def CreateFeatureMove(self):
		pass

	def CreateFillet(self):
		pass

	def CreateHelixCurve(self):
		pass

	def CreateHollowShell(self):
		pass

	def CreateImplicitGeometryPart(self):
		pass

	def CreateInstance(self):
		pass

	def CreateIntersect(self):
		pass

	def CreateIntersectCurves(self):
		pass

	def CreateLinearPattern(self):
		pass

	def CreateLoft(self):
		pass

	def CreateMeshRemoveIslands(self):
		pass

	def CreateMidSurface(self):
		pass

	def CreateMirror(self):
		pass

	def CreateMove(self):
		pass

	def CreateMultiSweep(self):
		pass

	def CreateNewAssembly(self):
		pass

	def CreateNurbsCurve(self):
		pass

	def CreateOffset(self):
		pass

	def CreateOffsetCurve3D(self):
		pass

	def CreatePartReplaceFromFile(self):
		pass

	def CreatePartReplaceFromPart(self):
		pass

	def CreatePartition(self):
		pass

	def CreatePatch(self):
		pass

	def CreatePatternAlongCurve(self):
		pass

	def CreatePipe(self):
		pass

	def CreatePlane(self):
		pass

	def CreatePointPart(self,parent: hwfdmAssemblyOccurrence, location: hwTriple, occSystem: hwSystem, excludeCreatedPartFromConstructionHistory: bool = False):
		pass

	def CreatePolyNurbsPart(self):
		pass

	def CreatePosition(self):
		pass

	def CreateProjectAndSplit(self):
		pass

	def CreateProjection(self):
		pass

	def CreatePushpull(self):
		pass

	def CreateRevolve(self):
		pass

	def CreateRevolve2(self):
		pass

	def CreateRib(self):
		pass

	def CreateScale(self):
		pass

	def CreateSeamWeld(self):
		pass

	def CreateSection(self):
		pass

	def CreateSheetCircle(self,parent: hwfdmAssemblyOccurrence, radius: float , occSystem: hwSystem, excludeCreatedPartFromConstructionHistory: bool = False):
		pass

	def CreateSheetPolygon(self,parent: hwfdmAssemblyOccurrence, radius: float , nSides: float , occSystem: hwSystem, excludeCreatedPartFromConstructionHistory: bool = False):
		pass

	def CreateSheetRectangle(self,parent: hwfdmAssemblyOccurrence, xExtent: float , yExtent: float , occSystem: hwSystem, excludeCreatedPartFromConstructionHistory: bool = False):
		pass

	def CreateShrinkwrap(self):
		pass

	def CreateSimplifyHoles(self):
		pass

	def CreateSimplifyImprints(self):
		pass

	def CreateSimplifyPlugs(self):
		pass

	def CreateSimplifyRounds(self):
		pass

	def CreateSketch(self,*args):
		pass

	def CreateSlice(self):
		pass

	def CreateSolidBlock(self,parent: hwfdmAssemblyOccurrence, xExtent: float , yExtent: float , zExtent: float , occSystem: hwSystem, excludeCreatedPartFromConstructionHistory: bool = False):
		pass

	def CreateSolidCone(self,parent: hwfdmAssemblyOccurrence, radius: float , height: float , semiAngle: float , occSystem: hwSystem, excludeCreatedPartFromConstructionHistory: bool = False):
		pass

	def CreateSolidCylinder(self,parent: hwfdmAssemblyOccurrence, radius: float , height: float , cylOptions: hwfdmCreateSolidCylinderOptions, occSystem: hwSystem, excludeCreatedPartFromConstructionHistory: bool = False):
		pass

	def CreateSolidEllipsoid(self,parent: hwfdmAssemblyOccurrence, halfExtents: hwTriple, occSystem: hwSystem, excludeCreatedPartFromConstructionHistory: bool = False):
		pass

	def CreateSolidPrism(self,parent: hwfdmAssemblyOccurrence, radius: float , height: float , nSides: float , blendRadius: float , occSystem: hwSystem, excludeCreatedPartFromConstructionHistory: bool = False):
		pass

	def CreateSolidSphere(self,parent: hwfdmAssemblyOccurrence, radius: float , occSystem: hwSystem, excludeCreatedPartFromConstructionHistory: bool = False):
		pass

	def CreateSolidTorus(self,parent: hwfdmAssemblyOccurrence, majorRadius: float , minorRadius: float , occSystem: hwSystem, excludeCreatedPartFromConstructionHistory: bool = False):
		pass

	def CreateSpunOutline(self):
		pass

	def CreateSweep(self):
		pass

	def CreateTracerCurve(self):
		pass

	def Delete(self,arg1: IPI_CF):
		pass

	def DeleteAtIndex(self,index: int):
		pass

	def ExcludeFromConstructionHistory(self,*args):
		pass

	def ForceRegenerateAll(self):
		pass

	def GetCF(self,index: int):
		pass

	def GetCFNames(self,cfNames: hwStringList):
		pass

	def GetCurrentIndex(self):
		pass

	def GetDetails(self):
		pass

	def GetObjsCreated(self,arg1: IPI_CF):
		pass

	def GetObjsModified(self,arg1: IPI_CF):
		pass

	def GetOccsCreated(self,arg1: IPI_CF):
		pass

	def GetOccsModified(self,arg1: IPI_CF):
		pass

	def GoToCF(self,arg1: IPI_CF):
		pass

	def GoToEnd(self):
		pass

	def Import(self,filename: hwString):
		pass

	def IsExcludedFromConstructionHistory(self,*args):
		pass

	def Open(self,filename: hwString):
		pass

	def RollToIndex(self,index: int):
		pass

	def Suppress(self,arg1: IPI_CF):
		pass

	def Unsuppress(self,arg1: IPI_CF):
		pass

	@property
	def thisown(self):
		pass
	@thisown.setter
	def thisown(self):
		pass

class ipi:
	pass

def ishole(f):
	"""
Check if passed object is a round or partially round hole.

  Only applicable for FeatureCircular and FeatureCylindrical. False otherwise.

  Args:
    feature (Feature): Part feature with type FeatureCylindrical, FeatureCircular..etc.

  Returns:
    bool
  
"""
	pass

def isolate(objects):
	"""
Isolates objects in the modeling window. 
  
  Isolating an object zooms in and hides all other objects.
  
  Args:
    objects (list[Named])
  
"""
	pass

def iterate(x):
	"""
Iterate over x or yield x if not iterable
"""
	pass

class json:
	"""
JSON (JavaScript Object Notation) <http://json.org> is a subset of
JavaScript syntax (ECMA-262 3rd edition) used as a lightweight data
interchange format.

:mod:`json` exposes an API familiar to users of the standard library
:mod:`marshal` and :mod:`pickle` modules.  It is derived from a
version of the externally maintained simplejson library.

Encoding basic Python object hierarchies::

    >>> import json
    >>> json.dumps(['foo', {'bar': ('baz', None, 1.0, 2)}])
    '["foo", {"bar": ["baz", null, 1.0, 2]}]'
    >>> print(json.dumps("\"foo\bar"))
    "\"foo\bar"
    >>> print(json.dumps('\u1234'))
    "\u1234"
    >>> print(json.dumps('\\'))
    "\\"
    >>> print(json.dumps({"c": 0, "b": 0, "a": 0}, sort_keys=True))
    {"a": 0, "b": 0, "c": 0}
    >>> from io import StringIO
    >>> io = StringIO()
    >>> json.dump(['streaming API'], io)
    >>> io.getvalue()
    '["streaming API"]'

Compact encoding::

    >>> import json
    >>> mydict = {'4': 5, '6': 7}
    >>> json.dumps([1,2,3,mydict], separators=(',', ':'))
    '[1,2,3,{"4":5,"6":7}]'

Pretty printing::

    >>> import json
    >>> print(json.dumps({'4': 5, '6': 7}, sort_keys=True, indent=4))
    {
        "4": 5,
        "6": 7
    }

Decoding JSON::

    >>> import json
    >>> obj = ['foo', {'bar': ['baz', None, 1.0, 2]}]
    >>> json.loads('["foo", {"bar":["baz", null, 1.0, 2]}]') == obj
    True
    >>> json.loads('"\\"foo\\bar"') == '"foo\x08ar'
    True
    >>> from io import StringIO
    >>> io = StringIO('["streaming API"]')
    >>> json.load(io)[0] == 'streaming API'
    True

Specializing JSON object decoding::

    >>> import json
    >>> def as_complex(dct):
    ...     if '__complex__' in dct:
    ...         return complex(dct['real'], dct['imag'])
    ...     return dct
    ...
    >>> json.loads('{"__complex__": true, "real": 1, "imag": 2}',
    ...     object_hook=as_complex)
    (1+2j)
    >>> from decimal import Decimal
    >>> json.loads('1.1', parse_float=Decimal) == Decimal('1.1')
    True

Specializing JSON object encoding::

    >>> import json
    >>> def encode_complex(obj):
    ...     if isinstance(obj, complex):
    ...         return [obj.real, obj.imag]
    ...     raise TypeError(f'Object of type {obj.__class__.__name__} '
    ...                     f'is not JSON serializable')
    ...
    >>> json.dumps(2 + 1j, default=encode_complex)
    '[2.0, 1.0]'
    >>> json.JSONEncoder(default=encode_complex).encode(2 + 1j)
    '[2.0, 1.0]'
    >>> ''.join(json.JSONEncoder(default=encode_complex).iterencode(2 + 1j))
    '[2.0, 1.0]'


Using json.tool from the shell to validate and pretty-print::

    $ echo '{"json":"obj"}' | python -m json.tool
    {
        "json": "obj"
    }
    $ echo '{ 1.2:3.4}' | python -m json.tool
    Expecting property name enclosed in double quotes: line 1 column 3 (char 2)

"""
	pass

def makeSmooth(parts=None, maintainVolume=True, intensity=0.5, iterations=40):
	"""
Smoothens parts from the selected parts with passed params.

  Args:
    parts (list[Part]): A list of parts to smooth
    maintainVolume (bool): If True part volume is targeted to be preserved.
      If false smoothening is done more aggressively every iteration
    intensity (float[0.2, 0.9]): this control how aggressive the smoothening
      operation is every iteration.
    iterations (int): The number of iterations algorithm does smoothening.
      Higher number results in smoother mesh

  
"""
	pass

class manufacture:
	pass

class math:
	pass

def memoizeUntilModelChanged(func):
	"""
Cache return value until any change in the model
"""
	pass

def memoizeUntilObjectChanged(objArg="0"):
	"""
Cache return value until object argument is modified
"""
	pass

def memoizeUntilTypeChanged(namedCls):
	"""
Cache return value until any object of type namedCls is modified
"""
	pass

class motion:
	pass

def newModel():
	"""
Clear the model resetting it back to its initial/empty state.

  Returns:
    Model
  
"""
	pass

class nx:
	pass

def openFile(file):
	"""
Replace the current model with the saved one.

  Args:
    file (str): Path to the file.

  Returns:
    Model
  
"""
	pass

def openH3dFile(file):
	"""
Open the input result h3d file.

  Args:
    file (str): Path to the file.

  Returns:
    Model
  
"""
	pass

def openTutorialFile(file):
	"""
Opens the given input model from tutorial directory.

  Args:
    file (str): Path relative to the tutorial_models directory.

  Returns:
    Model
  
"""
	pass

def orientView(direction: str="top", up=None):
	"""
Rotates your model to a standard view or one specified by a direction
    and up vector.
    
  See hwx.inspire.gui.orientView
  
"""
	pass

class pathlib:
	pass

def raiseProblem(problem, suppressIface=None, **kwds):
	"""
Shows an error or warning in the inspire.gui.ProblemDialog.
  
  Args:
    problem: See inspire.Problem.
    suppressIface: Object implementing interface:
      - isSuppressed(message: str, key)
      - suppressWarning(message: str, key)
      Allows user to ignore warnings from ProblemDialog.
  
  Execution blocks until the user chooses an option. Then:
  - The problem is raised if type == 'error'.
  - Execution continues if type == 'warning', and user selects Continue.
  - Else AbortException is raised.

  In batch mode this prints the problem + solution message to the console.
  
"""
	pass

def redrawView(processEvents=False):
	"""
Forces a redraw of the active graphics window.
  Useful when executing commands from the Console and the graphics are cached 
  or updating the view for animation.

  Args:
    processEvents (bool) : True, makes gui responsive to the user.
  
"""
	pass

def removeIsland(part):
	"""
Finds small disconnected regions of a mesh part and delete them.

  Args:
    part (Part): Part having island.
  
"""
	pass

def removeSmooth(parts=None):
	"""

  Removes any existing smoothening from passed parts

  Args:
    parts (list[Part]): A list of parts to removing smooothing from.

  
"""
	pass

def resultsFormatOptions(**kwargs):
	"""
  Params:
         formatType = format type: default, legacy, fixed, scientific, mixed or custom
         formatStr = a printf-like format string, e.g. '%.2f', the format type will set to 'custom' if formatStr is provided
         
         formula = a formula to be used to convert the value, by default there will be used the formula related to the result type
         units = the units to be used for the output, by default the current units will be used
         convertValue = whether the value should be converted with the given/default formula/units
         
         showUnits = whether to show the units
         unitsDisplayName = the units to be shown, by default the current units will be used
         
         width = output width (excluding units) - except legacy and custom format types
         precision = precision  - except legacy and custom format types
         
         stripSpaces = whether to remove leading and tailing spaces from the output
         removeTrailingZeros = whether to remove trailing zeroes
         
         fixedMinMax = (min, max) values for the mixed format, to be considered to switch to scientific format
  
"""
	pass

def runInParallel(raiseOnError=True):
	"""
A context manager to use for running multiple analysis in paralell.
  Note: This can be used only for OptiStruct Analysis.

  Args:
    raiseOnError(bool): If True, raise error on any failed run.
  
"""
	pass

def runningInBatch():
	"""
Return True if the application runs in batch mode, False otherwise.
  
  Returns:
    bool : Returns True in batch mode, else False.
  
"""
	pass

def runningInDarkTheme():
	"""
Return True if the application runs in dark theme.
  
  Useful if you want to adjust colors in GeneralObject.draw methods.
  
"""
	pass

def saveCurrentResultSnapshot(filename, bgColor=None, width=1000, height=750, fitToImage=False):
	"""
Saves the results graphic window and analysis explorer dialog to a file.

  Keep the graphics window as big as possible to get a clear snapshot.

  Args:
    filename (str): The complete file name to write the image to.
    bgColor (str | tuple[float, float, float]): The desired background color.
    width (int): The desired width of the image.
    height (int): The desired height of the image.
    fitToImage (bool): If true, fits the objects to be drawn into the image.

  Raises:
    RuntimeError: In case you call the method in batch mode.
    RuntimeError: In case the Analysis explorer isn't displayed in the graphics window.
  
"""
	pass

def setSetting(setting, value):
	"""
Sets the user preference value for a given setting.
  
  Args:
    setting (str) : Path to preference option.
    value (bool | int | float | str)
  
"""
	pass

class settings:
	"""
Settings are named values maintained across application runs.

   They are user settable via the PreferencesEditor from the File menu.

   Settings are stored hierarchically in sections.
   To set/get a setting you use a slash (/) seperated string.

   This module supports the use cases:
     get the current value of a setting
     set the value of a setting
     define settings for plugins

   To get a setting value use:
     from hwx.common.Setting import getSetting
     getSetting ("Unity/BaseProfile/Workspace/Workspace/Language")

   To set a value use:
     from hwx.common.Setting import setSetting
     setSetting ("Unity/BaseProfile/Workspace/Workspace/Language", "English")

     Only pre-defined settings can be set.
     This is due to the way the settings are defined at application start up
     The startup code only adds settings to the application setting that are
     found in the plugins xml files and are defined via the classes in this file
     This is desinged to clean up old setting definitions from tha application
     definitions

   To define settings for a plugin:
     This is designed to look/work like the c++ plugins settings from an xml
     file
     The defined settings are added to and saved with the application settings
     Each time the settings are defined they replace the previouse ones.
     BUT if the new settings contain a setting found in the old settings
     and the user had changed it, we use the changed setting

     To define plugin settings use the Plugin, TreeItem and Section classes
     See these class docs for forther information of the following example

     #- Example of defining settings for a plugin ----------------------------
     from hwx.common.Settings import Settings, Plugin, TreeItem, Section

     Colors = "Divergent (Red-Blue)", "Rainbow"

     Plugin ("HFA", displayName="Stamping", sections=(
        TreeItem ("Analysis", sections=(
           Section ("Analysis", settings=(
             ("Element size",    ("Coarse", "*Medium", "Fine")),
             ("Fill Hole",       False),
             ("Run history path", "", "ExistingDirEditorWidget"),
           )),
           Section ("Analysis Legend Colors", settings=(
             ("Thinning",     Colors),
             ("Formability",  Colors),
             ("Thickness",    Colors),
           )),
        )),
     ))
     #- end of example -------------------------------------------------------

"""
	pass

def showMessage(msg):
	"""
Display a message in the status bar at the bottom left of the main window.

  The message remains until clearMessage() or another message is shown.

  Args:
    msg (str) : Message to be displayed in the status bar.
  
"""
	pass

def showProgress(percent):
	pass

def shrinkWrap(parts=None, voxelSize=-1, merge=True, sharpen=False):
	"""
Creates a new part/parts from the selected parts with a single isosurface

  The shrinkwrap is useful when you want to merge optimized results with 
  non-design-space regions. 

  You would do this so you can fit a single PolyNURBS over the entire model.
  By default, the selected parts are merged into a single part. 
  This option can be disabled by setting merge to False.

  Args:
    parts (list[Part]): A list of parts to be shrink wrapped.
    voxelSize (float): Size of each voxel of the shrink wrapped part. Size
      value should be in the range 0 to 1 Defaults to -1 to auto compute the
      voxel dimension of the part.
    merge (bool): Merge the shrink wrapped parts into single or multiple parts.
    sharpen (bool): If set to True, then sharpen the edges of the new shrink
      wrapped part.

  Returns:
    Part: Returns a new shrink wrapped part
  
"""
	pass

class sigslot:
	pass

class staticproperty:
	def __init__(self,fget=None, fset=None, fdel=None, doc=None):
		"""
See classproperty.
"""
		pass

def syncVariables():
	"""
Handle ParameterManager signals for GeneralObjects.
   
   - Tell it which vars are in use. Don't let their type be changed.
   - Notify ModelListener/gui when var values change.
   - Handle rename, destroy.
  
"""
	pass

def tr(string,context: str="hwfdmNamed", **kwds):
	pass

def translate(string, context=None, comment=None, args=None):
	"""
Return the string translated into the users language
  
     see hwx.gui.translate for more information
  
"""
	pass

def useRunDirectory(path):
	"""
contextmanager to 
"""
	pass

def usingUnits(system):
	"""
Get or set data model values in specified unit system.

  Args:
    system (str) : Name of unit system:
      base: The default units when none is specified (MKS).
      gui: User selected units for display in the gui.
      solver: Used for converting numbers when exporting to a solver.
        Comes from: inspire.getSetting("Inspire/Units/Units/Model units")
      MKS, CGS, IPS,...: Name of system.
        See inspire.getUnits().gui.getSystemNames() for all options.

  Returns:
    contextmanager
  
"""
	pass

class virtualMethodDecorator:
	def __init__(self,default=None,exceptions: str="(<class Exception>,)"):
		"""
Decorate overloaded virtual methods to handle Python Exceptions

     Python exceptions in virtual methods can cause application crashes
     because of invalid return value.
     This decorator wraps the method with a try/except and returns the
     specified default value.
  
"""
		pass

def waitCursor(cursor: str="wait", message=None):
	"""
Context for displaying a wait cursor.

  Args:
    cursor(str): cursor name.
    message(str): message to be displayed in the status bar.
  
"""
	pass

def waitUntil(condition, keepGuiActive=False, pollInterval=0.1):
	"""
Loop until condition becomes True.
  
  Args:
    keepGuiActive (bool): Let user interact with gui while waiting.
      Condition is checked after every user input event.
      Warning: Anything could happen while waiting. User may delete the model!
    pollInterval: Sleep time between checking condition when not keepGuiActive.
  
"""
	pass

